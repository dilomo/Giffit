<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KGySoft.Drawing</name>
    </assembly>
    <members>
        <member name="T:KGySoft.ComponentModel.AdvancedImageConverter">
            <summary>
            Provides a converter for <see cref="T:System.Drawing.Image"/> instances that can preserve the original format of images better than the <see cref="T:System.Drawing.ImageConverter"/> class when converting <see cref="T:System.Drawing.Bitmap"/>,
            <see cref="T:System.Drawing.Imaging.Metafile"/> and <see cref="T:System.Drawing.Icon"/> images.
            </summary>
            <remarks>
            <note>This class is available in the .NET Framework and .NET Core 3.0 or later versions.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.ComponentModel.AdvancedImageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a specified object to an <see cref="T:System.Drawing.Image" />.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. In this converter this parameter is ignored.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. In this converter this parameter is ignored.</param>
            <param name="value">The <see cref="T:System.Object" /> to be converted.</param>
            <returns>If this method succeeds, it returns the <see cref="T:System.Drawing.Image" /> that it created by converting the specified object. Otherwise, it throws an exception.</returns>
        </member>
        <member name="M:KGySoft.ComponentModel.AdvancedImageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an <see cref="T:System.Drawing.Image" /> (or an object that can be cast to an <see cref="T:System.Drawing.Image" />) to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. In this converter this parameter is ignored.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. In this converter this parameter is ignored.</param>
            <param name="value">The <see cref="T:System.Drawing.Image" /> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <see cref="T:System.Drawing.Image" /> to.
            This type converter supports <see cref="T:System.Array">byte[]</see> type.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="T:KGySoft.ComponentModel.NamespaceDoc">
            <summary>
            In KGy SOFT Drawing Libraries the <c>KGySoft.ComponentModel</c> namespace contains a single <see cref="T:System.ComponentModel.TypeConverter"/> implementation.
            <br/>For more <c>KGySoft.ComponentModel</c> types see the <a href="http://docs.kgysoft.net/corelibraries/?topic=html/N_KGySoft_ComponentModel.htm" target="_blank">KGySoft.ComponentModel</a> namespace of the KGy SOFT Core Libraries.
            <br/>For the main KGy SOFT Drawing Libraries features see the <see cref="N:KGySoft.Drawing">KGySoft.Drawing</see> and <see cref="N:KGySoft.Drawing.Imaging">KGySoft.Drawing.Imaging</see> namespaces.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.AsyncConfig">
            <summary>
            Represents asynchronous configuration for <see cref="T:System.IAsyncResult"/>-returning methods.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.AsyncConfig.IsCancelRequestedCallback">
            <summary>
            Gets or sets a callback that can return whether cancellation has been requested.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.AsyncConfig.CompletedCallback">
            <summary>
            Gets or sets a callback that will be invoked when the operation is completed.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.AsyncConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.AsyncConfig"/> class.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.AsyncConfig.#ctor(System.AsyncCallback,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.AsyncConfig"/> class.
            </summary>
            <param name="completedCallback">A callback that will be invoked when the operation is completed..</param>
            <param name="isCancelRequestedCallback">A callback that can return whether cancellation has been requested.</param>
        </member>
        <member name="T:KGySoft.Drawing.AsyncConfigBase">
            <summary>
            Represents the base class for configuration of asynchronous operations.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.AsyncConfigBase.Progress">
            <summary>
            Gets or sets an <see cref="T:KGySoft.Drawing.IDrawingProgress"/> instance that can handle progress notifications.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism">
            <summary>
            Gets or sets the maximum degree of parallelism. Zero or less means an automatic configuration based on CPU cores.
            Set one to execute the operation on a single core. The asynchronous operation will not be blocking even if 1 is set.
            <br/>Default value: 0.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled">
            <summary>
            Gets or sets whether an <see cref="T:System.OperationCanceledException"/> should be thrown when ending or awaiting a canceled async operation.
            If the value of this property is <see langword="false"/>, then canceled operations with a return value will return the default value of their return type.
            <br/>Default value: <see langword="true"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.AsyncConfigBase.State">
            <summary>
            Gets or sets a user-provided object that will be returned by the <see cref="P:System.IAsyncResult.AsyncState"/> property that
            can be used to distinguish this particular asynchronous operation from other ones.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.CursorHandle">
            <summary>
            Represents a windows cursor that supports colors and partial transparency. The <see cref="T:KGySoft.Drawing.CursorHandle"/> instance can be passed to the
            <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">System.Windows.Forms.Cursor</a> constructor
            to create a new cursor. <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>A <see cref="T:KGySoft.Drawing.CursorHandle"/> instance can be created from an <see cref="T:System.Drawing.Icon"/> or <see cref="T:System.Drawing.Bitmap"/> instance by using the
            <see cref="M:KGySoft.Drawing.IconExtensions.ToCursorHandle(System.Drawing.Icon,System.Drawing.Point)">IconExtensions.ToCursorHandle</see> and <see cref="M:KGySoft.Drawing.BitmapExtensions.ToCursorHandle(System.Drawing.Bitmap,System.Drawing.Point)">BitmapExtensions.ToCursorHandle</see> extension methods.</para>
            <para>This class can be used to create a custom Windows Forms <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">Cursor</a> that supports colors and partial transparency.
            <note type="important">Do keep a reference to this <see cref="T:KGySoft.Drawing.CursorHandle"/> instance until the cursor is in use; otherwise, the cursor resources might be disposed too soon.</note></para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.CursorHandle.IsInvalid">
            <summary>
            Gets whether the handle value is invalid.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.CursorHandle.op_Implicit(KGySoft.Drawing.CursorHandle)~System.IntPtr">
            <summary>
            Performs an implicit conversion from <see cref="T:KGySoft.Drawing.CursorHandle"/> to <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="cursorHandle">The cursor handle.</param>
            <returns>An <see cref="T:System.IntPtr"/> instance representing the native cursor handle.</returns>
        </member>
        <member name="M:KGySoft.Drawing.CursorHandle.ReleaseHandle">
            <summary>
            Free the unmanaged cursor handle.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.DrawingModule">
            <summary>
            Represents the <c>KGySoft.Drawing</c> module.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.DrawingModule.Initialize">Initialize</see> method for details.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.DrawingModule.Initialize">
             <summary>
             Initializes the <c>KGySoft.Drawing</c> module. On non-Windows platforms it makes possible to use <c>System.Drawing</c> types without
             editing the <c>runtimeconfig.json</c> file. Additionally, it initializes the resource manager for string resources and registers its central management
             in the <a href="http://docs.kgysoft.net/corelibraries/?topic=html/T_KGySoft_LanguageSettings.htm" target="_blank">LanguageSettings</a> class.
             <br/>See the <strong>Remarks</strong> section for details.
             </summary>
             <remarks>
             <note>The module initializer is executed automatically when any member is accessed in the module for the first time. This method is public to able
             to trigger module initialization without performing any other operation. Normally you don't need to call it explicitly but it can be useful if you use
             the KGy SOFT Drawing Libraries in an application and you want to configure resource management on starting the application via
             the <a href="http://docs.kgysoft.net/corelibraries/?topic=html/T_KGySoft_LanguageSettings.htm" target="_blank">LanguageSettings</a> class.
             In such case you can call this method before configuring language settings to make sure that the resources of
             the <c>KGySoft.Drawing.dll</c> are also affected by the settings.</note>
             <note type="important">If you use KGy SOFT Drawing Libraries from a non-Windows application, then make sure you call this method
             before using any <c>System.Drawing</c> type to prevent a <see cref="T:System.TypeInitializationException"/> without editing the <c>runtimeconfig.json</c> file.
             It is not necessary if you reference the .NET Framework build under Mono.</note>
             </remarks>
             <example>
             The following example demonstrates how to initialize the <c>KGySoft.Drawing</c> module in an application (you don't really need to do this
             if you use KGy SOFT Drawing Libraries from a class library):
             <code lang="C#"><![CDATA[
             using KGySoft;
             using KGySoft.Drawing;
             using KGySoft.Resources;
             
             public class Example
             {
                 public static void Main()
                 {
                     // To make sure that configuring LanguageSettings affects also the resources in KGySoft.Drawing
                     // For non-Windows applications it also enables using System.Drawing types
                     DrawingModule.Initialize();
            
                     // Opting in to use compiled and .resx resources for the application
                     LanguageSettings.DynamicResourceManagersSource = ResourceManagerSources.CompiledAndResX;
                     LanguageSettings.DisplayLanguage = MyConfigs.GetLastlyUsedLanguage(); // Get some CultureInfo
             
                     // Optional: To add possibly new resource entries to the localization of the current language
                     LanguageSettings.EnsureInvariantResourcesMerged();
            
                     // Now you can launch the actual application
                     LaunchMyApplication(); // whatever your app actually does
                 }
             }]]></code>
             </example>
        </member>
        <member name="T:KGySoft.Drawing.IconInfo">
            <summary>
            Provides information about an <see cref="T:System.Drawing.Icon"/> image.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IconInfo.Size">
            <summary>
            Gets the size of the icon image.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IconInfo.BitsPerPixel">
            <summary>
            Gets the bits per pixel (BPP) value of the icon image.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IconInfo.IsCompressed">
            <summary>
            Gets whether the icon image is compressed.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IconInfo.Palette">
            <summary>
            Gets the palette of the icon image, or <see langword="null"/>, if it has no palette.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Icons">
            <summary>
            Provides some icon-related methods as well as properties returning general icons in multi resolution. Unlike <see cref="T:System.Drawing.SystemIcons"/>, these icons should be disposed when not used any more.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SystemInformation">
            <summary>
            <img src="../Help/Images/Information16W10.png" alt="Information (small version for the summary)"/>
            Gets an <see cref="T:System.Drawing.Icon"/> instance that contains a large and a small
            Information icon as it is displayed by the current operating system.
            <br/>In Windows Vista and above sizes are depending on current DPI settings, in Windows XP and Linux the icon has always 32x32 and 16x16 image sizes.
            </summary>
            <remarks>
            <para>
            In Windows 8 and Windows 10 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Information32W10.png" alt="Information 32x32"/>
            <img src="../Help/Images/Information16W10.png" alt="Information 16x16"/>
            </para>
            <para>
            In Windows Vista and Windows 7 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Information32.png" alt="Information 32x32"/>
            <img src="../Help/Images/Information16.png" alt="Information 16x16"/>
            </para>
            <para>
            In Windows XP the icon contains the following images:<br/>
            <img src="../Help/Images/InformationXP32.png" alt="Information Windows XP 32x32"/>
            <img src="../Help/Images/InformationXP16.png" alt="Information Windows XP 16x16"/>
            </para>
            <para>
            On Linux/Mono the icon contains the following images:<br/>
            <img src="../Help/Images/Information32Mono.png" alt="Information Linux/Mono 32x32"/>
            <img src="../Help/Images/Information16Mono.png" alt="Information Linux/Mono 16x16"/>
            <note>In Linux the .NET Core build mistakenly returns the <see cref="P:KGySoft.Drawing.Icons.SystemError"/> icon, which is an issue in the <see cref="T:System.Drawing.SystemIcons"/> implementation of .NET Core.</note>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SystemWarning">
            <summary>
            <img src="../Help/Images/Warning16W10.png" alt="Warning (small version for the summary)"/>
            Gets an <see cref="T:System.Drawing.Icon"/> instance that contains a large and a small
            Warning icon as it is displayed by the current operating system.
            <br/>In Windows Vista and above sizes are depending on current DPI settings, in Windows XP and Linux the icon has always 32x32 and 16x16 image sizes.
            </summary>
            <remarks>
            <para>
            In Windows 8 and Windows 10 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Warning32W10.png" alt="Warning 32x32"/>
            <img src="../Help/Images/Warning16W10.png" alt="Warning 16x16"/>
            </para>
            <para>
            In Windows Vista and Windows 7 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Warning32.png" alt="Warning 32x32"/>
            <img src="../Help/Images/Warning16.png" alt="Warning 16x16"/>
            </para>
            <para>
            In Windows XP the icon contains the following images:<br/>
            <img src="../Help/Images/WarningXP32.png" alt="Warning Windows XP 32x32"/>
            <img src="../Help/Images/WarningXP16.png" alt="Warning Windows XP 16x16"/>
            </para>
            <para>
            On Linux/Mono the icon contains the following images:<br/>
            <img src="../Help/Images/Warning32Mono.png" alt="Warning Linux/Mono 32x32"/>
            <img src="../Help/Images/Warning16Mono.png" alt="Warning Linux/Mono 16x16"/>
            <note>In Linux the .NET Core build mistakenly returns the <see cref="P:KGySoft.Drawing.Icons.SystemError"/> icon, which is an issue in the <see cref="T:System.Drawing.SystemIcons"/> implementation of .NET Core.</note>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SystemError">
            <summary>
            <img src="../Help/Images/Error16W10.png" alt="Error (small version for the summary)"/>
            Gets an <see cref="T:System.Drawing.Icon"/> instance that contains a large and a small
            Error icon as it is displayed by the current operating system.
            <br/>In Windows Vista and above sizes are depending on current DPI settings, in Windows XP and Linux the icon has always 32x32 and 16x16 image sizes.
            </summary>
            <remarks>
            <para>
            In Windows 8 and Windows 10 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Error32W10.png" alt="Error 32x32"/>
            <img src="../Help/Images/Error16W10.png" alt="Error 16x16"/>
            </para>
            <para>
            In Windows Vista and Windows 7 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Error32.png" alt="Error 32x32"/>
            <img src="../Help/Images/Error16.png" alt="Error 16x16"/>
            </para>
            <para>
            In Windows XP the icon contains the following images:<br/>
            <img src="../Help/Images/ErrorXP32.png" alt="Error Windows XP 32x32"/>
            <img src="../Help/Images/ErrorXP16.png" alt="Error Windows XP 16x16"/>
            </para>
            <para>
            On Linux/Mono the icon contains the following images:<br/>
            <img src="../Help/Images/Error32Mono.png" alt="Error Linux/Mono 32x32"/>
            <img src="../Help/Images/Error16Mono.png" alt="Error Linux/Mono 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SystemQuestion">
            <summary>
            <img src="../Help/Images/Question16W10.png" alt="Question (small version for the summary)"/>
            Gets an <see cref="T:System.Drawing.Icon"/> instance that contains a large and a small
            Question icon as it is displayed by the current operating system.
            <br/>In Windows Vista and above sizes are depending on current DPI settings, in Windows XP and Linux the icon has always 32x32 and 16x16 image sizes.
            </summary>
            <remarks>
            <para>
            In Windows 8 and Windows 10 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Question32W10.png" alt="Question 32x32"/>
            <img src="../Help/Images/Question16W10.png" alt="Question 16x16"/>
            </para>
            <para>
            In Windows Vista and Windows 7 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Question32.png" alt="Question 32x32"/>
            <img src="../Help/Images/Question16.png" alt="Question 16x16"/>
            </para>
            <para>
            In Windows XP the icon contains the following images:<br/>
            <img src="../Help/Images/QuestionXP32.png" alt="Question Windows XP 32x32"/>
            <img src="../Help/Images/QuestionXP16.png" alt="Question Windows XP 16x16"/>
            </para>
            <para>
            On Linux/Mono the icon contains the following images:<br/>
            <img src="../Help/Images/Question32Mono.png" alt="Question Linux/Mono 32x32"/>
            <img src="../Help/Images/Question16Mono.png" alt="Question Linux/Mono 16x16"/>
            <note>In Linux the .NET Core build mistakenly returns the <see cref="P:KGySoft.Drawing.Icons.SystemError"/> icon, which is an issue in the <see cref="T:System.Drawing.SystemIcons"/> implementation of .NET Core.</note>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SystemApplication">
            <summary>
            <img src="../Help/Images/Application16W10.png" alt="Application (small version for the summary)"/>
            Gets an <see cref="T:System.Drawing.Icon"/> instance that contains a large and a small
            Application icon as it is displayed by the current operating system.
            <br/>In Windows Vista and above sizes are depending on current DPI settings, in Windows XP and Linux the icon has always 32x32 and 16x16 image sizes.
            </summary>
            <remarks>
            <para>
            In Windows 8 and Windows 10 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Application32W10.png" alt="Application 32x32"/>
            <img src="../Help/Images/Application16W10.png" alt="Application 16x16"/>
            </para>
            <para>
            In Windows Vista and Windows 7 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Application32.png" alt="Application 32x32"/>
            <img src="../Help/Images/Application16.png" alt="Application 16x16"/>
            </para>
            <para>
            In Windows XP the icon contains the following images:<br/>
            <img src="../Help/Images/ApplicationXP32.png" alt="Application Windows XP 32x32"/>
            <img src="../Help/Images/ApplicationXP16.png" alt="Application Windows XP 16x16"/>
            </para>
            <para>
            On Linux/Mono the icon contains the following images:<br/>
            <img src="../Help/Images/Application32Mono.png" alt="Application Linux/Mono 32x32"/>
            <img src="../Help/Images/Application16Mono.png" alt="Application Linux/Mono 16x16"/>
            <note>In Linux the .NET Core build mistakenly returns the <see cref="P:KGySoft.Drawing.Icons.SystemError"/> icon, which is an issue in the <see cref="T:System.Drawing.SystemIcons"/> implementation of .NET Core.</note>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SystemShield">
            <summary>
            <img src="../Help/Images/Shield16W10.png" alt="Shield (small version for the summary)"/>
            Gets an <see cref="T:System.Drawing.Icon"/> instance that contains the
            Shield icon as it is displayed by the current operating system.
            <br/>In Windows Vista and above sizes are depending on current DPI settings, in Windows XP the icon has always 48x48, 32x32 and 16x16 image sizes in three different color depths
            and in Linux (Mono) the icon contains a 29x32 and a 16x16 image.
            </summary>
            <remarks>
            <para>
            In Windows 8 and Windows 10 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Shield32W10.png" alt="Shield Windows 8/10 32x32"/>
            <img src="../Help/Images/Shield16W10.png" alt="Shield Windows 8/10 16x16"/>
            </para>
            <para>
            In Windows 7 at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/SecurityShield32.png" alt="Shield Windows 7 32x32"/>
            <img src="../Help/Images/SecurityShield16.png" alt="Shield Windows 7 16x16"/>
            </para>
            <para>
            In Windows Vista at 100% DPI settings the icon contains the following images:<br/>
            <img src="../Help/Images/Shield32.png" alt="Shield Windows Vista 32x32"/>
            <img src="../Help/Images/Shield16.png" alt="Shield Windows Vista 16x16"/>
            </para>
            <para>
            In Windows XP the icon contains three different color depth version of the following images:<br/>
            <img src="../Help/Images/ShieldXP48.png" alt="Shield Windows XP 48x48"/>
            <img src="../Help/Images/ShieldXP32.png" alt="Shield Windows XP 32x32"/>
            <img src="../Help/Images/ShieldXP16.png" alt="Shield Windows XP 16x16"/>
            </para>
            <para>
            On Linux/Mono the icon contains the following images:<br/>
            <img src="../Help/Images/Shield32Mono.png" alt="Shield Linux/Mono 29x32"/>
            <img src="../Help/Images/Shield16Mono.png" alt="Shield Linux/Mono 16x16"/>
            <note>In Linux the .NET Core build mistakenly returns the <see cref="P:KGySoft.Drawing.Icons.SystemError"/> icon, which is an issue in the <see cref="T:System.Drawing.SystemIcons"/> implementation of .NET Core.</note>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.Information">
            <summary>
            <img src="../Help/Images/Information16.png" alt="Information (small version for the summary)"/>
            Gets the Information icon displaying a white "i" a blue circle (Sizes: 256x256, 64x64, 48x48, 32x32, 24x24, 20x20, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/Information256.png" alt="Information 256x256"/>
            <img src="../Help/Images/Information64.png" alt="Information 64x64"/>
            <img src="../Help/Images/Information48.png" alt="Information 48x48"/>
            <img src="../Help/Images/Information32.png" alt="Information 32x32"/>
            <img src="../Help/Images/Information24.png" alt="Information 24x24"/>
            <img src="../Help/Images/Information20.png" alt="Information 20x20"/>
            <img src="../Help/Images/Information16.png" alt="Information 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.Warning">
            <summary>
            <img src="../Help/Images/Warning16.png" alt="Warning (small version for the summary)"/>
            Gets the Warning icon displaying a black "!" in a yellow triangle (Sizes: 256x256, 64x64, 48x48, 32x32, 24x24, 20x20, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/Warning256.png" alt="Warning 256x256"/>
            <img src="../Help/Images/Warning64.png" alt="Warning 64x64"/>
            <img src="../Help/Images/Warning48.png" alt="Warning 48x48"/>
            <img src="../Help/Images/Warning32.png" alt="Warning 32x32"/>
            <img src="../Help/Images/Warning24.png" alt="Warning 24x24"/>
            <img src="../Help/Images/Warning20.png" alt="Warning 20x20"/>
            <img src="../Help/Images/Warning16.png" alt="Warning 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.Question">
            <summary>
            <img src="../Help/Images/Question16.png" alt="Question (small version for the summary)"/>
            Gets the Question icon displaying a white "?" in a blue circle (Sizes: 256x256, 64x64, 48x48, 32x32, 24x24, 20x20, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/Question256.png" alt="Question 256x256"/>
            <img src="../Help/Images/Question64.png" alt="Question 64x64"/>
            <img src="../Help/Images/Question48.png" alt="Question 48x48"/>
            <img src="../Help/Images/Question32.png" alt="Question 32x32"/>
            <img src="../Help/Images/Question24.png" alt="Question 24x24"/>
            <img src="../Help/Images/Question20.png" alt="Question 20x20"/>
            <img src="../Help/Images/Question16.png" alt="Question 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.Error">
            <summary>
            <img src="../Help/Images/Error16.png" alt="Error (small version for the summary)"/>
            Gets the Error icon displaying a white "X" in a red circle (Sizes: 256x256, 64x64, 48x48, 32x32, 24x24, 20x20, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/Error256.png" alt="Error 256x256"/>
            <img src="../Help/Images/Error64.png" alt="Error 64x64"/>
            <img src="../Help/Images/Error48.png" alt="Error 48x48"/>
            <img src="../Help/Images/Error32.png" alt="Error 32x32"/>
            <img src="../Help/Images/Error24.png" alt="Error 24x24"/>
            <img src="../Help/Images/Error20.png" alt="Error 20x20"/>
            <img src="../Help/Images/Error16.png" alt="Error 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.Shield">
            <summary>
            <img src="../Help/Images/Shield16.png" alt="Shield (small version for the summary)"/>
            Gets the Windows Shield icon displaying a red-green-blue-yellow shield (Sizes: 256x256, 128x128, 48x48, 32x32, 24x24, 16x16, 8x8)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/Shield256.png" alt="Windows Shield 256x256"/>
            <img src="../Help/Images/Shield128.png" alt="Windows Shield 128x128"/>
            <img src="../Help/Images/Shield48.png" alt="Windows Shield 48x48"/>
            <img src="../Help/Images/Shield32.png" alt="Windows Shield 32x32"/>
            <img src="../Help/Images/Shield24.png" alt="Windows Shield 24x24"/>
            <img src="../Help/Images/Shield16.png" alt="Windows Shield 16x16"/>
            <img src="../Help/Images/Shield8.png" alt="Windows Shield 8x8"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SecurityShield">
            <summary>
            <img src="../Help/Images/SecurityShield16.png" alt="Security Shield (small version for the summary)"/>
            Gets the Security Shield icon displaying a blue-yellow shield (Sizes: 256x256, 128x128, 48x48, 32x32, 24x24, 16x16, 8x8)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/SecurityShield256.png" alt="Security Shield 256x256"/>
            <img src="../Help/Images/SecurityShield128.png" alt="Security Shield 128x128"/>
            <img src="../Help/Images/SecurityShield48.png" alt="Security Shield 48x48"/>
            <img src="../Help/Images/SecurityShield32.png" alt="Security Shield 32x32"/>
            <img src="../Help/Images/SecurityShield24.png" alt="Security Shield 24x24"/>
            <img src="../Help/Images/SecurityShield16.png" alt="Security Shield 16x16"/>
            <img src="../Help/Images/SecurityShield8.png" alt="Security Shield 8x8"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SecuritySuccess">
            <summary>
            <img src="../Help/Images/SecuritySuccess16.png" alt="Security Success (small version for the summary)"/>
            Gets the Security Success icon displaying a green shield with a white check (Sizes: 256x256, 48x48, 32x32, 24x24, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/SecuritySuccess256.png" alt="Security Success 256x256"/>
            <img src="../Help/Images/SecuritySuccess48.png" alt="Security Success 48x48"/>
            <img src="../Help/Images/SecuritySuccess32.png" alt="Security Success 32x32"/>
            <img src="../Help/Images/SecuritySuccess24.png" alt="Security Success 24x24"/>
            <img src="../Help/Images/SecuritySuccess16.png" alt="Security Success 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SecurityWarning">
            <summary>
            <img src="../Help/Images/SecurityWarning16.png" alt="Security Warning (small version for the summary)"/>
            Gets the Security Warning icon displaying a yellow shield with a black "!" (Sizes: 256x256, 48x48, 32x32, 24x24, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/SecurityWarning256.png" alt="Security Warning 256x256"/>
            <img src="../Help/Images/SecurityWarning48.png" alt="Security Warning 48x48"/>
            <img src="../Help/Images/SecurityWarning32.png" alt="Security Warning 32x32"/>
            <img src="../Help/Images/SecurityWarning24.png" alt="Security Warning 24x24"/>
            <img src="../Help/Images/SecurityWarning16.png" alt="Security Warning 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SecurityQuestion">
            <summary>
            <img src="../Help/Images/SecurityQuestion16.png" alt="Security Question (small version for the summary)"/>
            Gets the Security Question icon displaying a blue shield with a white "?" (Sizes: 256x256, 48x48, 32x32, 24x24, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/SecurityQuestion256.png" alt="Security Question 256x256"/>
            <img src="../Help/Images/SecurityQuestion48.png" alt="Security Question 48x48"/>
            <img src="../Help/Images/SecurityQuestion32.png" alt="Security Question 32x32"/>
            <img src="../Help/Images/SecurityQuestion24.png" alt="Security Question 24x24"/>
            <img src="../Help/Images/SecurityQuestion16.png" alt="Security Question 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.SecurityError">
            <summary>
            <img src="../Help/Images/SecurityError16.png" alt="Security Error (small version for the summary)"/>
            Gets the Security Error icon displaying a red shield with a white "X" (Sizes: 256x256, 48x48, 32x32, 24x24, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/SecurityError256.png" alt="Security Error 256x256"/>
            <img src="../Help/Images/SecurityError48.png" alt="Security Error 48x48"/>
            <img src="../Help/Images/SecurityError32.png" alt="Security Error 32x32"/>
            <img src="../Help/Images/SecurityError24.png" alt="Security Error 24x24"/>
            <img src="../Help/Images/SecurityError16.png" alt="Security Error 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Icons.Application">
            <summary>
            <img src="../Help/Images/Application16.png" alt="Application (small version for the summary)"/>
            Gets the Application icon displaying a window (Sizes: 256x256, 64x64, 48x48, 32x32, 24x24, 16x16)
            </summary>
            <remarks>
            <para>
            The icon contains the following images:<br/>
            <img src="../Help/Images/Application256.png" alt="Application 256x256"/>
            <img src="../Help/Images/Application64.png" alt="Application 64x64"/>
            <img src="../Help/Images/Application48.png" alt="Application 48x48"/>
            <img src="../Help/Images/Application32.png" alt="Application 32x32"/>
            <img src="../Help/Images/Application24.png" alt="Application 24x24"/>
            <img src="../Help/Images/Application16.png" alt="Application 16x16"/>
            </para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.GetStockIcon(KGySoft.Drawing.StockIcon)">
            <summary>
            Tries to get a system stock icon. When there is no icon defined for provided <paramref name="id"/>,
            or Windows version is below Vista, this method returns <see langword="null"/>.
            In Windows XP use the predefined property members to retrieve system icons.
            </summary>
            <param name="id">Id of the icon to retrieve. For future compatibility reasons non-defined <see cref="T:KGySoft.Drawing.StockIcon"/> values are also allowed.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance containing a small and large icon when an icon belongs to <paramref name="id"/>, or <see langword="null"/>,
            when no icon found or Windows version is below Vista, or the method is called in a non-Windows environment.</returns>
            <remarks>
            <note>On non-Windows platforms this method always returns <see langword="null"/>.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.FromFile(System.String,KGySoft.Drawing.SystemIconSize)">
            <summary>
            Extracts icons of the specified <paramref name="size"/> from a file and returns them as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="fileName">The name of the file. Can be an executable file, a .dll or icon file.</param>
            <param name="size">The size of the icons to be extracted.</param>
            <returns>The icons of the specified file, or an empty array if the file does not exist or does not contain any icons.</returns>
            <remarks>
            <para>If <paramref name="fileName"/> refers to an icon file use the <see cref="M:System.Drawing.Icon.#ctor(System.String)"/> constructor instead.</para>
            <para>The images of an <see cref="T:System.Drawing.Icon"/> can be extracted by the <see cref="O:KGySoft.Drawing.IconExtensions.ExtractBitmaps">IconExtensions.ExtractBitmaps</see> methods.</para>
            <note>On non-Windows platforms this method always returns an empty array.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.FromFile(System.String)">
            <summary>
            Extracts dual-resolution icons from a file and returns them as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="fileName">The name of the file. Can be an executable file, a .dll or icon file.</param>
            <returns>The icons of the specified file, or an empty array if the file does not exist or does not contain any icons.</returns>
            <remarks>
            <para>If <paramref name="fileName"/> refers to an icon file use the <see cref="M:System.Drawing.Icon.#ctor(System.String)"/> constructor instead.</para>
            <para>The images of an <see cref="T:System.Drawing.Icon"/> can be extracted by the <see cref="O:KGySoft.Drawing.IconExtensions.ExtractBitmaps">IconExtensions.ExtractBitmaps</see> methods.</para>
            <note>On non-Windows platforms this method always returns an empty array.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.FromExtension(System.String,KGySoft.Drawing.SystemIconSize)">
            <summary>
            Gets the system-associated icon of a file or an extension.
            </summary>
            <param name="fileOrExtension">A file name (can be a non-existing one) or an extension (with or without a leading dot character)
            for which the associated icon is about to be retrieved.</param>
            <param name="size">The size of the icon to be retrieved.</param>
            <returns>The system-associated icon of the specified file or extension.</returns>
            <remarks>
            <para>If <paramref name="size"/> is <see cref="F:KGySoft.Drawing.SystemIconSize.Large"/> and <paramref name="fileOrExtension"/> is an existing file, then the result
            is usually the same as for the <see cref="M:System.Drawing.Icon.ExtractAssociatedIcon(System.String)">Icon.ExtractAssociatedIcon</see> method.</para>
            <note>On non-Windows platforms this method always returns the <see cref="P:System.Drawing.SystemIcons.WinLogo">SystemIcons.WinLogo</see> icon.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.FromStream(System.IO.Stream)">
            <summary>
            Loads an <see cref="T:System.Drawing.Icon"/> from the specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to load the icon from.</param>
            <returns>The <see cref="T:System.Drawing.Icon"/> loaded from the <paramref name="stream"/>, or <see langword="null"/>, if <paramref name="stream"/> contains an empty icon header.</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Loads an <see cref="T:System.Drawing.Icon"/> from the specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to load the icon from.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>The <see cref="T:System.Drawing.Icon"/> loaded from the <paramref name="stream"/>, or <see langword="null"/>, if <paramref name="stream"/> contains an empty icon header.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Collections.Generic.IEnumerable{System.Drawing.Icon})">
            <summary>
            Combines the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icons">The icons to be combined.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>
            <para>The elements of <paramref name="icons"/> may contain multiple icons.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Drawing.Icon[])">
            <summary>
            Combines the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icons">The icons to be combined.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>
            <para>The elements of <paramref name="icons"/> may contain multiple icons.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Boolean,System.Drawing.Icon[])">
            <summary>
            Combines the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="icons">The icons to be combined.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>The elements of <paramref name="icons"/> may contain multiple icons.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Boolean,System.Collections.Generic.IEnumerable{System.Drawing.Icon})">
            <summary>
            Combines the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="icons">The icons to be combined.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>The elements of <paramref name="icons"/> may contain multiple icons.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Drawing.Bitmap[])">
            <summary>
            Combines the provided <paramref name="images"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="images">The images to be added to the result icon. Images can be non-squared ones.
            Transparency is determined automatically by image format.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="images"/>.</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <para>The elements of <paramref name="images"/> may contain multiple icons.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Collections.Generic.IEnumerable{System.Drawing.Bitmap})">
            <summary>
            Combines the provided <paramref name="images"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="images">The images to be added to the result icon. Images can be non-squared ones.
            Transparency is determined automatically by image format.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="images"/>.</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <para>The elements of <paramref name="images"/> may contain multiple icons.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Boolean,System.Drawing.Bitmap[])">
            <summary>
            Combines the provided <paramref name="images"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="images">The images to be added to the result icon. Images can be non-squared ones.
            Transparency is determined automatically by image format.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="images"/>.</returns>
            <remarks>
            <para>The elements of <paramref name="images"/> may contain multiple icons.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Boolean,System.Collections.Generic.IEnumerable{System.Drawing.Bitmap})">
            <summary>
            Combines the provided <paramref name="images"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="images">The images to be added to the result icon. Images can be non-squared ones.
            Transparency is determined automatically by image format.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="images"/>.</returns>
            <remarks>
            <para>The elements of <paramref name="images"/> may contain multiple icons.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Drawing.Bitmap[],System.Drawing.Color[])">
            <summary>
            Combines the provided <paramref name="images"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="images">The images to be added to the icon. Images can be non-squares ones.</param>
            <param name="transparentColors">An array of transparent colors of the images. The array must have as many elements as <paramref name="images"/>.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="images"/>.
            </returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <para>The elements of <paramref name="images"/> may contain multiple icons.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.Combine(System.Drawing.Bitmap[],System.Drawing.Color[],System.Boolean)">
            <summary>
            Combines the provided <paramref name="images"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="images">The images to be added to the icon. Images can be non-squares ones.</param>
            <param name="transparentColors">An array of transparent colors of the images. The array must have as many elements as <paramref name="images"/>.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="images"/>.
            </returns>
            <remarks>
            <para>The elements of <paramref name="images"/> may contain multiple icons.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Icons.ToCombinedIcon(System.Drawing.Icon)">
            <summary>
            Gets a multi size version of a system icon provided in <paramref name="icon"/> by generating the small version internally.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Palette">
            <summary>
            Represents an indexed set of colors and provides efficient color lookup with caching.
            To create an instance use the static methods or the constructors.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class can be used to perform quick lookup operations (see <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>
            and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> methods) to find the closest matching palette entry to any color.</para>
            <para>By default the lookup is performed by a slightly modified euclidean-like search but if the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> contains grayscale entries only,
            then it is optimized for finding the best matching gray shade based on human perception. To override this logic a custom lookup routine can be passed to the constructors.</para>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance is created without a custom lookup logic, then the search results for non-palette-entry colors are cached.
            The cache is optimized for parallel processing. The theoretical maximum of cache size (apart from the actual palette entries) is 2 x 2<sup>18</sup> but
            as soon as that limit is reached the amount of stored elements are halved so the cache is somewhat optimized to store the most recently processed colors.</para>
            <para>In order to prevent caching you can pass a custom lookup logic to the constructors. It is expected to be fast (applying some direct mapping to a palette index,
            for example), or that it uses some custom caching (which should perform well also when queried concurrently).</para>
            <para>The palette can have any number of colors but as the typical usage is quantizing colors for indexed bitmaps the typical maximum palette size
            is 256. Generally, the more color the palette has the slower are the lookups for non-palette colors that are not cached yet.</para>
            </remarks>
            <threadsafety instance="false">If there is no custom lookup logic passed to the constructors, then members of this type are guaranteed to be safe for multi-threaded operations.
            If this type is initialized with a custom lookup logic, then thread-safety depends on the custom lookup implementation.</threadsafety>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.Count">
            <summary>
            Gets the number of color entries in the current <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.BackColor">
            <summary>
            Gets the background color. If a lookup operation (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>)
            is performed with a color whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/>, and there is no exact match among the entries of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/>,
            then the color will be blended with this color before performing the lookup.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> has a transparent entry, then gets a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field,
            under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>) in the palette.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.Palette.Item(System.Int32)">
            <summary>
            Gets the color entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the color entry to be retrieved.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance representing the color entry of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> must be equal to or greater than zero and less <see cref="P:KGySoft.Drawing.Imaging.Palette.Count"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(KGySoft.Drawing.Imaging.Color32[],KGySoft.Drawing.Imaging.Color32,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/> by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            If specified, it must be thread-safe and it is expected to be fast. The results returned by the specified delegate are not cached. If <see langword="null"/>,
            then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> will perform a sequential lookup by using a default logic and results will be cached. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> must not be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> must not be empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.#ctor(System.Drawing.Color[],System.Drawing.Color,System.Byte,System.Func{KGySoft.Drawing.Imaging.Color32,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.
            <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class for details.
            </summary>
            <param name="entries">The color entries to be stored by this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance. They will be converted to <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instances internally.</param>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the <paramref name="entries"/>,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If there is at least one completely transparent color among <paramref name="entries"/>,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="customGetNearestColorIndex">A delegate specifying an optional custom lookup logic to obtain an index from <paramref name="entries"/> by a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            If specified, it must be thread-safe and it is expected to be fast. The results returned by the specified delegate are not cached. If <see langword="null"/>,
            then <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> will perform a sequential lookup by using a default logic and results will be cached. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> must not be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/> must not be empty.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault8BppPalette(KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 8-bit palette.
            On Windows this palette contains the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>,
            the "web-safe" palette of 216 colors as well as 24 transparent entries.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.SystemDefault8BppPalette</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color, whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is equal to or greater than <paramref name="alphaThreshold"/>, and there is no exact match among the palette entries,
            then the color to be found will be blended with this color before performing the lookup. The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which lookup operations will return the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>)
            or the index of the first transparent color (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>). This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 8-bit palette.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault4BppPalette(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 4-bit palette.
            On Windows this palette consists of the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">PredefinedColorsQuantizer.SystemDefault4BppPalette</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 4-bit palette.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.SystemDefault1BppPalette(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 1-bit palette.
            On Windows this palette consists of the black and white colors.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)">PredefinedColorsQuantizer.SystemDefault1BppPalette</see> method for details.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the system default 1-bit palette.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Rgb332(KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit palette where red, green and blue components are encoded in 3, 3 and 2 bits, respectively.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Rgb332</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/>&#160;to map any color directly to an index instead of searching for a nearest color,
            which is very fast but without dithering may end up in a noticeably poorer result and higher contrast;
            <see langword="false"/>&#160;to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit palette where red, green and blue components are encoded in 3, 3 and 2 bits, respectively.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale256(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit grayscale palette of 256 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 8-bit grayscale palette of 256 shades.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale16(KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 4-bit grayscale palette of 16 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Grayscale16</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/>&#160;to map any color directly to an index instead of searching for a nearest color,
            which is very fast but may end up in a result of a bit higher contrast than the original image;
            <see langword="false"/>&#160;to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a 4-bit grayscale palette of 16 shades.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.Grayscale4(KGySoft.Drawing.Imaging.Color32,System.Boolean)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a grayscale palette of 4 shades.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">PredefinedColorsQuantizer.Grayscale4</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="directMapping"><see langword="true"/>&#160;to map any color directly to an index instead of searching for a nearest color,
            which is very fast but may end up in a result of a bit higher contrast than the original image;
            <see langword="false"/>&#160;to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses a grayscale palette of 4 shades.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.BlackAndWhite(KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the black and white colors.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.BlackAndWhite</see> method for details and some examples.
            </summary>
            <param name="backColor">Specifies the background color for lookup operations (<see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see>, <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see>).
            When a lookup is performed with a color with transparency, then the color to be found will be blended with this color before performing the lookup.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="whiteThreshold">Specifies a threshold value for the brightness of the colors, under which the result of a color lookup is considered black.
            If 0, then all colors are mapped to white. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance that uses the black and white colors.</returns>
            <seealso cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetColor(System.Int32)">
            <summary>
            Gets the color entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the color entry to be retrieved.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance representing the color entry of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> must be equal to or greater than zero and less <see cref="P:KGySoft.Drawing.Imaging.Palette.Count"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets the index of a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entry that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="c">The color for which the nearest palette entry index should be returned.</param>
            <returns>The index of a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entry that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
            <remarks>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> does not contain the specified color, then the result may depend on the arguments passed to the constructor.</para>
            <para>If <paramref name="c"/> has transparency, then the result may depend on <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/> values.</para>
            <para>The result can be customized by passing a non-<see langword="null"/>&#160;delegate to one of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> constructors.</para>
            <note>For more details see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="c">The color for which the nearest palette entry should be returned.</param>
            <returns>The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entry of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> that is the nearest color to the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
            <remarks>
            <para>If the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> does not contain the specified color, then the result may depend on the arguments passed to the constructor.</para>
            <para>If <paramref name="c"/> has transparency, then the result may depend on <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold"/> values.</para>
            <para>The result can be customized by passing a non-<see langword="null"/>&#160;delegate to one of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> constructors.</para>
            <note>For more details see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class.</note>
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">The <see cref="T:KGySoft.Drawing.Imaging.Palette"/> class was initialized by a custom lookup delegate, which returned an invalid index.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Palette.GetEntries">
            <summary>
            Gets a read-only wrapper of the entries of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance.
            </summary>
            <returns>The entries of this <see cref="T:KGySoft.Drawing.Imaging.Palette"/>.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataFactory">
            <summary>
            Provides factory methods to create <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instances.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Creates a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with the specified <paramref name="size"/> and <paramref name="pixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> or <paramref name="pixelFormat"/> has an invalid value.</exception>
            <param name="size">The size of the bitmap data to create.</param>
            <param name="pixelFormat">The desired pixel format of the bitmap data to create.</param>
            <param name="backColor">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance. It does not affect the actual returned bitmap content.
            See the <strong>Remarks</strong> section for details. The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">For pixel formats without alpha gradient support specifies the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> value of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            See the <strong>Remarks</strong> section for details. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with the specified <paramref name="size"/> and <paramref name="pixelFormat"/>.</returns>
            <remarks>
            <para>All possible <see cref="T:System.Drawing.Imaging.PixelFormat"/>s are supported, regardless of the native <see cref="T:System.Drawing.Bitmap"/> support of the current operating system.
            <note>When <paramref name="pixelFormat"/> specifies a wide-color format (48/64 bit or 16 bit grayscale), then the returned instance will use the full 16-bit range of the color channels.
            This means a different raw content to Windows' wide-color <see cref="T:System.Drawing.Bitmap"/> instances, which use 13-bit channels. But this difference is transparent in most cases
            unless we access actual raw content by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> and <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods.</note></para>
            <para>The <paramref name="backColor"/> parameter has no effect if <paramref name="pixelFormat"/> has alpha gradient support and it does not affect the actual content of the returned instance.
            To set all pixels to a color use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">Clear</see> extension method.</para>
            <para>If <paramref name="alphaThreshold"/> is zero, then setting a fully transparent pixel in a bitmap data with indexed or single-bit-alpha pixel format
            will blend the pixel to set with <paramref name="backColor"/> even if the bitmap data can handle transparent pixels.</para>
            <para>If <paramref name="alphaThreshold"/> is <c>1</c>, then the result color of setting a pixel of a bitmap data with indexed or single-bit-alpha pixel format
            will be transparent only if the color to set is completely transparent (has zero alpha).</para>
            <para>If <paramref name="alphaThreshold"/> is <c>255</c>, then the result color of setting a pixel of a bitmap data with indexed or single-bit-alpha pixel format
            will be opaque only if the color to set is completely opaque (its alpha value is <c>255</c>).</para>
            <para>For <see cref="T:System.Drawing.Imaging.PixelFormat"/>s without any alpha support the specified <paramref name="alphaThreshold"/> is used only to determine the source pixels to skip
            when another bitmap data is drawn into the returned instance.</para>
            <para>If a pixel of a bitmap data without alpha gradient support is set by the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>/<see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">IWritableBitmapDataRow.SetColor</see>
            methods or by the <see cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow.Item(System.Int32)">IReadWriteBitmapDataRow indexer</see>, and the pixel has an alpha value that is greater than <paramref name="alphaThreshold"/>,
            then the pixel to set will be blended with <paramref name="backColor"/>.</para>
            <note type="tip">
            <list type="bullet">
            <item>If <paramref name="pixelFormat"/> represents an indexed format you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload to specify the desired palette of the result.</item>
            <item>You can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToBitmap</see> extension method to convert the created <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to a <see cref="T:System.Drawing.Bitmap"/> instance.</item>
            <item>To create an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from a native <see cref="T:System.Drawing.Bitmap"/> use the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> extension method.</item>
            </list></note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Creates a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="palette"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> or <paramref name="pixelFormat"/> has an invalid value.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the indexed format specified by <paramref name="pixelFormat"/>.</exception>
            <param name="size">The size of the bitmap data to create.</param>
            <param name="pixelFormat">The desired pixel format of the bitmap data to create.</param>
            <param name="palette">If <paramref name="pixelFormat"/> specifies an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.</param>
            <returns>A managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with the specified <paramref name="size"/>, <paramref name="pixelFormat"/> and <paramref name="palette"/>.</returns>
            <remarks>
            <para>All possible <see cref="T:System.Drawing.Imaging.PixelFormat"/>s are supported, regardless of the native <see cref="T:System.Drawing.Bitmap"/> support of the current operating system.
            <note>When <paramref name="pixelFormat"/> specifies a wide-color format (48/64 bit or 16 bit grayscale), then the returned instance will use the full 16-bit range of the color channels.
            This means a different raw content to Windows' wide-color <see cref="T:System.Drawing.Bitmap"/> instances, which use 13-bit channels. But this difference is transparent in most cases
            unless we access actual raw content by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> and <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods.</note></para>
            <para>If <paramref name="palette"/> is not specified, then a default palette will be used for indexed formats, and a default <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/>
            value will be used.</para>
            <para><paramref name="palette"/> is ignored if <paramref name="pixelFormat"/> specifies a non-indexed format.</para>
            <note type="tip">
            <list type="bullet">
            <item>You can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToBitmap</see> extension method to convert the created <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to a <see cref="T:System.Drawing.Bitmap"/> instance.</item>
            <item>To create an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from a native <see cref="T:System.Drawing.Bitmap"/> use the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> extension method.</item>
            </list></note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.Load(System.IO.Stream)">
            <summary>
            Loads a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from the specified <paramref name="stream"/> that was saved by
            the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">BitmapDataExtensions.Save</see> method.
            </summary>
            <param name="stream">The stream to load the bitmap data from.</param>
            <returns>A managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance loaded from the specified <paramref name="stream"/>.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.BeginLoad(System.IO.Stream,KGySoft.Drawing.AsyncConfig)">BeginLoad</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.LoadAsync(System.IO.Stream,KGySoft.Drawing.TaskConfig)">LoadAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.BeginLoad(System.IO.Stream,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to load a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from the specified <paramref name="stream"/> asynchronously that was saved by
            the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">BitmapDataExtensions.Save</see> method.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="stream">The stream to load the bitmap data from.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.LoadAsync(System.IO.Stream,KGySoft.Drawing.TaskConfig)">LoadAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.EndLoad(System.IAsyncResult)">EndLoad</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.EndLoad(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.BeginLoad(System.IO.Stream,KGySoft.Drawing.AsyncConfig)">BeginLoad</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.LoadAsync(System.IO.Stream,KGySoft.Drawing.TaskConfig)">LoadAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.LoadAsync(System.IO.Stream,KGySoft.Drawing.TaskConfig)">
            <summary>
            Loads a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance from the specified <paramref name="stream"/> asynchronously that was saved by
            the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">BitmapDataExtensions.Save</see> method.
            </summary>
            <param name="stream">The stream to load the bitmap data from.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.
            its result can be <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Bitmap,System.Drawing.Imaging.ImageLockMode,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Creates a native <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/> from a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Bitmap,System.Drawing.Imaging.ImageLockMode,KGySoft.Drawing.Imaging.IQuantizingSession)">
            <summary>
            Creates a native <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/> by a quantizer session re-using its palette if possible.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateManagedBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Creates a managed <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/> with the specified <paramref name="size"/> and <paramref name="pixelFormat"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateManagedBitmapData``1(KGySoft.Collections.Array2D{``0},System.Int32,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates a managed <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/> for a preallocated 1D array (wrapped into an <see cref="T:KGySoft.Collections.Array2D`1"/> struct).
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateManagedBitmapData``1(``0[0:,0:],System.Int32,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.Imaging.Palette,System.Func{KGySoft.Drawing.Imaging.Palette,System.Boolean},System.Action)">
            <summary>
            Creates a managed <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/> for a preallocated 2D array.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataWrapper">
            <summary>
            Provides a wrapper for custom <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> implementations that do not implement <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataInternal"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.SolidBitmapData">
            <summary>
            Represents a read-only bitmap data of a single color.
            As a public instance should be exposed as an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedBitmapData`2">
            <summary>
            Represents a self-allocating managed bitmap data
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ManagedBitmapData1DArrayBase`1.Buffer">
            <summary>
            The pixel buffer where the underlying array is a single dimensional one.
            It is a field rather than a property so possible Dispose from a self-allocating derived classes allows mutating it.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedBitmapDataWrapper`2">
            <summary>
            Represents a managed bitmap data wrapper for a 1D array (wrapped into an <see cref="T:KGySoft.Collections.Array2D`1"/>).
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedBitmapDataWrapper2D`2">
            <summary>
            Represents a managed bitmap data wrapper for a 2D array
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedCustomBitmapData`1">
            <summary>
            Represents a managed bitmap data wrapper with custom pixel format for a 1D array (wrapped into an <see cref="T:KGySoft.Collections.Array2D`1"/>).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ManagedCustomBitmapData`1.lastRow">
            <summary>
            The cached lastly accessed row. Though may be accessed from multiple threads it is intentionally not volatile
            so it has a bit higher chance that every thread sees the last value was set by itself and no recreation is needed.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ManagedCustomBitmapData2D`1">
            <summary>
            Represents a managed bitmap data wrapper with custom pixel format for an actual 2D array.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ManagedCustomBitmapData2D`1.lastRow">
            <summary>
            The cached lastly accessed row. Though may be accessed from multiple threads it is intentionally not volatile
            so it has a bit higher chance that every thread sees the last value was set by itself and no recreation is needed.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ManagedCustomBitmapDataIndexed`1.lastRow">
            <summary>
            The cached lastly accessed row. Though may be accessed from multiple threads it is intentionally not volatile
            so it has a bit higher chance that every thread sees the last value was set by itself and no recreation is needed.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.ManagedCustomBitmapDataIndexed2D`1.lastRow">
            <summary>
            The cached lastly accessed row. Though may be accessed from multiple threads it is intentionally not volatile
            so it has a bit higher chance that every thread sees the last value was set by itself and no recreation is needed.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.UnmanagedBitmapData`1.lastRow">
            <summary>
            The cached lastly accessed row. Though may be accessed from multiple threads it is intentionally not volatile
            so it has a bit higher chance that every thread sees the last value was set by itself and no recreation is needed.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.UnmanagedCustomBitmapData.lastRow">
            <summary>
            The cached lastly accessed row. Though may be accessed from multiple threads it is intentionally not volatile
            so it has a bit higher chance that every thread sees the last value was set by itself and no recreation is needed.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.UnmanagedCustomBitmapDataIndexed.lastRow">
            <summary>
            The cached lastly accessed row. Though may be accessed from multiple threads it is intentionally not volatile
            so it has a bit higher chance that every thread sees the last value was set by itself and no recreation is needed.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for error diffusion dithering.
            Use the static properties of this class to use predefined error diffusion filters or the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.#ctor(System.Byte[0:,0:],System.Int32,System.Int32,System.Boolean,System.Nullable{System.Boolean})">constructor</see> to create a custom one.
            <br/>See the <strong>Remarks</strong> section for details and some image examples.
            </summary>
            <remarks>
            <para>The <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.#ctor(System.Byte[0:,0:],System.Int32,System.Int32,System.Boolean,System.Nullable{System.Boolean})">constructor</see> can be used to create an error diffusion ditherer using a custom matrix.</para>
            <para>Use the static properties to obtain an instance with predefined parameters.</para>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class uses an adaptive dithering technique, which disperses the quantization error of each pixels to the neighboring ones.
            Thereby the strength of the dithering is automatically adjusted by the algorithm itself, which provides good results also for palettes with uneven color distribution
            (which is not the case for <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer">ordered dithering</see>, for example).</para>
            <para>As the dithered result of a pixel depends on the already processed pixels, the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> does not support parallel processing, which makes
            it slower than most of the other dithering methods.</para>
            <para>The following table demonstrates the effect of the dithering:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredS3.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra 3 dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">Sierra 3</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSA.gif" alt="Color hues with system default 8 BPP palette, using silver background and Stevenson-Arce dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.StevensonArce">Stevenson-Arce</see> dithering</para></div></term>
            </item>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredFS.gif" alt="Grayscale color shades with black and white palette, using Floyd-Steinberg dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredS3.gif" alt="Grayscale color shades with black and white palette using Sierra 3 dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">Sierra 3</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredSA.gif" alt="Grayscale color shades with black and white palette using Stevenson-Arce dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.StevensonArce">Stevenson-Arce</see> dithering</para></div></term>
            </item>
            </list></para>
            <para>Calculation of the quantization error may happen in two ways. The publicly available algorithms usually calculate the error for each color channels,
            which usually provides good results with color palettes. However, when quantizing color images with a black and white or grayscale palette,
            this approach may fail. For example, if the quantizer returns black for a fully saturated blue pixel, the quantization error is zero on the red and green channels and
            100% on the blue channel. The problem is that this error cannot be propagated to the neighboring pixels if they have the same color because adding any more blue
            to already fully saturated blue pixels will not change anything. Therefore, the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> can propagate quantization error
            by brightness based on human perception, which is more appropriate for palettes with grayscale colors.
            The <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> tries to auto detect the strategy for each dithering session but this can be overridden by
            the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureErrorDiffusionMode(System.Nullable{System.Boolean})">ConfigureErrorDiffusionMode</see> method.</para>
            <para>The following table demonstrates the effect of different strategies:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by RGB channels (the default strategy for non-grayscale palettes)</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFSByBr.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by brightness"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by brightness</para></div></term>
            </item>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/ColorWheel.png" alt="Color wheel"/>
            <br/>Color wheel</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByBr.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by brightness (the default strategy for grayscale palettes)"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by brightness (the default strategy for grayscale palettes). All colors appear in the result with different patterns.</para>
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByRgb.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by RGB channels. The fully saturated colors turned completely black or white.</para></div></term>
            </item>
            </list></para>
            <para>A typical artifact of error diffusion dithering is a ripple effect, which often appears in homogeneous areas of the dithered image. This is due to the fact that most filters propagate quantization errors mostly to right and down,
            whereas pixels are processed left-to-right in each line while lines are scanned top-down (raster processing). The ripple effect can be reduced if every second line is processed in the opposite direction (serpentine processing).
            You can use the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureProcessingDirection(System.Boolean)">ConfigureProcessingDirection</see> method to obtain an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> with serpentine processing mode,
            which processes even lines left-to-right and odd lines right-to-left.</para>
            <para>The following table demonstrates the effect of different processing directions:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
            <br/>Original test image "Cameraman"</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/CameramanBWDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with raster processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using raster processing. The ripple effect is clearly visible on the coat.</para>
            <para><img src="../Help/Images/CameramanBWDitheredFSSerpentine.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with serpentine processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using serpentine processing. The ripple effect is gone.</para></div></term>
            </item>
            </list></para>
            <note type="tip">See the <strong>Examples</strong> section of the static properties for more examples.</note>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the original filter proposed by Floyd and Steinberg in 1975 when they came out with the idea of error diffusion dithering.
             Uses a small, 3x2 matrix so the processing is somewhat faster than by the other alternatives.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredFloydSteinberg(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.FloydSteinberg;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, using silver background and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredFS.gif" alt="Grayscale color shades with black and white palette using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldDefault8bppSilverA1DitheredFS.gif" alt="Shield icon with system default 8 BPP palette using silver background, alpha threshold = 1 and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para>
             <para><img src="../Help/Images/ShieldBWSilverDitheredFS.gif" alt="Shield icon with black and white palette, silver background, using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
             <br/>Original test image "Cameraman"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Cameraman2bppDirectDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">grayscale 4 color palette</see></para>
             <para><img src="../Help/Images/CameramanBWDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette using Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Lena.png" alt="Test image &quot;Lena&quot;"/>
             <br/>Original test image "Lena"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/LenaRgb332DMFloydSteinberg.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)">RGB 332 palette</see></para>
             <para><img src="../Help/Images/LenaRgb111DitheredFS.gif" alt="Test image &quot;Lena&quot; with RGB111 palette and Floyd-Steinberg dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">custom 8-color palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.JarvisJudiceNinke">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter proposed by Jarvis, Judice and Ninke in 1976.
             Uses a 5x3 matrix so the processing is slower than by the original <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> filter but distributes errors in a wider range.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredJarvisJudiceNinke(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.JarvisJudiceNinke;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredJJN.gif" alt="Color hues with system default 8 BPP palette, using silver background and Jarvis-Judice-Ninke dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredJJN.gif" alt="Grayscale color shades with black and white palette using Jarvis-Judice-Ninke dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Stucki">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter proposed by P. Stucki in 1981.
             Uses a 5x3 matrix so the processing is slower than by the original <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> filter but distributes errors in a wider range.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredStucki(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Stucki;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSt.gif" alt="Color hues with system default 8 BPP palette, using silver background and Stucki dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredSt.gif" alt="Grayscale color shades with black and white palette using Stucki dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Burkes">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter proposed by D. Burkes in 1988.
             Uses a 5x2 matrix, which is actually the same as the first two lines of the matrix used by the <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Stucki"/> filter.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredBurkes(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Burkes;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredBrk.gif" alt="Color hues with system default 8 BPP palette, using silver background and Burkes dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredBrk.gif" alt="Grayscale color shades with black and white palette using Burkes dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the three-line filter proposed by Frankie Sierra in 1989.
             Uses a 5x3 matrix so this is the slowest Sierra filter but this disperses errors to the furthest among them.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredSierra3(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Sierra3;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredS3.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra 3 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredS3.gif" alt="Grayscale color shades with black and white palette using Sierra 3 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra2">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the two-line filter proposed by Frankie Sierra in 1990.
             Uses a 5x2 matrix so this somewhat faster than the <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Sierra3">three-line version</see> and still provides a similar quality.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredSierra2(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Sierra2;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredS2.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra 2 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredS2.gif" alt="Grayscale color shades with black and white palette using Sierra 2 dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.SierraLite">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using a small two-line filter proposed by Frankie Sierra.
             Uses a 3x2 matrix so it has the same performance as the <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> algorithm and also produces a quite similar result.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredSierraLite(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.SierraLite;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSL.gif" alt="Color hues with system default 8 BPP palette, using silver background and Sierra Lite dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredSL.gif" alt="Grayscale color shades with black and white palette using Sierra Lite dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.StevensonArce">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the hexagonal filter proposed by Stevenson and Arce in 1985.
             Uses a fairly large, 7x4 matrix, but due to the hexagonal arrangement of the coefficients the processing performance is comparable to a rectangular 5x3 matrix.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredStevensonArce(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.StevensonArce;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredSA.gif" alt="Color hues with system default 8 BPP palette, using silver background and Stevenson-Arce dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredSA.gif" alt="Grayscale color shades with black and white palette using Stevenson-Arce dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.Atkinson">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance using the filter used by the Apple programmer Bill Atkinson.
             Uses a 4x3 matrix of only 6 effective values, and propagates only the 75% of the quantization error, which may cause
             total loss of details of light and dark areas (result may seem under- or overexposed) whereas midtones have higher contrast
             and preserve details better.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredAtkinson(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = ErrorDiffusionDitherer.Atkinson;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredAtk.gif" alt="Color hues with system default 8 BPP palette, using silver background and Atkinson dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredAtk.gif" alt="Grayscale color shades with black and white palette using Atkinson dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.#ctor(System.Byte[0:,0:],System.Int32,System.Int32,System.Boolean,System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer" /> class using the specified <paramref name="matrix"/>, <paramref name="divisor"/> and <paramref name="matrixFirstPixelIndex"/>.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <param name="matrix">A matrix to be used as the coefficients for the quantization errors to be propagated to the neighboring pixels.</param>
             <param name="divisor">Each elements in the <paramref name="matrix"/> will be divided by this value. If less than the sum of the elements
             in the <paramref name="matrix"/>, then only a fraction of the error will be propagated.</param>
             <param name="matrixFirstPixelIndex">Specifies the first effective index in the first row of the matrix. If larger than zero, then the error will be propagated also to the bottom-left direction.
             Must be between 0 and <paramref name="matrix"/> width, excluding upper bound.</param>
             <param name="serpentineProcessing"><see langword="true"/>&#160;to process odd lines right-to-left and even lines left-to-right;
             <see langword="false"/>&#160;to process all lines left-to-right.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureProcessingDirection(System.Boolean)">ConfigureProcessingDirection</see> method for details. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <param name="byBrightness"><see langword="true"/>&#160;to apply the same quantization error on every color channel determined by brightness difference;
             <see langword="false"/>&#160;to handle quantization errors on each color channels independently; <see langword="null"/>&#160;to auto select strategy.
             Deciding by brightness can produce a better result when fully saturated colors are mapped to a grayscale palette.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureErrorDiffusionMode(System.Nullable{System.Boolean})">ConfigureErrorDiffusionMode</see> method for details. This parameter is optional.
             <br/>Default value: <see langword="null"/>.</param>
             <example>
             The following example demonstrates how to use a custom ditherer using the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> constructor:
             <code lang="C#"><![CDATA[
             public static Bitmap ToCustomDithered(Bitmap source, IQuantizer quantizer)
             {
                 // This is actually the Fan dithering (by Zhihang Fan), and uses the same coefficients
                 // as the Floyd-Steinberg dithering in a slightly different arrangement:
                 byte[,] matrix =
                 {
                     { 0, 0, 0, 7 },
                     { 1, 3, 5, 0 },
                 };
            
                 // The matrix values will be divided by this value to determine the portion
                 // of the quantization error to propagate to neighboring pixels:
                 int divisor = 16;
            
                 // The current pixel to be processed is always one pixel left from this index.
                 // This also means that if larger than 1, then some error is propagated also towards the
                 // (bottom-)left direction. For the matrix above value "3" means that whenever a pixel is
                 // processed, 7/16 of the error is propagated to the right, 1/16 and 3/16 to the
                 // bottom-left direction and 5/16 one pixel down from the current pixel.
                 int firstPixelIndex = 3;
            
                 IDitherer ditherer = new ErrorDiffusionDitherer(matrix, divisor, firstPixelIndex);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFan.gif" alt="Color hues with system default 8 BPP palette, using silver background and Fan dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredFan.gif" alt="Grayscale color shades with black and white palette using Fan dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip"><list type="bullet">
             <item>Use the static properties to perform dithering with predefined filters.</item>
             <item>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> class for more details and image examples.</item>
             </list></note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureErrorDiffusionMode(System.Nullable{System.Boolean})">
            <summary>
            Gets a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified error diffusion mode.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="byBrightness"><see langword="true"/>&#160;to apply the same quantization error on every color channel determined by brightness difference;
            <see langword="false"/>&#160;to handle quantization errors on each color channels independently; <see langword="null"/>&#160;to auto select strategy.
            Deciding by brightness can produce a better result when fully saturated colors are mapped to a grayscale palette.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified error diffusion mode.</returns>
            <remarks>
            <note>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance instead of changing the error diffusion mode of the original one.
            This is required for the static properties so they can return a cached instance.</note>
            <para>Calculation of the quantization error may happen in two ways. The publicly available algorithms usually calculate the error for each color channels,
            which usually provides good results with color palettes. However, when quantizing color images with a black and white or grayscale palette,
            this approach may fail. For example, if the quantizer returns black for a fully saturated blue pixel, the quantization error is zero on the red and green channels and
            100% on the blue channel. The problem is that this error cannot be propagated to the neighboring pixels if they have the same color because adding any more blue
            to already fully saturated blue pixels will not change anything. Therefore, the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> can propagate quantization error
            by brightness based on human perception, which is more appropriate for palettes with grayscale colors.</para>
            <para>The following table demonstrates the effect of different strategies:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFS.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by RGB channels (the default strategy for non-grayscale palettes)</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredFSByBr.gif" alt="Color hues with system default 8 BPP palette, silver background and Floyd-Steinberg dithering, using error diffusion by brightness"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using error diffusion by brightness</para></div></term>
            </item>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/ColorWheel.png" alt="Color wheel"/>
            <br/>Color wheel</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByBr.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by brightness (the default strategy for grayscale palettes)"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by brightness (the default strategy for grayscale palettes). All colors appear in the result with different patterns.</para>
            <para><img src="../Help/Images/ColorWheelBWBlueDitheredFSByRgb.gif" alt="Color wheel with black and white palette, blue background and Floyd-Steinberg dithering, using error diffusion by RGB channels"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using blue background and error diffusion by RGB channels. The fully saturated colors turned completely black or white.</para></div></term>
            </item>
            </list></para>
            </remarks>
            <example>
            The following example demonstrates how to specify the error diffusion mode for a predefined filter:
            <code lang="C#"><![CDATA[
            // getting a predefined ditherer that disperses quantization error by brightness:
            IDitherer ditherer = ErrorDiffusionDitherer.FloydSteinberg.ConfigureErrorDiffusionMode(byBrightness: true);
            ]]></code>
            </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.ConfigureProcessingDirection(System.Boolean)">
            <summary>
            Gets a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified processing direction.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="serpentine"><see langword="true"/>&#160;to process odd lines right-to-left and even lines left-to-right;
            <see langword="false"/>&#160;to process all lines left-to-right.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance that has the specified processing direction.</returns>
            <remarks>
            <note>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/> instance instead of changing the processing direction of the original one.
            This is required for the static properties so they can return a cached instance.</note>
            <para>A typical artifact of error diffusion dithering is a ripple effect, which often appears in homogeneous areas of the dithered image. This is due to the fact that most filters propagate quantization errors mostly to right and down,
            whereas pixels are processed left-to-right in each line while lines are scanned top-down (raster processing). The ripple effect can be reduced if every second line is processed in the opposite direction (serpentine processing).</para>
            <para>The following table demonstrates the effect of different processing directions:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
            <br/>Original test image "Cameraman"</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/CameramanBWDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with raster processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using raster processing. The ripple effect is clearly visible on the coat.</para>
            <para><img src="../Help/Images/CameramanBWDitheredFSSerpentine.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering with serpentine processing"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering, using serpentine processing. The ripple effect is gone.</para></div></term>
            </item>
            </list></para>
            </remarks>
            <example>
            The following example demonstrates how to specify the processing direction for a predefined filter:
            <code lang="C#"><![CDATA[
            // getting a predefined ditherer with serpentine processing:
            IDitherer ditherer = ErrorDiffusionDitherer.FloydSteinberg.ConfigureProcessingDirection(serpentine: true);
            ]]></code>
            </example>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for applying an interleaved gradient noise pattern to the dithered result. For other noise-like
            ditherers see the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">OrderedDitherer.BlueNoise</see> property and the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class.
            <br/>See the <strong>Remarks</strong> section for details and some examples.
            </summary>
            <remarks>
            <note>The noise generated by the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> is not random but based on a formula so using the
            same source image, quantizer and strength produces always the same result (similarly to the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise"/> ditherer,
            which is based on <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer">ordered dithering</see>).
            To dither images with real random noise use the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>, which applies white noise to the quantized source.</note>
            <para>The following table demonstrates the effect of the dithering:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredIGN.gif" alt="Color hues with system default 8 BPP palette, using silver background and interleaved gradient noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and interleaved gradient noise dithering</para></div></term>
            </item>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredIGN.gif" alt="Grayscale color shades with black and white palette using interleaved gradient noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and interleaved gradient noise dithering</para></div></term>
            </item>
            </list></para>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer" />
        </member>
        <member name="M:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer.#ctor(System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
             Specify 0 to use an auto value for each dithering session based on the used quantizer.
             <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and some examples regarding dithering strength.
             The same applies also for the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <example>
             The following example demonstrates how to use the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredInterleavedGradientNoise(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = new InterleavedGradientNoiseDitherer();
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredIGN.gif" alt="Color hues with system default 8 BPP palette, using silver background and interleaved gradient noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredIGN.gif" alt="Grayscale color shades with black and white palette using interleaved gradient noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.OrderedDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for dithering patterns that are based on an ordered matrix.
            Use the static properties of this class to use predefined patterns or the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">constructor</see> to create a custom ordered ditherer.
            <br/>See the <strong>Remarks</strong> section for details and some image examples.
            </summary>
            <remarks>
            <para>The <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">constructor</see> can be used to create an ordered ditherer using a custom matrix.</para>
            <para>Use the static properties to obtain an instance with a predefined pattern. For the best results use the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer8x8</see>
            or <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">BlueNoise</see> properties. Or you can use the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">DottedHalftone</see> property for artistic results.</para>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class offers a very fast dithering technique based on an ordered pattern specified in a matrix of bytes.
            The more different values the matrix has the more number of different patterns can be mapped to the shades of the original pixels.
            While quantizing lighter and lighter colors, the different patterns appear in the order of the values in the specified matrix.</para>
            <para>The following table demonstrates the effect of the dithering:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB8.gif" alt="Color hues with system default 8 BPP palette, silver background and Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredBN.gif" alt="Color hues with system default 8 BPP palette, using silver background and blue noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">blue noise</see> dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredDH.gif" alt="Color hues with system default 8 BPP palette, using silver background and rectangular 7x7 dotted halftone pattern dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">dotted halftone pattern</see> dithering</para></div></term>
            </item>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with black and white palette, using Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredBN.gif" alt="Grayscale color shades with black and white palette using blue noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">blue noise</see> dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredDH.gif" alt="Grayscale color shades with black and white palette using rectangular 7x7 dotted halftone pattern dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">dotted halftone pattern</see> dithering</para></div></term>
            </item>
            </list></para>
            <para>Unlike in case of the <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, ordered dithering does not adjust strength to the quantization error of a pixel
            but simply uses the specified matrix values based on pixel coordinates to determine the quantized result.
            Therefore, a strength can be specified (see the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">constructor</see> and the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">ConfigureStrength</see> method),
            whose ideal value depends on the colors that a quantizer can return. If the strength is too low, then banding may appear in the result in place of gradients in the original image;
            whereas if the strength is too high, then dithering patterns may appear even in colors without quantization error (overdithering).</para>
            <para>Every static property in the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> returns an instance with auto strength, meaning that
            strength will be calibrated for each dithering session so that neither the black, nor the white colors will suffer from overdithering in the result.
            The auto value is usually correct if the quantizer returns evenly distributed colors. To obtain an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance with custom strength
            use the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">ConfigureStrength</see> method.</para>
            <para>The following table demonstrates the effect of different strengths:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></term>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShadesDefault4bpp.gif" alt="Grayscale color shades with system default 4 BPP palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see>, no dithering. The asymmetry is due to the uneven distribution of gray shades of this palette.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8.gif" alt="Grayscale color shades with system default 4 BPP palette using Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using auto strength. Darker shades have banding.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Str-5.gif" alt="Grayscale color shades with system default 4 BPP palette using a stronger Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using strength = 0.5. Now there is no banding but white suffers from overdithering.</para></div></term>
            </item>
            </list></para>
            <note type="tip">See the <strong>Examples</strong> section of the static properties for more examples.</note>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer2x2">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 2x2 matrix.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredBayer2x2(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer2x2;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB2.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 2x2 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredB2.gif" alt="Grayscale color shades with black and white palette using Bayer 2x2 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer3x3">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 3x3 matrix.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredBayer3x3(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer3x3;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB3.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 3x3 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredB3.gif" alt="Grayscale color shades with black and white palette using Bayer 3x3 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer4x4">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 4x4 matrix.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredBayer4x4(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer4x4;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB4.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 4x4 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredB4.gif" alt="Grayscale color shades with black and white palette using Bayer 4x4 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using the standard Bayer 8x8 matrix.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredBayer8x8(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.Bayer8x8;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredB8.gif" alt="Color hues with system default 8 BPP palette, using silver background and Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para>
             <para><img src="../Help/Images/AlphaGradientRgb111SilverDitheredB8.gif" alt="Color hues with RGB111 palette and silver background, using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">custom 8-color palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with black and white palette using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para>
             <para><img src="../Help/Images/GrayShades2bppDitheredB8.gif" alt="Grayscale color shades with 2 BPP grayscale palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">4-color grayscale palette</see></para>
             </div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldDefault8bppBlackDitheredB8.gif" alt="Shield icon with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Lena.png" alt="Test image &quot;Lena&quot;"/>
             <br/>Original test image "Lena"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/LenaDefault8bppDitheredB8.gif" alt="Test image &quot;Lena&quot; with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using a 8x8 matrix of a dotted halftone pattern.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredDottedHalftone(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.DottedHalftone;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredDH.gif" alt="Color hues with system default 8 BPP palette, using silver background and dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredDH.gif" alt="Grayscale color shades with black and white palette using dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> using a fixed 64x64 blue noise pattern of 256 different values.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <remarks>
             <note>Generating random blue noise patterns is a very resource intensive operation but this method uses a pregenerated fix pattern, which is very fast.
             To dither images with real random noise use the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>, which applies white noise to the quantized source.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the ditherer returned by this property:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredBlueNoise(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = OrderedDitherer.BlueNoise;
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredBN.gif" alt="Color hues with system default 8 BPP palette, using silver background and blue noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredBN.gif" alt="Grayscale color shades with black and white palette using blue noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip">See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and examples.</note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OrderedDitherer.#ctor(System.Byte[0:,0:],System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class using the specified <paramref name="matrix"/> and <paramref name="strength"/>.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <param name="matrix">A matrix to be used as the coefficients of the dithering. Ideally contains every value between zero
             and the maximum value in the matrix. Repeated values will appear always together for the same input colors.</param>
             <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
             Specify 0 to use an auto value for each dithering session based on the used quantizer.
             <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">ConfigureStrength</see> method for details about dithering strength. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="matrix"/> is empty.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="strength"/> must be between 0 and 1, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use a custom ditherer using the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> constructor.
             It produces a similar dotted halftone pattern to the result of the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.DottedHalftone"/> property but in a rectangular
             arrangement and with less different patterns:
             <code lang="C#"><![CDATA[
             public static Bitmap ToCustomDithered(Bitmap source, IQuantizer quantizer)
             {
                 // Using a dotted halftone pattern. As it uses only 11 values in a 7x7 matrix it is much less optimal
                 // than the DottedHalftone property but demonstrates the behavior of the ordered dithering quite well.
                 byte[,] matrix =
                 {
                    {  0,  2,  4,  5,  4,  2,  1 },
                    {  2,  3,  6,  7,  6,  3,  2 },
                    {  4,  6,  8,  9,  8,  6,  4 },
                    {  5,  7,  9, 10,  9,  7,  5 },
                    {  4,  6,  8,  9,  8,  6,  4 },
                    {  2,  3,  6,  7,  6,  3,  2 },
                    {  1,  2,  4,  5,  4,  2,  1 },
                 };
            
                 IDitherer ditherer = new OrderedDitherer(matrix);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredOC.gif" alt="Color hues with system default 8 BPP palette, using silver background and a custom dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredOC.gif" alt="Grayscale color shades with black and white palette using a custom dotted halftone dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             <note type="tip"><list type="bullet">
             <item>Use the static properties to perform dithering with predefined patterns.</item>
             <item>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and image examples.</item>
             </list></note>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">
            <summary>
            Gets a new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance that has the specified dithering <paramref name="strength"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
            Specify 0 to use an auto value for each dithering session based on the used quantizer.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance that has the specified dithering <paramref name="strength"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="strength"/> must be between 0 and 1, inclusive bounds.</exception>
            <remarks>
            <note>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instance instead of changing the strength of the original one.
            This is required for the static properties so they can return a cached instance.</note>
            <para>If <paramref name="strength"/> is too low, then banding may appear in the result in place of gradients in the original image;
            whereas if <paramref name="strength"/> is too high, then dithering patterns may appear even in colors without quantization error (overdithering).</para>
            <para>If <paramref name="strength"/> is 0, then strength will be calibrated for each dithering session so that neither the black, nor the white colors will suffer from overdithering in the result.
            This is the default for <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> instances returned by the static properties.</para>
            <para>The following table demonstrates the effect of different strengths:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></term>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShadesDefault4bpp.gif" alt="Grayscale color shades with system default 4 BPP palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see>, no dithering. The asymmetry is due to the uneven distribution of gray shades of this palette.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8.gif" alt="Grayscale color shades with system default 4 BPP palette using Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using auto strength. Darker shades have banding.</para>
            <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Str-5.gif" alt="Grayscale color shades with system default 4 BPP palette using a stronger Bayer 8x8 ordered dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">system default 4 BPP palette</see> and <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using strength = 0.5. Now there is no banding but white suffers from overdithering.</para></div></term>
            </item>
            </list></para>
            </remarks>
            <example>
            The following example demonstrates how to specify the strength for a predefined ordered ditherer:
            <code lang="C#"><![CDATA[
            // getting a predefined ditherer with custom strength:
            IDitherer ditherer = OrderedDitherer.Bayer8x8.ConfigureStrength(0.5f);
            ]]></code>
            </example>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer">
            <summary>
            Provides an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation for random noise dithering. This class applies a random white noise to the result. For other noise-like
            ditherers see the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">OrderedDitherer.BlueNoise</see> property and the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.
            <br/>See the <strong>Remarks</strong> section for details and some examples.
            </summary>
            <remarks>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> generates some random white noise to the quantized source.</para>
            <note type="tip">There are also a couple of ditherers with non-random noise-like patterns in this library. See also
            the <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.BlueNoise">OrderedDitherer.BlueNoise</see> property and the <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> class.</note>
            <para>To get always the same result for the same source image and quantizer you can specify a <em>seed</em> when initializing a <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> instance.
            Please note though that specifying a seed prevents parallel processing, which makes performance worse on multi-core systems.</para>
            <para>The following table demonstrates the effect of the dithering:
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilver.gif" alt="Color hues with system default 8 BPP palette and silver background"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see>, no dithering</para>
            <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredRN.gif" alt="Color hues with system default 8 BPP palette, using silver background and random noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see> and random noise dithering</para></div></term>
            </item>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
            <br/>Grayscale color shades</para></div></term>
            <term>
            <div style="text-align:center;width:512px">
            <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see>, no dithering</para>
            <para><img src="../Help/Images/GrayShadesBWDitheredRN.gif" alt="Grayscale color shades with black and white palette using random noise dithering"/>
            <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see> and random noise dithering</para></div></term>
            </item>
            </list></para>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer" />
        </member>
        <member name="M:KGySoft.Drawing.Imaging.RandomNoiseDitherer.#ctor(System.Single,System.Nullable{System.Int32})">
             <summary>
             Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class.
             <br/>See the <strong>Examples</strong> section for some examples.
             </summary>
             <param name="strength">The strength of the dithering effect between 0 and 1 (inclusive bounds).
             Specify 0 to use an auto value for each dithering session based on the used quantizer.
             <br/>See the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/> class for more details and some examples regarding dithering strength.
             The same applies also for the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <param name="seed">If <see langword="null"/>, then a <a href="https://docs.kgysoft.net/corelibraries/?topic=html/T_KGySoft_CoreLibraries_ThreadSafeRandom.htm" target="_blank">ThreadSafeRandom</a>
             instance will be used internally with a time-dependent seed value, and the dithering session will allow parallel processing.
             If not <see langword="null"/>, then a <see cref="T:System.Random"/> instance will be created for each dithering session with the specified <paramref name="seed"/>, and the dithering session will not allow parallel processing.</param>
             <example>
             The following example demonstrates how to use the <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> class.
             <code lang="C#"><![CDATA[
             public static Bitmap ToDitheredRandomNoise(Bitmap source, IQuantizer quantizer)
             {
                 IDitherer ditherer = new RandomNoiseDitherer();
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(quantizer.PixelFormatHint, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the dithering directly on the source bitmap:
                 source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized and dithered image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverDitheredRN.gif" alt="Color hues with system default 8 BPP palette, using silver background and random noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">system default 8 BPP palette</see></para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBWDitheredRN.gif" alt="Grayscale color shades with black and white palette using random noise dithering"/>
             <br/>Quantizing with <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">black and white palette</see></para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration">
            <summary>
            Represents the configuration for encoding a GIF animation by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">GifEncoder.EncodeAnimation</see> method.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Size">
            <summary>
            Gets or sets the desired size of the result animation. If <see langword="null"/>, then size is determined by the first frame.
            If set explicitly or the input frames can have different sizes, then <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.SizeHandling"/> should also be set accordingly.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.SizeHandling">
            <summary>
            Gets or sets how possibly different input frame sizes are handled.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.ErrorIfDiffers"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.ReplaceZeroDelays">
            <summary>
            Gets or sets whether zero delay values are allowed in the result stream,
            which is usually interpreted as 100 ms by most GIF decoders.
            <br/>Default value: <see langword="true"/>.
            </summary>
            <value>
            If <see langword="true"/>, then zero delay values will be replaced to 100 milliseconds.
            <br/>If <see langword="false"/>, then zero delays will be preserved and the decoders decide how to interpret them.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Quantizer">
            <summary>
            Gets or sets an optional quantizer to be used for the frames. 
            Using a non-<see langword="null"/>&#160;value forces the quantization also of already indexed images.
            Should use up to 256 colors; otherwise, the result might be quantized further with using the default system 8-bit palette.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <value>
            If <see langword="null"/>, then the possibly existing palette of already indexed input frames are preserved.
            For frames with a non-indexed pixel format a quantizer returned by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">OptimizedPaletteQuantizer.Wu</see> method will be used.
            <br/>If not <see langword="null"/>, then all frames will be quantized, even the already indexed ones. If does not support transparency,
            then <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> will be ignored.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Ditherer">
            <summary>
            Gets or sets an optional ditherer to be used when quantizing the frames.
            <br/>Default value: <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AnimationMode">
            <summary>
            Gets or sets the looping mode of the animation.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.Repeat"/>.
            </summary>
            <value>
            If <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.Repeat"/>, then the animation will be repeated indefinitely.
            <br/>If <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.PingPong"/>, then the specified frames will be added in both ways so the final animation will be played back and forth.
            <br/>If <see cref="F:KGySoft.Drawing.Imaging.AnimationMode.PlayOnce"/>, then the animation will be played only once.
            <br/>The <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> actually supports any positive value less than or equal to <see cref="F:System.UInt16.MaxValue">UInt16.MaxValue</see> even though
            they don't have named values in the <see cref="T:KGySoft.Drawing.Imaging.AnimationMode"/> enumeration.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.EncodeTransparentBorders">
            <summary>
            Gets or sets whether the transparent borders of the frames should be encoded as part of the frame.
            <br/>Default value: <see langword="false"/>.
            </summary>
            <value>
            If <see langword="true"/>, then transparent borders of the frames will be considered as image content (and possibly smaller frames will be virtually
            enlarged, too). This produces a bit larger encoded size but provides better compatibility.
            <br/>If <see langword="false"/>, then always only the smallest possible non-transparent area will be encoded. Some decoders may not tolerate this option.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames">
            <summary>
            Gets or sets whether it is allowed to encode only the changed part of a frame. In some circumstances the value of this property might be ignored.
            <br/>Default value: <see langword="true"/>.
            </summary>
            <value>
            If <see langword="true"/>, then the encoding time and the required memory may be larger but it allows creating high-color GIF animations.
            This depends also on the used <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.Quantizer"/>, though: an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> allows creating a specific palette for each frame, for example.
            <br/>If <see langword="false"/>, then all frames will be encoded individually. This provides faster encoding time with lower memory consumption.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.DeltaTolerance">
            <summary>
            Gets or sets the allowed maximum tolerance for detecting changes of consecutive frames when <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> is <see langword="true"/>.
            <br/>Default value: 0.
            </summary>
            <value>
            If 0, then even a minimal color difference will be considered as a change to be encoded.
            <br/>If 255, then nothing will be treated as a change. The animation will have no new frames unless a frame contains new transparent pixels compared to the previous one.
            <br/>The reasonable range is between 0 and 16 with an optimized quantizer. Predefined quantizers may tolerate larger values (eg. up to 32) with some dithering.
            </value>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.ReportOverallProgress">
            <summary>
            Gets or sets whether to report overall and/or sub-task progress when encoding by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">GifEncoder.BeginEncodeAnimation</see>
            and <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimationAsync(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.TaskConfig)">GifEncoder.EncodeAnimationAsync</see> methods and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.Progress"/> property is set.
            When <see langword="null"/>, then both are reported.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <value>
            If <see langword="null"/>, then both overall and sub-task progress are reported. You can filter overall progress steps by considering <see cref="F:KGySoft.Drawing.DrawingOperation.Saving"/> operations only.
            <br/>If <see langword="true"/>, then only overall progress steps are reported. Please note that if the count of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            instance passed to the constructor cannot be determined in a trivial way, then the maximum value of the steps will be adjusted dynamically.
            <br/>If <see langword="false"/>, then only sub-task progress steps are reported such as optimizing palette, quantizing and other processing operations.
            </value>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Drawing.Imaging.IReadableBitmapData},System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> class.
            </summary>
            <param name="frames">The collection of the frames to be added to the result animation. Disposing of the frames must be performed by the caller.
            <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">GifEncoder.EncodeAnimation</see> enumerates the collection lazily so you can pass an iterator that disposes
            the previous frame once the next one is queried, or you can even re-use the same bitmap data for each frames if you generate them dynamically.</param>
            <param name="delay">An optional <see cref="T:System.TimeSpan"/> to specify the delay for all frames. If <see langword="null"/>,
            then a default 100 ms delay will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="frames"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.#ctor(System.Collections.Generic.IEnumerable{KGySoft.Drawing.Imaging.IReadableBitmapData},System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> class.
            </summary>
            <param name="frames">The collection of the frames to be added to the result animation. Disposing of the frames must be performed by the caller.
            <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">GifEncoder.EncodeAnimation</see> enumerates the collection lazily so you can pass an iterator that disposes
            the previous frame once the next one is queried, or you can even re-use the same bitmap data for each frames if you generate them dynamically.</param>
            <param name="delays">The collection of the delays to be used for the animation. If <see langword="null"/>&#160;or empty,
            then a default 100 ms delay will be used for all frames.
            If contains less elements than <paramref name="frames"/>, then the last value will be re-used for the remaining frames.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="frames"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.#ctor(System.Func{KGySoft.Drawing.Imaging.IReadableBitmapData},System.Func{System.Nullable{System.TimeSpan}})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> class.
            </summary>
            <param name="getNextFrame">A delegate that returns the next frame of the animation. It should return <see langword="null"/>&#160;after the last frame.
            Frames are not disposed by the encoder so the caller can dispose them once the subsequent frame is requested.</param>
            <param name="getNextDelay">A delegate that returns the delay for the next frame. If it returns <see langword="null"/>&#160;sooner than <paramref name="getNextFrame"/>, then
            the last non-<see langword="null"/>&#160;value will be re-used for the remaining frames. If it returns <see langword="null"/>&#160;for the first time, then
            each frame will use a default 100 ms delay.</param>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifEncoder">
            <summary>
            Provides an encoder for GIF image format that supports animation. Use the static members for high-level access or create an instance to
            control everything manually.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>The simplest way to create a single-frame GIF image is calling the static <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">EncodeImage</see> method. It can
            quantize and dither any input <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> source.</para>
            <para>The simplest way to create a GIF animation is calling the static <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">EncodeAnimation</see> method. It expects
            an <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> that describes the frames and delays to be used along with numerous optional configuration such as
            a specific quantizer and ditherer, looping mode, handling of possible different input image sizes, encoding strategies like allowing
            delta images or explicitly encoding transparent borders.
            <note type="tip">If you use an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> and the <see cref="P:KGySoft.Drawing.Imaging.AnimatedGifConfiguration.AllowDeltaFrames"/> property
            is <see langword="true"/>, then you can create really high quality animations allowing more than 256 colors per frame.</note></para>
            <para>Alternatively, you can instantiate the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class, which allows you even more control at lower levels.
            The <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.RepeatCount"/>, <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/> and <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.BackColorIndex"/> properties should be set before adding the first frame,
            whereas <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.CompressionMode"/> can be changed before each frame. The <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">AddImage</see> method allows specifying a location
            for each frame as well as an action to be performed after the delay interval of the corresponding frame is over.
            You can even write comments to the serialization stream by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddComments(System.String[])">AddComments</see> method.
            <note>When using the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">AddImage</see> method to add frames you should use already quantized images with indexed pixel format.
            Non-indexed images will be quantized using the default 8-bit "web-safe" palette without dithering.</note></para>
            </remarks>
            <example>
            <para>The following example demonstrates how to use the encoder in a <see langword="using"/>&#160;block:
            <code lang="C#"><![CDATA[
            using (var encoder = new GifEncoder(stream, new Size(48, 48)) { GlobalPalette = palette })
            {
                encoder.AddComments("My GIF animation");
                encoder.AddImage(frame1, location1, delay1);
                encoder.AddImage(frame2, location2, delay2);
            }]]></code></para>
            <para>Or, by using fluent syntax the example above can be re-written like this:
            <code lang="C#"><![CDATA[
            // Note the last FinalizeEncoding step. In the above example it is called implicitly at the end of the using block.
            new GifEncoder(stream, new Size(48, 48)) { GlobalPalette = palette }
                .AddComments("My GIF animation")
                .AddImage(frame1, location1, delay1)
                .AddImage(frame2, location2, delay2)
                .FinalizeEncoding();]]></code></para>
            </example>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.RepeatCount">
            <summary>
            Gets or sets the number of repetitions if creating an animation.
            Set a non-<see langword="null"/> value to add the <c>NETSCAPE2.0</c> extension to the stream and to indicate that added images
            should be interpreted as animation frames. Use <c>0</c> to loop the animation indefinitely.
            If <see langword="null"/>, and images are added with 0 delay, then GDI+ handles image as a multi-layer single frame image,
            though some application (including browsers) still may play them as individual frames.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than 0.</exception>
            <exception cref="T:System.InvalidOperationException">This property cannot be set after adding the first image.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette">
            <summary>
            Gets or sets the global palette. If not set, then each added image will be stored along with their own palette.
            If not <see langword="null"/>, then the palette of the added images are stored only when they are different from the global palette.
            <br/>Default value: <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> has more than 256 colors.</exception>
            <exception cref="T:System.InvalidOperationException">This property cannot be set after adding the first image.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.BackColorIndex">
            <summary>
            Gets or sets the background color index if <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/> is set.
            It is relevant only if the palette of the first added image has no transparent entry, in which case
            determines the initial background color if the first added image does not completely cover the virtual screen,
            and also the color of the cleared virtual screen.
            </summary>
            <exception cref="T:System.InvalidOperationException">This property cannot be set after adding the first image.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.AddMetaInfo">
            <summary>
            Gets or sets whether textual meta info should be added to the result stream.
            <br/>Default value: <see langword="false"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.GifEncoder.CompressionMode">
            <summary>
            Gets or sets the compression mode to be used when adding images by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">AddImage</see> method.
            This property can be changed at any time.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.GifCompressionMode.Auto"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.#ctor(System.IO.Stream,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class.
            </summary>
            <param name="stream">The writable stream to save the image content.</param>
            <param name="size">Specifies the logical screen size. It also determines the maximum size of the added images.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.AddImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Point,System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod)">
            <summary>
            Writes an image to the output stream.
            <br/>See the <strong>Remarks</strong> section if the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class for details and examples.
            </summary>
            <param name="imageData">The image data to write. Non-indexed images will be quantized by using the <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/>, or, if that is not set,
            by the system default 8-bpp "web-safe" palette (see also <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.SystemDefault8BppPalette</see>)
            using no dithering.</param>
            <param name="location">Specifies the location of the current image within the logical screen.</param>
            <param name="delay">Specifies the delay before rendering the next image in hundredths of a second. <c>0</c> is usually interpreted as 100ms by browsers (as if 10 was specified),
            while GDI+ treats it zero delay only if <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.RepeatCount"/> is <see langword="null"/>.</param>
            <param name="disposalMethod">Specifies how the decoder should treat the image after being displayed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.NotSpecified"/>.</param>
            <returns>The self <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance allowing adding multiple images by fluent syntax.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.AddComments(System.String[])">
            <summary>
            Writes textual comments to the output stream.
            </summary>
            <param name="comments">The comments to write. They must not be longer than 255 characters and must consist of ASCII characters.</param>
            <returns>The self <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance allowing fluent syntax.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="comments"/> contain a comment longer than 255 characters or that is not of ASCII characters only.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FinalizeEncoding(System.Boolean)">
            <summary>
            Finalizes the encoding. It should be called after adding the last image.
            It is implicitly called when this <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance is disposed.
            </summary>
            <param name="leaveStreamOpen"><see langword="true"/>&#160;to leave the underlying stream open; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteHeaderAndLogicalScreenDescriptor(System.Int32)">
            <summary>
            See the details in chapter 17-18 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WritePalette(KGySoft.Drawing.Imaging.Palette)">
            <summary>
            See the details in chapters 19 and 21 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteCommentExtension(System.Byte[])">
            <summary>
            Writing the comment extension from direct data as per chapters 24 and 15 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteCommentExtension(System.String[])">
            <summary>
            Writing the comment extension from strings as per chapters 24 and 15 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteNetscapeLoopBlockApplicationExtension(System.Int32)">
            <summary>
            Writing the nonstandard NETSCAPE2.0 extension as per chapters 26 and 15 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteGraphicControlExtension(System.Int32,KGySoft.Drawing.Imaging.GifGraphicDisposalMethod,System.Int32)">
            <summary>
            Writing the Graphic Control Extension as per chapter 23 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.WriteImageDescriptor(System.Drawing.Point,System.Drawing.Size,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Writing the Graphic Control Extension as per chapter 20 in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNext">
            <summary>
            It consumes <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextGeneratedFrame"/> set by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextGeneratedFrame"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextGeneratedFrame">
            <summary>
            It consumes <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextPreparedFrame"/> set by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextPreparedFrame"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextGeneratedFrame"/>.
            Tries to generate the next frame, but it does not set <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.Frame"/>
            (it is done by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNext"/>) so it can look one frame forward.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextPreparedFrame">
            <summary>
            It consumes <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextUnprocessedInputFrame"/> set by <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextInputFrame"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextPreparedFrame"/>.
            Tries to prepare the next frame. Prepared frames are adjusted to the final size and might already be quantized if no delta frame can be generated.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.MoveNextInputFrame">
            <summary>
            Tries to get the next frame from <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.inputFramesEnumerator"/>, and sets <see cref="F:KGySoft.Drawing.Imaging.GifEncoder.FramesEnumerator.nextUnprocessedInputFrame"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder">
            <summary>
            The LZW Encoder based on the specification as per chapter 22 and Appendix F in https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            The detailed LZW algorithm is written here: http://giflib.sourceforge.net/whatsinagif/lzw_image_data.html
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder.CodeTable">
            <summary>
            Provides the LZW code table implementation.
            It has been refactored to use open addressing double hashing instead of a regular Dictionary.
            Some implementation ideas were inspired by Kevin Weiner's Java encoder from here: http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm
            Basically it uses a variant of Knuth's algorithm along with G. Knott's relatively-prime secondary probe.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder.CodeTable.tableSize">
            <summary>
            A prime that provides about 80% occupancy in the code table considering the max used entries when bit size is 12.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifEncoder.LzwEncoder.CodeTable.entries">
            <summary>
            Earlier versions used a dictionary as a code table where the key was a span of palette indices.
            Even with shared underlying buffer memory and optimized GetHashCode/Equals implementation it was much less efficient.
            Here we can exploit that all prefixes of new codes are already stored so when there is a hash collision we don't need
            to perform an equality check for the whole segment repeatedly (this is what Dictionary does when there are more entries in the same bucket).
            Instead, we use double hashing and a match key for equality check:
            - The primary hash is calculated for the current prefix and is used to select a code table entry
            - A match key is used for equality check. It is calculated last code + current index combination and is stored along with prefix codes.
            - If equality check by match key fails (collision), then using a secondary hash to jump from entry to entry.
            The idea was taken from here: http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Encodes the specified <paramref name="imageData"/> as a GIF image and writes it into the specified <paramref name="stream"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="imageData">The image data to write. Non-indexed images will be quantized by using the <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/>, or, if that is not set,
            by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)"/> using no dithering.</param>
            <param name="stream">The stream to save the encoded image into.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/>&#160;and <paramref name="imageData"/> is not an indexed image or the image contains different alpha pixels,
            then <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)"/> quantizer will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginEncodeImage</see>
            or <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">EncodeImageAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>To encode an <see cref="T:System.Drawing.Image"/> you can use also the <see cref="O:KGySoft.Drawing.ImageExtensions.SaveAsGif">ImageExtensions.SaveAsGif</see>
            methods that provide a higher level access.</para>
            <para>To create a GIF completely manually you can create a <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance that provides a lower level access.</para>
            <para>If <paramref name="quantizer"/> is specified, then it will be used even for already indexed images.</para>
            <para>If <paramref name="quantizer"/> is an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>, then the palette of the result image will be adjusted for the actual image content.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to encode the specified <paramref name="imageData"/> as a GIF image and to write it into the specified <paramref name="stream"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="imageData">The image data to write. Non-indexed images will be quantized by using the <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/>, or, if that is not set,
            by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)"/> using no dithering.</param>
            <param name="stream">The stream to save the encoded image into.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/>&#160;and <paramref name="imageData"/> is not an indexed image or the image contains different alpha pixels,
            then <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)"/> quantizer will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">EncodeImageAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeImage(System.IAsyncResult)">EndEncodeImage</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.
            The encoding itself cannot be parallelized. The <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> setting affects only the quantizing session
            if <paramref name="imageData"/> has a non-indexed pixel format, or when <paramref name="quantizer"/> is set.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">EncodeImage</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeImage(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginEncodeImage</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">EncodeImageAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Encodes the specified <paramref name="imageData"/> as a GIF image asynchronously, and writes it into the specified <paramref name="stream"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="imageData">The image data to write. Non-indexed images will be quantized by using the <see cref="P:KGySoft.Drawing.Imaging.GifEncoder.GlobalPalette"/>, or, if that is not set,
            by <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)"/> using no dithering.</param>
            <param name="stream">The stream to save the encoded image into.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/>&#160;and <paramref name="imageData"/> is not an indexed image or the image contains different alpha pixels,
            then <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)"/> quantizer will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.
            The encoding itself cannot be parallelized. The <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> setting affects only the quantizing session
            if <paramref name="imageData"/> has a non-indexed pixel format, or when <paramref name="quantizer"/> is set.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">EncodeImage</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">
            <summary>
            Encodes the frames of the specified <paramref name="configuration"/> as an animated GIF image and writes it into the specified <paramref name="stream"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="configuration">An <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> instance describing the configuration of the encoding.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="configuration"/> is invalid.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">BeginEncodeAnimation</see>
            or <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimationAsync(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.TaskConfig)">EncodeAnimationAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>To encode <see cref="T:System.Drawing.Image"/> instances with default configuration you can use the <see cref="O:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif">ImageExtensions.SaveAsAnimatedGif</see>
            methods that provide a higher level access.</para>
            <para>To create an animation completely manually you can create a <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance that provides a lower level access.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to encode the frames of the specified <paramref name="configuration"/> as an animated GIF image and to write it into the specified <paramref name="stream"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="configuration">An <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> instance describing the configuration of the encoding.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="configuration"/> is invalid.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimationAsync(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.TaskConfig)">EncodeAnimationAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeAnimation(System.IAsyncResult)">EndEncodeAnimation</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">EncodeAnimation</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeAnimation(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">BeginEncodeAnimation</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimationAsync(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.TaskConfig)">EncodeAnimationAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimationAsync(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.TaskConfig)">
            <summary>
            Encodes the frames of the specified <paramref name="configuration"/> as an animated GIF image asynchronously, and writes it into the specified <paramref name="stream"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="configuration">An <see cref="T:KGySoft.Drawing.Imaging.AnimatedGifConfiguration"/> instance describing the configuration of the encoding.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="configuration"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="configuration"/> is invalid.</exception>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">EncodeAnimation</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Encodes the specified <paramref name="imageData"/> as a multi-layered, single frame GIF image and writes it into the specified <paramref name="stream"/>, preserving its original color depth.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="imageData">The image data to write. Possible alpha pixels might be blended with <paramref name="backColor"/> but otherwise the color depth will be preserved.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="allowFullScan"><see langword="true"/>&#160;to allow scanning the whole image for each layers to be able to re-use the local palette of the current layer.
            <br/><see langword="false"/>&#160;to expand the initial layer area to the local pixels only. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="backColor">Colors with alpha (transparency), whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color during the encoding.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which a pixel is considered transparent.
            If 0, then the final composite image will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.AsyncConfig)">BeginEncodeHighColorImage</see>
            or <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.TaskConfig)">EncodeHighColorImageAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <note type="caution">This method produces a GIF image that may have compatibility issues. Though the <see cref="T:System.Drawing.Image"/> and <see cref="T:System.Drawing.Bitmap"/> types (at least in Windows)
            support them as expected as well as applications built on GDI+ (such as Windows Paint), many decoders may treat the result as an animation (including browsers).</note>
            <para>If <paramref name="allowFullScan"/> is <see langword="true"/>, then both the processing time and memory usage is higher.
            It helps to minimize the number of layers of the final image; however, the final image size will not be necessarily smaller, especially for true color images.</para>
            <para>If <paramref name="allowFullScan"/> is <see langword="false"/>, then each layer is attempted to be as compact as possible. It allows a very fast processing with lower memory usage.
            Though it usually produces more layers, the final size will not be necessarily larger, especially for true color images.</para>
            <note type="tip">You can prequantize true color images using a 16-bit quantizer (with or without dithering) to produce fairly compact, still high color GIF images.
            For such images the <paramref name="allowFullScan"/> parameter with <see langword="true"/>&#160;value typically produces more compact results.
            You can consider using the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">Argb1555</see> quantizer for images with transparency,
            or the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">Rgb565</see> quantizer for non-transparent images.</note>
            <para>To encode an <see cref="T:System.Drawing.Image"/> you can use also the <see cref="O:KGySoft.Drawing.ImageExtensions.SaveAsHighColorGif">ImageExtensions.SaveAsHighColorGif</see> methods.</para>
            <para>To create a multi-layered image completely manually you can create a <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance that provides a lower level access.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to encode the specified <paramref name="imageData"/> as a multi-layered, single frame GIF image, writing it into the specified <paramref name="stream"/> and preserving its original color depth.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="imageData">The image data to write. Possible alpha pixels might be blended with <paramref name="backColor"/> but otherwise the color depth will be preserved.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="allowFullScan"><see langword="true"/>&#160;to allow scanning the whole image for each layers to be able to re-use the local palette of the current layer.
            <br/><see langword="false"/>&#160;to expand the initial layer area to the local pixels only. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="backColor">Colors with alpha (transparency), whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color during the encoding.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which a pixel is considered transparent.
            If 0, then the final composite image will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.TaskConfig)">EncodeHighColorImageAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeHighColorImage(System.IAsyncResult)">EndEncodeHighColorImage</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.
            The encoding itself cannot be parallelized. The <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> setting affects only some processing steps if the size of a layer exceeds a threshold.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte)">EncodeHighColorImage</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EndEncodeHighColorImage(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.AsyncConfig)">BeginEncodeHighColorImage</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.TaskConfig)">EncodeHighColorImageAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.TaskConfig)">
            <summary>
            Encodes the specified <paramref name="imageData"/> as a multi-layered, single frame GIF image asynchronously, ans writes it into the specified <paramref name="stream"/>, preserving its original color depth.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="imageData">The image data to write. Possible alpha pixels might be blended with <paramref name="backColor"/> but otherwise the color depth will be preserved.</param>
            <param name="stream">The stream to save the encoded animation into.</param>
            <param name="allowFullScan"><see langword="true"/>&#160;to allow scanning the whole image for each layers to be able to re-use the local palette of the current layer.
            <br/><see langword="false"/>&#160;to expand the initial layer area to the local pixels only. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="backColor">Colors with alpha (transparency), whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color during the encoding.
            The alpha value (<see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which a pixel is considered transparent.
            If 0, then the final composite image will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="imageData"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.
            The encoding itself cannot be parallelized. The <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> setting affects only some processing steps if the size of a layer exceeds a threshold.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte)">EncodeHighColorImage</see> method for more details.</note>
            </remarks>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling">
            <summary>
            Represents the strategy to be used with frames of different sizes.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.ErrorIfDiffers">
            <summary>
            Specifies that if an input frame has a different size, then an exception should be thrown.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.Center">
            <summary>
            Specifies that smaller or larger frames should be centered. Possibly exceeding areas will be clipped.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationFramesSizeHandling.Resize">
            <summary>
            Specifies that frames should be resized to the actual size of the animation.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.AnimationMode">
            <summary>
            Represents the looping mode of an animation.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationMode.PingPong">
            <summary>
            Specifies that added frames should be played back and forth.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationMode.Repeat">
            <summary>
            Specifies that the animation should be looped.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.AnimationMode.PlayOnce">
            <summary>
            Specifies that the animation should be played only once.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifCompressionMode">
            <summary>
            Represents the compression behavior of the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.Auto">
            <summary>
            Represents the automatic adaptive mode.
            The internally used code table might be regularly cleared.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.DoNotClear">
            <summary>
            Indicates that once the internally used code table is full, it is not maintained anymore and all remaining codes
            are written using 12 bit code size. If codes so far can be re-used, then the result can be more compact than with <see cref="F:KGySoft.Drawing.Imaging.GifCompressionMode.Auto"/> mode;
            otherwise, the result can be even longer than in <see cref="F:KGySoft.Drawing.Imaging.GifCompressionMode.Uncompressed"/> mode.
            This option might not be tolerated by some decoders.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.DoNotIncreaseBitSize">
            <summary>
            Indicates that all written codes must use the same bit size (3 to 9 bits, depending on palette size).
            It uses less memory but it may lead to poor compression, especially with palettes using no more than 4 colors.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifCompressionMode.Uncompressed">
            <summary>
            Indicates that the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> should not use any compression.
            It uses the least memory but the result can be really long.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod">
            <summary>
            Indicates the way in which the graphic is to be treated after being displayed.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.NotSpecified">
            <summary>
            No disposal specified. The decoder is not required to take any action.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.DoNotDispose">
            <summary>
            Do not dispose. The graphic is to be left in place.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.RestoreToBackground">
            <summary>
            Restore to background color. The area used by the graphic must be restored to the background color.
            If there is no global palette, or the corresponding image has transparent color, then the virtual screen
            is always cleared to transparent.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.GifGraphicDisposalMethod.RestoreToPrevious">
            <summary>
            Restore to previous. The decoder is required to restore the area overwritten by the graphic with what was there prior to rendering the graphic.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataExtensions">
            <summary>
            Provides extension methods for the <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>, <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            and <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> types.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and pixel format.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/> and color settings.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows, which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp
            ones during the operation.</para>
            <para>If <paramref name="pixelFormat"/> represents an indexed format, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>. To specify the desired palette of the result use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/> and <paramref name="palette"/>.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows, which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp
            ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows, which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp
            ones during the operation.</para>
            <para>If <paramref name="pixelFormat"/> represents an indexed format, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>. To specify the desired palette of the result use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)"/> overload.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and <paramref name="palette"/>.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This overload automatically quantizes colors if <paramref name="pixelFormat"/> represents a narrower set of colors than <paramref name="source"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            To use a custom quantizer use the overloads with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> parameter.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If they are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows, which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp
            ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/>&#160;and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="pixelFormat"/> can represent,
            then the result will eventually quantized, though the result may have a poorer quality than expected.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats if there is no <paramref name="quantizer"/> specified. If pixel formats are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows,
            which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and the specified <paramref name="pixelFormat"/>, using an optional <paramref name="ditherer"/>.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If pixel formats are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows,
            which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="ditherer"/>.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats. If pixel formats are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows,
            which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/>&#160;and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="pixelFormat"/> can represent a narrower set of colors, then the result will be automatically quantized to its color space,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="pixelFormat"/> can represent,
            then the result will eventually quantized, though the result may have a poorer quality than expected.</para>
            <para>Color depth of wide-color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>)
            can be preserved only between the same pixel formats if there is no <paramref name="quantizer"/> specified. If pixel formats are different, or <paramref name="source"/> is from a <see cref="T:System.Drawing.Bitmap"/> on Windows,
            which uses 13 bits-per-pixel channels, then colors might be quantized to 32bpp ones during the operation.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> extension method
            for some examples. The <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> extensions work the same way for <see cref="T:System.Drawing.Image"/>s
            as the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extensions for <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instances.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to clone the specified <paramref name="source"/> with identical size and pixel format asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings asynchronously.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/>&#160;to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and <paramref name="palette"/> asynchronously.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/>&#160;to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to clone the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/> asynchronously.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/>&#160;and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/>&#160;to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">EndClone</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClone(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone">BeginClone</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync">CloneAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">
            <summary>
            Gets the clone of the specified <paramref name="source"/> with identical size and pixel format asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>Alternatively, you can also use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClone(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)"/> method, which is available on every platform.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and color settings asynchronously.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="backColor">If <paramref name="pixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: The default value of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> type, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="pixelFormat"/> can represent only single-bit alpha or <paramref name="pixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/>&#160;to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/> and <paramref name="palette"/> asynchronously.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="palette">If <paramref name="pixelFormat"/> is an indexed format, then specifies the desired <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the returned <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance.
            It determines also the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> properties of the result.
            If <see langword="null"/>, then the target palette is taken from <paramref name="source"/> if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="pixelFormat"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/>&#160;to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CloneAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,System.Nullable{System.Drawing.Rectangle},KGySoft.Drawing.TaskConfig)">
            <summary>
            Gets the clone of the specified portion of <paramref name="source"/> with the specified <paramref name="pixelFormat"/>, using an optional <paramref name="quantizer"/> and <paramref name="ditherer"/> asynchronously.
            This method is similar to <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> but as the result is a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance
            every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported on any platform.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance to be cloned.</param>
            <param name="pixelFormat">The desired pixel format of the result.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors of the result.
            If <see langword="null"/>&#160;and <paramref name="pixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="pixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be cloned, or <see langword="null"/>&#160;to clone the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that represents the clone of the specified <paramref name="source"/>,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pixelFormat"/> does not specify a valid format.
            <br/>-or-
            <br/><paramref name="sourceRectangle"/> has no overlapping region with source bounds.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="quantizer"/> uses a palette with too many colors for the specified <paramref name="pixelFormat"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Point.Empty">Point.Empty</see>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginCopyTo</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginCopyTo</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginCopyTo</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            without scaling and blending. This method works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto">DrawInto</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginCopyTo</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The copied area is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to copy the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> asynchronously,
            without scaling and blending. This method works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto">BeginDrawInto</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied, or <see langword="null"/>&#160;to copy the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="targetLocation">A <see cref="T:System.Drawing.Point"/> that specifies the target location, or <see langword="null"/>&#160;top copy the <paramref name="source"/> to the top-left corner of the <paramref name="target"/>. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndCopyTo(System.IAsyncResult)">EndCopyTo</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndCopyTo(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginCopyTo</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Copies the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> asynchronously,
            without scaling and blending. This method works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To draw a bitmap data into another one with blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync">DrawIntoAsync</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be copied into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> into which <paramref name="source"/> should be copied.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be copied, or <see langword="null"/>&#160;to copy the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="targetLocation">A <see cref="T:System.Drawing.Point"/> that specifies the target location, or <see langword="null"/>&#160;top copy the <paramref name="source"/> to the top-left corner of the <paramref name="target"/>. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used. If not specified, then the copying operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Point.Empty">Point.Empty</see>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            without scaling, using blending. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to draw the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously,
            without scaling, using blending. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)"/> overload.
            To copy a bitmap data into another one without blending use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginCopyTo</see> method instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>, or <see langword="null"/>&#160;to draw the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="targetLocation">A <see cref="T:System.Drawing.Point"/> that specifies the target location, or <see langword="null"/>&#160;top draw the <paramref name="source"/> to the top-left corner of the <paramref name="target"/>. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDrawInto(System.IAsyncResult)">EndDrawInto</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDrawInto(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto">BeginDrawInto</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync">DrawIntoAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously,
            without scaling, using blending. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> overload.
            To copy a bitmap data into another one without blending use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> method instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>, or <see langword="null"/>&#160;to draw the entire <paramref name="source"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="targetLocation">A <see cref="T:System.Drawing.Point"/> that specifies the target location, or <see langword="null"/>&#160;top draw the <paramref name="source"/> to the top-left corner of the <paramref name="target"/>. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>
            format has at least 24 bits-per-pixel size.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para><paramref name="target"/> must be an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> because it must be readable if blending is necessary. For write-only <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instances
            you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyTo">CopyTo</see> methods (without scaling).</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to draw the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously,
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginCopyTo(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginCopyTo</see> method instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDrawInto(System.IAsyncResult)">EndDrawInto</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> into the <paramref name="target"/>&#160;<see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously,
            using scaling and blending. This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            To copy a bitmap data into another one without blending use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.CopyToAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IWritableBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">CopyToAsync</see> method instead.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)"/> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <param name="disposeSource"><see langword="true"/>&#160;to dispose <paramref name="source"/> when the result is disposed; otherwise, <see langword="false"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
            <remarks>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance can be 0, indicating that the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see>
            method cannot be used. It can occur if the left edge of the clipping is not zero.</para>
            <para>Even if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance is a nonzero value it can happen that it is too low to access all columns
            by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method. It can occur with indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the right edge of the clipping is not on byte boundary.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            This overload does not dispose <paramref name="source"/> when the result is disposed.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Boolean)"/> overload for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Converts the specified <paramref name="source"/> to a <see cref="T:System.Drawing.Bitmap"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to covert.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance that has the same content as the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BeginToBitmap</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmapAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">ToBitmapAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If supported on the current platform, the result <see cref="T:System.Drawing.Bitmap"/> will have the same <see cref="T:System.Drawing.Imaging.PixelFormat"/> as <paramref name="source"/>.
            Otherwise, the result will have either <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> or <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> format, depending whether source has transparency.
            <note>On Windows every format is supported with more or less limitations. For details and further information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms
            see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.
            </note></para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="source"/> to a <see cref="T:System.Drawing.Bitmap"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to covert.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmapAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">ToBitmapAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToBitmap(System.IAsyncResult)">EndToBitmap</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToBitmap</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToBitmap(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BeginToBitmap</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmapAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">ToBitmapAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmapAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">
            <summary>
            Converts the specified <paramref name="source"/> to a <see cref="T:System.Drawing.Bitmap"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to covert.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is a <see cref="T:System.Drawing.Bitmap"/> instance that has the same content as the specified <paramref name="source"/>,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToBitmap(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToBitmap</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean)">
            <summary>
            Gets the colors used in the specified <paramref name="bitmapData"/>. A limit can be defined in <paramref name="maxColors"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>, whose colors have to be returned. If it is indexed and the <paramref name="forceScanningContent"/> parameter is <see langword="false"/>,
            then its palette entries are returned and <paramref name="maxColors"/> is ignored.</param>
            <param name="maxColors">A limit of the returned colors. If <paramref name="forceScanningContent"/> parameter is <see langword="false"/>, then
            this parameter is ignored for indexed bitmaps. Use 0 for no limit. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="forceScanningContent"><see langword="true"/>&#160;to force scanning the actual image content even if the specified <paramref name="bitmapData"/> is
            indexed and has a palette. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entries.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.AsyncConfig)">BeginGetColors</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorsAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.TaskConfig)">GetColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>Completely transparent pixels are considered the same regardless of their color information.</para>
            <para>Every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported, though wide color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>,
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/> and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>) are quantized to 32 bit during the processing.
            To get the actual <em>number</em> of colors, which can be accurate even for wide color formats, use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData)">GetColorCount</see> method.
            </para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to get the colors used in the specified <paramref name="bitmapData"/> asynchronously. A limit can be defined in <paramref name="maxColors"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>, whose colors have to be returned. If it is indexed and the <paramref name="forceScanningContent"/> parameter is <see langword="false"/>,
            then its palette entries are returned and <paramref name="maxColors"/> is ignored.</param>
            <param name="maxColors">A limit of the returned colors. If <paramref name="forceScanningContent"/> parameter is <see langword="false"/>, then
            this parameter is ignored for indexed bitmaps. Use 0 for no limit. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="forceScanningContent"><see langword="true"/>&#160;to force scanning the actual image content even if the specified <paramref name="bitmapData"/> is
            indexed and has a palette. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorsAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.TaskConfig)">GetColorsAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColors(System.IAsyncResult)">EndGetColors</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean)">GetColors</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColors(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.AsyncConfig)">BeginGetColors</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorsAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.TaskConfig)">GetColorsAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entries that is the result of the operation.
            If the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>, then an empty collection is returned.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorsAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.TaskConfig)">
            <summary>
            Gets the colors used in the specified <paramref name="bitmapData"/> asynchronously. A limit can be defined in <paramref name="maxColors"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>, whose colors have to be returned. If it is indexed and the <paramref name="forceScanningContent"/> parameter is <see langword="false"/>,
            then its palette entries are returned and <paramref name="maxColors"/> is ignored.</param>
            <param name="maxColors">A limit of the returned colors. If <paramref name="forceScanningContent"/> parameter is <see langword="false"/>, then
            this parameter is ignored for indexed bitmaps. Use 0 for no limit. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="forceScanningContent"><see langword="true"/>&#160;to force scanning the actual image content even if the specified <paramref name="bitmapData"/> is
            indexed and has a palette. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is an <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:KGySoft.Drawing.Imaging.Color32"/> entries.
            If the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>, then the result of the task is an empty collection.</returns>
            <remarks>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean)">GetColors</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Gets the actual number of colors of the specified <paramref name="bitmapData"/>. Colors are counted even for indexed bitmaps.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The bitmap, whose colors have to be counted to count its colors.</param>
            <returns>The actual number of colors of the specified <paramref name="bitmapData"/>.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BeginGetColorCount</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCountAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">GetColorCountAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>Completely transparent pixels are considered the same regardless of their color information.</para>
            <para>Every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported, but an accurate result is returned for wide color formats only
            when <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> is large enough to access all pixels directly (might not be the case for a clipped bitmap data, for example).
            Otherwise, colors are quantized to 32 bits-per-pixel values while counting them.
            Wide pixel formats are <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/> and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Gets the actual number of colors of the specified <paramref name="bitmapData"/> asynchronously. Colors are counted even for indexed bitmaps.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The bitmap, whose colors have to be counted to count its colors.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCountAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">GetColorCountAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColorCount(System.IAsyncResult)">EndGetColorCount</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData)">GetColorCount</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndGetColorCount(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BeginGetColorCount</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCountAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">GetColorCountAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:System.Int32">int</see> value that is the result of the operation,
            or <c>0</c>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCountAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">
            <summary>
            Gets the actual number of colors of the specified <paramref name="bitmapData"/> asynchronously. Colors are counted even for indexed bitmaps.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The bitmap, whose colors have to be counted to count its colors.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the actual number of colors of the specified <paramref name="bitmapData"/>,
            or <c>0</c>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData)">GetColorCount</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the grayscale version of the specified <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to grayscale.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> containing the grayscale version of the original <paramref name="bitmapData"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BeginToGrayscale</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)">ToGrayscaleAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format.</para>
            <para>To return an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with arbitrary <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> overloads with a grayscale palette,
            quantizer (eg. <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see>) or pixel format (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>).</para>
            <para>To make an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> grayscale without creating a new instance use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">MakeGrayscale</see> method.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ToGrayscale(System.Drawing.Image)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.MakeGrayscale(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="bitmapData"/> to grayscale asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to grayscale.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> containing the grayscale version of the original <paramref name="bitmapData"/>.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)">ToGrayscaleAsync</see> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToGrayscale(System.IAsyncResult)">EndToGrayscale</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToGrayscale</see> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToGrayscale(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BeginToGrayscale</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)">ToGrayscaleAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously, which is the grayscale version of the specified <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to grayscale.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> containing the grayscale version of the original <paramref name="bitmapData"/>,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToGrayscale</see> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>Similarly to the <see cref="M:System.Drawing.Bitmap.MakeTransparent">Bitmap.MakeTransparent</see> method, this one uses the bottom-left pixel to determine
            the background color, which must be completely opaque; otherwise, just an exact clone of <paramref name="bitmapData"/> will be returned.</para>
            <para>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format.</para>
            <para>To attempt to make an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> transparent without creating a new instance use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)">MakeTransparent</see> method.</para>
            <para>To force replacing even non-completely opaque pixels use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> method with a quantizer
            created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <returns>A new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method always returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format.</para>
            <para>To attempt to make an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> transparent without creating a new instance use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)">MakeTransparent</see> method.</para>
            <para>To auto-detect the background color to be made transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> method with a quantizer
            created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="bitmapData"/> to another one with transparent background asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToTransparent(System.IAsyncResult)">EndToTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="bitmapData"/> to another one with transparent background asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToTransparent(System.IAsyncResult)">EndToTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndToTransparent(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent">BeginToTransparent</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync">ToTransparentAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)">
            <summary>
            Returns a new <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously, which is the clone of the specified <paramref name="bitmapData"/> with transparent background.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to convert to transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>, which is the clone of the specified <paramref name="bitmapData"/> with transparent background,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">
            <summary>
            Saves the content of this <paramref name="bitmapData"/> into the specified <paramref name="stream"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to save.</param>
            <param name="stream">The stream to save the bitmap data into.</param>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginSave(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">BeginSave</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.SaveAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.TaskConfig)">SaveAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>To reload the content use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.Load(System.IO.Stream)">BitmapDataFactory.Load</see> method.</para>
            <para>The saved content always preserves <see cref="T:System.Drawing.Imaging.PixelFormat"/> so the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.Load(System.IO.Stream)">BitmapDataFactory.Load</see>
            method can restore it the same way on any platform.</para>
            <note>If <paramref name="bitmapData"/> represents the bitmap data of a native <see cref="T:System.Drawing.Bitmap"/> with <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>,
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/> or <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/>, then on Windows the actual
            color depth is quantized to 32bpp because these formats have a different raw interpretation than managed bitmaps used by <c>KGySoft Drawing Libraries</c>.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginSave(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to save the content of this <paramref name="bitmapData"/> into the specified <paramref name="stream"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to save.</param>
            <param name="stream">The stream to save the bitmap data into.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.SaveAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.TaskConfig)">SaveAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndSave(System.IAsyncResult)">EndSave</see> method.</para>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">Save</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndSave(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginSave(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">BeginSave</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.SaveAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.TaskConfig)">SaveAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.SaveAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.TaskConfig)">
            <summary>
            Saves the content of this <paramref name="bitmapData"/> into the specified <paramref name="stream"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> to save.</param>
            <param name="stream">The stream to save the bitmap data into.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call, though the operation is not parallelized and the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is ignored.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Save(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream)">Save</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <param name="disposeSource"><see langword="true"/>&#160;to dispose <paramref name="source"/> when the result is disposed; otherwise, <see langword="false"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
            <remarks>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance can be 0, indicating that the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see>/<see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see>
            method cannot be used. It can occur if the left edge of the clipping is not zero.</para>
            <para>Even if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance is a nonzero value it can happen that it is too low to access all columns
            by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see>/<see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods. It can occur with indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the right edge of the clipping is not on byte boundary.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            This overload does not dispose <paramref name="source"/> when the result is disposed.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Boolean)"/> overload for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> using the specified <paramref name="quantizer"/> (reduces the number of colors).
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="quantizer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="quantizer"/>'s <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginQuantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.AsyncConfig)">BeginQuantize</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.QuantizeAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.TaskConfig)">QuantizeAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method quantizes the specified <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method instead.</para>
            <para>If the <see cref="T:System.Drawing.Imaging.PixelFormat"/> or the palette of <paramref name="bitmapData"/> is not compatible with the colors of the specified <paramref name="quantizer"/>, then
            the result may not be correct.</para>
            <para>If <paramref name="bitmapData"/> has already the same set of colors that the specified <paramref name="quantizer"/>, then it can happen
            that calling this method does not change the <paramref name="bitmapData"/> at all.</para>
            <note type="tip"><list type="bullet">
            <item>To use predefined colors or custom quantization functions use the static methods of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of its members for details and examples.</item>
            <item>To use an optimized palette of up to 256 colors adjusted for <paramref name="bitmapData"/> see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</item>
            </list></note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with dithering (reduces the number of colors while trying to preserve details)
            using the specified <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="ditherer">An <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation to be used for dithering during the quantization of the specified <paramref name="bitmapData"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/>, <paramref name="quantizer"/> or <paramref name="ditherer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">IQuantizer.Initialize</see> method
            or the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">IDitherer.Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginDither</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DitherAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">DitherAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method quantizes <paramref name="bitmapData"/> with dithering in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method instead.</para>
            <para>If the <see cref="T:System.Drawing.Imaging.PixelFormat"/> or the palette of <paramref name="bitmapData"/> is not compatible with the colors of the specified <paramref name="quantizer"/>, then
            the result may not be correct.</para>
            <para>If <paramref name="bitmapData"/> has already the same set of colors that the specified <paramref name="quantizer"/>, then it can happen
            that calling this method does not change <paramref name="bitmapData"/> at all.</para>
            <note type="tip"><list type="bullet">
            <item>To use predefined colors or custom quantization functions use the static methods of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of its members for details and examples.</item>
            <item>To use an optimized palette of up to 256 colors adjusted for <paramref name="bitmapData"/> see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</item>
            <item>For some built-in dithering solutions see the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> classes. All of them have several examples in their <strong>Remarks</strong> section.</item>
            </list></note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginQuantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to quantize an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously, using the specified <paramref name="quantizer"/> (reduces the number of colors).
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="quantizer"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.QuantizeAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.TaskConfig)">QuantizeAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndQuantize(System.IAsyncResult)">EndQuantize</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)">Quantize</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndQuantize(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginQuantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.AsyncConfig)">BeginQuantize</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.QuantizeAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.TaskConfig)">QuantizeAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <exception cref="T:System.InvalidOperationException">The quantizer's <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">Initialize</see> method returned <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to quantize an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with dithering asynchronously (reduces the number of colors while trying to preserve details)
            using the specified <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="ditherer">An <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation to be used for dithering during the quantization of the specified <paramref name="bitmapData"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/>, <paramref name="quantizer"/> or <paramref name="ditherer"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DitherAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">DitherAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndQuantize(System.IAsyncResult)">EndQuantize</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Dither</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndDither(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginDither</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DitherAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">QuantizeAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">IQuantizer.Initialize</see> method
            or the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">IDitherer.Initialize</see> method returned <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.QuantizeAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> asynchronously, using the specified <paramref name="quantizer"/> (reduces the number of colors).
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="quantizer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="quantizer"/>'s <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)">Quantize</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DitherAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Quantizes an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> with dithering asynchronously (reduces the number of colors while trying to preserve details)
            using the specified <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmapData"/>.</param>
            <param name="ditherer">An <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation to be used for dithering during the quantization of the specified <paramref name="bitmapData"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/>, <paramref name="quantizer"/> or <paramref name="ditherer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">IQuantizer.Initialize</see> method
            or the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">IDitherer.Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Dither</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32})">
            <summary>
            Transforms the colors of this <paramref name="bitmapData"/> using the specified <paramref name="transformFunction"/> delegate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginTransformColors</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColorsAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">TransformColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method
            with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and it supports setting the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/>, then its palette entries will be transformed instead of the actual pixels.</para>
            <para>On multi-core systems <paramref name="transformFunction"/> might be called concurrently so it must be thread-safe.</para>
            <note type="tip">If <paramref name="transformFunction"/> can return colors incompatible with the pixel format of the specified <paramref name="bitmapData"/>, or you want to transform the actual
            pixels of an indexed <paramref name="bitmapData"/> instead of modifying the palette, then use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)"/> overload and specify an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.TransformColors(System.Drawing.Bitmap,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Transforms the colors of this <paramref name="bitmapData"/> using the specified <paramref name="transformFunction"/> delegate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if <paramref name="transformFunction"/> returns colors
            that is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginTransformColors</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColorsAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">TransformColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> extension method
            with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>On multi-core systems <paramref name="transformFunction"/> might be called concurrently so it must be thread-safe.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            <note>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.TransformColors(System.Drawing.Bitmap,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,System.Drawing.Color,System.Byte)">BitmapExtensions.TransformColors</see> method for an example.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.TransformColors(System.Drawing.Bitmap,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to transform the colors of this <paramref name="bitmapData"/> asynchronously, using the specified <paramref name="transformFunction"/> delegate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if <paramref name="transformFunction"/> returns colors
            that is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColorsAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">TransformColorsAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndTransformColors(System.IAsyncResult)">EndTransformColors</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndTransformColors(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginTransformColors</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColorsAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">TransformColorsAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColorsAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Transforms the colors of this <paramref name="bitmapData"/> asynchronously, using the specified <paramref name="transformFunction"/> delegate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmapData"/>. It must be thread-safe.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if <paramref name="transformFunction"/> returns colors
            that is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)"/> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Replaces every <paramref name="oldColor"/> occurrences to <paramref name="newColor"/> in the specified <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="oldColor">The original color to be replaced.</param>
            <param name="newColor">The new color to replace <paramref name="oldColor"/> with.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if <paramref name="newColor"/>
            is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginReplaceColor</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColorAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">ReplaceColorAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="newColor"/> has alpha, which cannot be represented by <paramref name="bitmapData"/>, then it will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.</para>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.ReplaceColor(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to replace every <paramref name="oldColor"/> occurrences to <paramref name="newColor"/> in the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="oldColor">The original color to be replaced.</param>
            <param name="newColor">The new color to replace <paramref name="oldColor"/> with.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if <paramref name="newColor"/>
            is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColorAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">ReplaceColorAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndReplaceColor(System.IAsyncResult)">EndReplaceColor</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">ReplaceColor</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndReplaceColor(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginReplaceColor</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColorAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">ReplaceColorAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColorAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Replaces every <paramref name="oldColor"/> occurrences to <paramref name="newColor"/> in the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="oldColor">The original color to be replaced.</param>
            <param name="newColor">The new color to replace <paramref name="oldColor"/> with.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if <paramref name="newColor"/>
            is not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">ReplaceColor</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Invert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Inverts the colors of the specified <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be inverted.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginInvert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginInvert</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.InvertAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">InvertAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Invert(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginInvert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to Invert the colors of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be inverted.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.InvertAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">InvertAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndInvert(System.IAsyncResult)">EndInvert</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Invert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">Invert</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndInvert(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginInvert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginInvert</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.InvertAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">InvertAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.InvertAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Inverts the colors of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be inverted.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Invert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">Invert</see> method for more details.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)">
            <summary>
            If possible, makes the background of this <paramref name="bitmapData"/> transparent, taking the bottom-left pixel as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as the bottom-left pixel will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">ReplaceColor</see> method internally.</para>
            <para>Similarly to the <see cref="M:System.Drawing.Bitmap.MakeTransparent">Bitmap.MakeTransparent</see> method, this one uses the bottom-left pixel to determine
            the background color, which must be completely opaque; otherwise, <paramref name="bitmapData"/> will not be changed.</para>
            <para>Unlike the <see cref="M:System.Drawing.Bitmap.MakeTransparent">Bitmap.MakeTransparent</see> method, this one preserves the original <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            If <paramref name="bitmapData"/> does not support transparency and cannot set <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> either, then every occurrence of the
            color of the bottom-left pixel will be changed to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            To make such bitmaps transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToTransparent</see> method instead,
            which returns a new instance with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.</para>
            <para>To force replacing even non-completely opaque pixels use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32})">TransformColors</see> method instead.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            If possible, makes the background of this <paramref name="bitmapData"/> transparent, using <paramref name="transparentColor"/> as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as <paramref name="transparentColor"/> will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.AsyncConfig)"/>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">ReplaceColor</see> method internally.</para>
            <para>Unlike the <see cref="M:System.Drawing.Bitmap.MakeTransparent(System.Drawing.Color)">Bitmap.MakeTransparent(Color)</see> method, this one preserves the original <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.
            If <paramref name="bitmapData"/> does not support transparency and cannot set <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> either, then every occurrence of the
            <paramref name="transparentColor"/> will be changed to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            To make such bitmaps transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)">ToTransparent</see> method instead,
            which returns a new instance with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>.</para>
            <para>To auto-detect the background color to be made transparent use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)"/> overload instead.</para>
            <note>Please note that unlike the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method, this one changes exactly one color shade without any tolerance.
            For any customization use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32})">TransformColors</see> method instead.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.AsyncConfig)">
            <summary>
            If possible, begins to make the background of this <paramref name="bitmapData"/> transparent asynchronously, taking the bottom-left pixel as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as the bottom-left pixel will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeTransparent(System.IAsyncResult)">EndMakeTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.AsyncConfig)">
            <summary>
            If possible, begins to make the background of this <paramref name="bitmapData"/> transparent asynchronously, using <paramref name="transparentColor"/> as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as <paramref name="transparentColor"/> will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeTransparent(System.IAsyncResult)">EndMakeTransparent</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToTransparent(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.AsyncConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeTransparent(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeTransparent">BeginMakeTransparent</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync">MakeTransparentAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)">
            <summary>
            If possible, makes the background of this <paramref name="bitmapData"/> transparent asynchronously, taking the bottom-left pixel as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as the bottom-left pixel will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparentAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)">
            <summary>
            If possible, makes the background of this <paramref name="bitmapData"/> transparent asynchronously, using <paramref name="transparentColor"/> as the background color.
            If the <paramref name="bitmapData"/> does not support transparency, then the pixels that have the same color as <paramref name="transparentColor"/> will be set
            to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> of <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make transparent.</param>
            <param name="transparentColor">Specifies the color to make transparent.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeTransparent(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32)"/> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToTransparentAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.TaskConfig)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Makes this <paramref name="bitmapData"/> opaque using the specified <paramref name="backColor"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make opaque.</param>
            <param name="backColor">Pixels with alpha in <paramref name="bitmapData"/> will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the specified color is ignored.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginMakeOpaque</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">MakeOpaqueAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.MakeOpaque(System.Drawing.Bitmap,System.Drawing.Color,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to make this <paramref name="bitmapData"/> opaque asynchronously using the specified <paramref name="backColor"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make opaque.</param>
            <param name="backColor">Pixels with alpha in <paramref name="bitmapData"/> will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the specified color is ignored.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">MakeOpaqueAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeOpaque(System.IAsyncResult)">EndMakeOpaque</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method for more details.</note>
            <remarks>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeOpaque(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginMakeOpaque</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">MakeOpaqueAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Makes this <paramref name="bitmapData"/> opaque asynchronously using the specified <paramref name="backColor"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make opaque.</param>
            <param name="backColor">Pixels with alpha in <paramref name="bitmapData"/> will be blended with this color.
            The <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property of the specified color is ignored.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmapData"/>
            has no exact representation with its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see> method for more details.</note>
            <remarks>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Makes this <paramref name="bitmapData"/> grayscale.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make grayscale.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if grayscale colors
            cannot be represented by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> or the current palette of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginMakeGrayscale</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">MakeGrayscaleAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmapData"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)">ToGrayscale</see> extension method, which always returns a bitmap data with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> format,
            or the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see> method with a grayscale
            quantizer (<see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see>, for example).</para>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.MakeGrayscale(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ToGrayscale(System.Drawing.Image)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to make this <paramref name="bitmapData"/> grayscale asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make grayscale.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if grayscale colors
            cannot be represented by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> or the current palette of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">MakeGrayscaleAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeGrayscale(System.IAsyncResult)">EndMakeGrayscale</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">MakeGrayscale</see> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndMakeGrayscale(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginMakeGrayscale</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">MakeGrayscaleAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Makes this <paramref name="bitmapData"/> grayscale asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to make grayscale.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if grayscale colors
            cannot be represented by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> or the current palette of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)">MakeGrayscale</see> method for more details.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
            <summary>
            Adjusts the brightness of the specified <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="brightness">A float value between -1 and 1, inclusive bounds. Positive values make the <paramref name="bitmapData"/> brighter,
            while negative values make it darker.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BeginAdjustBrightness</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightnessAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustBrightnessAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.AdjustBrightness(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">BitmapExtensions.AdjustBrightness</see> method for an example.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="brightness"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.AdjustBrightness(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to adjust the brightness of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="brightness">A float value between -1 and 1, inclusive bounds. Positive values make the <paramref name="bitmapData"/> brighter,
            while negative values make it darker.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightnessAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustBrightnessAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustBrightness(System.IAsyncResult)">EndAdjustBrightness</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustBrightness</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="brightness"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustBrightness(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BeginAdjustBrightness</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightnessAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustBrightnessAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightnessAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">
            <summary>
            Adjusts the brightness of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="brightness">A float value between -1 and 1, inclusive bounds. Positive values make the <paramref name="bitmapData"/> brighter,
            while negative values make it darker.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustBrightness</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="brightness"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
            <summary>
            Adjusts the contrast of the specified <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="contrast">A float value between -1 and 1, inclusive bounds. Positive values increase the contrast,
            while negative values decrease the it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BeginAdjustContrast</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrastAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustContrastAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.AdjustContrast(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">BitmapExtensions.AdjustContrast</see> method for an example.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="contrast"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.AdjustContrast(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to adjust the contrast of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="contrast">A float value between -1 and 1, inclusive bounds. Positive values increase the contrast,
            while negative values decrease the it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrastAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustContrastAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustContrast(System.IAsyncResult)">EndAdjustContrast</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustContrast</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="contrast"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustContrast(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BeginAdjustContrast</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrastAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustContrastAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrastAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">
            <summary>
            Adjusts the contrast of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="contrast">A float value between -1 and 1, inclusive bounds. Positive values increase the contrast,
            while negative values decrease the it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustContrast</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="contrast"/> is not between -1 and 1
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
            <summary>
            Adjusts the gamma correction of the specified <paramref name="bitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="gamma">A float value between 0 and 10, inclusive bounds. Values less than 1 decrease gamma correction,
            while values above 1 increase it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BeginAdjustGamma</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGammaAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustGammaAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method calls the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method internally. See
            the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)">TransformColors</see> method for more details.</para>
            <para>If <paramref name="bitmapData"/> has an indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries are tried to be transformed instead of the actual pixels in the first place (if it is supported by <paramref name="bitmapData"/>).
            To transform the colors of an indexed <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> without changing the palette specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>.
            Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            <note type="tip">See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.AdjustGamma(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">BitmapExtensions.AdjustGamma</see> method for an example.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="gamma"/> is not between 0 and 10
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.AdjustGamma(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to adjust the gamma correction of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="gamma">A float value between 0 and 10, inclusive bounds. Values less than 1 decrease gamma correction,
            while values above 1 increase it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGammaAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustGammaAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustGamma(System.IAsyncResult)">EndAdjustGamma</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustGamma</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="gamma"/> is not between 0 and 10
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndAdjustGamma(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BeginAdjustGamma</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGammaAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">AdjustGammaAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGammaAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">
            <summary>
            Adjusts the gamma correction of the specified <paramref name="bitmapData"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> to be transformed.</param>
            <param name="gamma">A float value between 0 and 10, inclusive bounds. Values less than 1 decrease gamma correction,
            while values above 1 increase it.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
            are not compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">AdjustGamma</see> method for more details.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="gamma"/> is not between 0 and 10
            <br/>-or-
            <br/><paramref name="channels"/> is out of the defined flags.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap">
            <summary>
            Represents the kernel map for resizing using a specific interpolation function.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.MaxDiameter">
            <summary>
            Gets the maximum diameter of the kernels.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.GetKernel(System.Int32)">
            <summary>
            Returns a <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel"/> for an index value between 0 and targetLength - 1.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.BuildKernel(System.Func{System.Single,System.Single},System.Int32,System.Int32)">
            <summary>
            Builds a <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel"/> for the row <paramref name="destRowIndex"/> (in <see cref="F:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.kernels"/>)
            referencing the data at row <paramref name="dataRowIndex"/> within <see cref="F:KGySoft.Drawing.Imaging.BitmapDataExtensions.KernelMap.data"/>, so the data reusable by other data rows.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel">
            <summary>
            Points to a collection of weights allocated in <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizingSessionInterpolated"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel.ConvolveWith(KGySoft.Collections.ArraySection{KGySoft.Drawing.Imaging.ColorF}@,System.Int32)">
            <summary>
            Computes the sum of colors weighted by weight values, pointed by this <see cref="T:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel"/> instance.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ResizeKernel.Slide(System.Int32)">
            <summary>
            Reinterprets the origin of the current kernel adjusting the destination column index
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <param name="disposeSource"><see langword="true"/>&#160;to dispose <paramref name="source"/> when the result is disposed; otherwise, <see langword="false"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
            <remarks>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance can be 0, indicating that the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see>
            method cannot be used. It can occur if the left edge of the clipping is not zero.</para>
            <para>Even if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the returned instance is a nonzero value it can happen that it is too low to access all columns
            by the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method. It can occur with indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the right edge of the clipping is not on byte boundary.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle)">
            <summary>
            Clips the specified <paramref name="source"/> using the specified <paramref name="clippingRegion"/>.
            Unlike the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> methods, this one returns a wrapper,
            providing access only to the specified region of the original <paramref name="source"/>.
            This overload does not dispose <paramref name="source"/> when the result is disposed.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clip(KGySoft.Drawing.Imaging.IWritableBitmapData,System.Drawing.Rectangle,System.Boolean)"/> overload for details.
            </summary>
            <param name="source">The source bitmap data to be clipped.</param>
            <param name="clippingRegion">A <see cref="T:System.Drawing.Rectangle"/> that specifies a region within the <paramref name="source"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> that provides access only to the specified region withing the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clippingRegion"/> has no overlapping region with source bounds.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Clears the content of the specified <paramref name="bitmapData"/> and fills it with the specified <paramref name="color"/>.
            <br/>This method is similar to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)">Graphics.Clear</see> except that this one supports any <see cref="T:System.Drawing.Imaging.PixelFormat"/> and also dithering.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> to be cleared.</param>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> that represents the desired result color of the <paramref name="bitmapData"/>.
            If it has transparency, which is not supported by <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/>, then the result might be either
            completely transparent (depends also on <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/>), or the color will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.
            </param>
            <param name="ditherer">The ditherer to be used for the clearing. Has no effect if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginClear</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ClearAsync(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">ClearAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Clear(System.Drawing.Bitmap,System.Drawing.Color,KGySoft.Drawing.Imaging.IDitherer,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to clear the content of the specified <paramref name="bitmapData"/> and fills it with the specified <paramref name="color"/> asynchronously.
            <br/>This method is similar to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)">Graphics.Clear</see> except that this one supports any <see cref="T:System.Drawing.Imaging.PixelFormat"/> and also dithering.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> to be cleared.</param>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> that represents the desired result color of the <paramref name="bitmapData"/>.
            If it has transparency, which is not supported by <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/>, then the result might be either
            completely transparent (depends also on <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/>), or the color will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.
            </param>
            <param name="ditherer">The ditherer to be used for the clearing. Has no effect if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ClearAsync(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">ClearAsync</see> method.</para>
            <para>To finish the operation and to get the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClear(System.IAsyncResult)">EndClear</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.EndClear(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BeginClear</see> method to complete.
            In .NET Framework 4.0 and above you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ClearAsync(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">ClearAsync</see> method instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ClearAsync(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Begins to clear the content of the specified <paramref name="bitmapData"/> and fills it with the specified <paramref name="color"/> asynchronously.
            <br/>This method is similar to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)">Graphics.Clear</see> except that this one supports any <see cref="T:System.Drawing.Imaging.PixelFormat"/> and also dithering.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> to be cleared.</param>
            <param name="color">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> that represents the desired result color of the <paramref name="bitmapData"/>.
            If it has transparency, which is not supported by <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/>, then the result might be either
            completely transparent (depends also on <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/>), or the color will be blended with <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/>.
            </param>
            <param name="ditherer">The ditherer to be used for the clearing. Has no effect if <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TrySetPalette(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Tries to the set the specified <paramref name="palette"/> for this <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> whose <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> should be set.</param>
            <param name="palette">A <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance to set.</param>
            <returns><see langword="true"/>&#160;<paramref name="palette"/> can be set as the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of this <paramref name="bitmapData"/>; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>Setting may fail if <paramref name="bitmapData"/>&#160;<see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> is not an indexed one,
            the number of entries in <paramref name="palette"/> is less than <see cref="P:KGySoft.Drawing.Imaging.Palette.Count"/> of the current <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/>,
            the number of entries in <paramref name="palette"/> is larger than the possible maximum number of colors of the current <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>,
            or when the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> does not support setting the palette.</para>
            <para>The <see cref="P:KGySoft.Drawing.Imaging.Palette.BackColor">Palette.BackColor</see> and <see cref="P:KGySoft.Drawing.Imaging.Palette.AlphaThreshold">Palette.AlphaThreshold</see> properties of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property will
            continue to return the same value as the original <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold"/> values of this <paramref name="bitmapData"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmapData"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IntExtensions">
            <summary>
            In fact, Int32, UInt32, BitVector32
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ScalingModeExtensions.SinC(System.Single)">
            <summary>
            Gets the sine cardinal of <paramref name="x"/>, which is Sin(PI * x) / (PI * x)
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IBitmapData">
            <summary>
            Represents the raw data of a bitmap. To create a managed instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class.
            To obtain a readable or writable instance for a native <see cref="T:System.Drawing.Bitmap"/> instance call the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadableBitmapData</see>,
            <see cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetWritableBitmapData</see> or <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> extension methods.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.Height">
            <summary>
            Gets the height of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance in pixels.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.Width">
            <summary>
            Gets the width of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance in pixels.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat">
            <summary>
            Gets the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>The value of this property determines how the raw underlying values should be interpreted if the pixels
            are accessed by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> or <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see>
            methods. Otherwise, in most cases using the members of the interfaces derived from the <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> and <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> interfaces
            work seamlessly.</para>
            <para>If this property returns an indexed format (<see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> or <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>),
            then the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property returns a non-<see langword="null"/>&#160;value.</para>
            <note>If this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance represents a native <see cref="T:System.Drawing.Bitmap"/>, then on some platforms this property can return a different <see cref="T:System.Drawing.Imaging.PixelFormat"/>
            from the <see cref="P:System.Drawing.Image.PixelFormat">Image.PixelFormat</see> property of the original image.
            <br/>For details and further information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.Palette">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance representing the colors of the owner <see cref="T:System.Drawing.Bitmap"/> if it has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/>,
            or <see langword="null"/>&#160;if the owner <see cref="T:System.Drawing.Bitmap"/> is not an indexed one. For indexed bitmaps the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>
            property returns <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> or <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize">
            <summary>
            Gets the size of a row in bytes, or zero, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance does not have an actual raw buffer to access.
            Otherwise, <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> is similar to <see cref="P:System.Drawing.Imaging.BitmapData.Stride">BitmapData.Stride</see> but this property never returns a negative value.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>This property can be useful when accessing the bitmap data by the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> or <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods.</para>
            <para>As <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> can represent also a managed bitmap data, row size is not guaranteed to be a multiple of 4.</para>
            <note>
            <para>This property can return 0 if the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance represents a bitmap data without actual raw data or represents a clipped
            region where the left edge of the clipping has an offset compared to the original bitmap data.</para>
            <para>Even if this property returns a nonzero value, it is possible that raw access does not cover the few last columns.
            This may occur in case of indexed <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/>s if the bitmap data is clipped and the right edge of the clipping does not fall at byte boundary.</para>
            </note>
            </remarks>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.BackColor">
            <summary>
            When accessing pixels of indexed bitmaps, or setting pixels of bitmaps without alpha support, gets the color of the background.
            For example, when setting color values with alpha, which are considered opaque, they will be blended with this color before setting the pixel.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> extension method for details and examples.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.AlphaThreshold">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> represents a bitmap with single bit alpha or with a palette that has a transparent color,
            then gets a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> property, under which the color is considered transparent. If 0,
            then the pixels to be set will never be transparent.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapData.IsDisposed">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance is disposed.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IBitmapDataRow">
            <summary>
            Represents a single row of the raw data of a <see cref="T:System.Drawing.Bitmap"/>. Reading or writing actual pixels is available via the derived interfaces of this type.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Index">
            <summary>
            Gets the index of the current row. Can fall between zero and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height">Height</see> of the owner <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> (exclusive upper bound).
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Width">
            <summary>
            Gets the width of the row in pixels.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Size">
            <summary>
            Gets the size of the row in bytes, or zero, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> instance does not have an actual raw buffer to access.
            <br/>See the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize">IBitmapData.RowSize</see> property for details.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IBitmapDataRow.MoveNextRow">
            <summary>
            If not already in the last row (<see cref="P:KGySoft.Drawing.Imaging.IBitmapDataRow.Index"/> is less than <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height">Height</see> of the owner <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/>),
            then advances the position of the current <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> instance so it points to the next row.
            <br/>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.
            </summary>
            <returns><see langword="true"/>, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> has been advanced to another row;
            <see langword="false"/>, if this <see cref="T:KGySoft.Drawing.Imaging.IBitmapDataRow"/> had already pointed to the last row before this method was called.</returns>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ICustomBitmapData.CreateCompatibleBitmapDataFactory">
            <summary>
            Gets a factory to create a compatible bitmap data of 1x1 size that can be used for quantizers.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ICustomBitmapDataRow">
            <summary>
            Represents a low-level custom accessor to a bitmap data row.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.BitmapData">
            <summary>
            Gets the corresponding <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> of this row.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ICustomBitmapDataRow.GetRefAs``1(System.Int32)">
            <summary>
            Gets a reference to a value interpreted as <typeparamref name="T"/> within the current row at the specified <paramref name="x"/> index.
            </summary>
            <typeparam name="T">The type of the value to return a reference for. Must be a value type without managed references.</typeparam>
            <param name="x">The x-coordinate of the value within the row to retrieve. The valid range depends on the size of <typeparamref name="T"/>.</param>
            <returns>A reference to a value interpreted as <typeparamref name="T"/> within the current row at the specified <paramref name="x"/> index.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.ICustomBitmapDataRow`1">
            <summary>
            Represents a low-level custom accessor to a bitmap data row.
            </summary>
            <typeparam name="T">The element type of the underlying custom buffer.</typeparam>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.ICustomBitmapDataRow`1.Item(System.Int32)">
            <summary>
            Gets a reference to the actual underlying buffer element at the specified index.
            </summary>
            <param name="index">The element index of the value withing the current row to obtain.</param>
            <returns>A reference to the actual underlying buffer element at the specified index.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IDitherer">
            <summary>
            Represents a ditherer that can be used to dither the result of a quantizing session.
            <br/>For built-in implementations see the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>,
            <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> classes.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IDitherer.InitializeReliesOnContent">
            <summary>
            Gets whether <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">Initialize</see> relies on the actual content of the source to be dithered.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>This property should return <see langword="true"/>, if <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">Initialize</see> method relies on the exact content to be dithered
            in order to make the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method work properly.</para>
            <para>If this property returns <see langword="false"/>, then <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">Initialize</see> will be called with an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            instance, whose <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> properties can be used but the actual content might be different
            from the one will be used when calling the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method.</para>
            <para>The return value of this property may affect the performance of some drawing operations where returning <see langword="true"/>&#160;forces the source and
            target images to be blended together before dithering the result, while returning <see langword="false"/>&#160;allows the ditherer to be initialized
            with the source image and let the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method to be called with colors that are blended on-the-fly during the dithering.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IDitheringSession"/> instance that can be used to dither the result of the specified <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/>
            applied to the specified <paramref name="source"/>.
            </summary>
            <param name="source">The dithering session to be initialized will be performed on the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</param>
            <param name="quantizingSession">The <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> to which the dithering should be applied.</param>
            <param name="asyncContext">Contains information for asynchronous processing about the current operation. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IDitheringSession"/> instance that can be used to dither the result of the specified <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/>
            applied to the specified <paramref name="source"/>.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IDitheringSession">
            <summary>
            Represents a disposable dithering session returned by the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">IDitherer.Initialize</see> method
            that is used to dither the result of a quantizing session for a specific <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> source.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer" />
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IDitheringSession.IsSequential">
            <summary>
            Gets whether this ditherer allows only sequential processing (line by line). Even returning <see langword="true"/>&#160;does
            not guarantee that every pixel will be queried. It just enforces that queried rows are processed sequentially.
            </summary>
            <value>
            If <see langword="true"/>, then the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method will be called sequentially for each queried pixels.
            If <see langword="false"/>, then the <see cref="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">GetDitheredColor</see> method can be called concurrently for any pixels.
            </value>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IDitheringSession.GetDitheredColor(KGySoft.Drawing.Imaging.Color32,System.Int32,System.Int32)">
            <summary>
            Gets the dithered color of the specified <paramref name="origColor"/> that may depend on the specified coordinates.
            The returned color should be quantized by the <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> passed to the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">IDitherer.Initialize</see> method,
            which was used to create this <see cref="T:KGySoft.Drawing.Imaging.IDitheringSession"/> instance.
            </summary>
            <param name="origColor">The original color to be dithered.</param>
            <param name="x">The x-coordinate of the pixel to be dithered represented by the specified <paramref name="origColor"/>.</param>
            <param name="y">The y-coordinate of the pixel to be dithered represented by the specified <paramref name="origColor"/>.</param>
            <returns>The dithered color of the specified <paramref name="origColor"/> that may depend on the specified coordinates.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IQuantizer">
            <summary>
            Represents a quantizer that can be used to reduce the number of colors of an image.
            <br/>For built-in implementations see the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> and <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> classes.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizer.PixelFormatHint">
            <summary>
            Gets a <see cref="T:System.Drawing.Imaging.PixelFormat"/> that is compatible with this <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/>.
            It is recommended to return the format with the lowest bits-per-pixel value that is still compatible with this instance.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizer.InitializeReliesOnContent">
            <summary>
            Gets whether <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">Initialize</see> relies on the actual content of the source to be quantized.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>This property should return <see langword="true"/>, if <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">Initialize</see> method relies on the exact content to be quantized
            in order to generate a palette and make the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> method work properly.</para>
            <para>If this property returns <see langword="false"/>, then <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">Initialize</see> will be called with an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            instance, whose <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/> and <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> properties can be used but the actual content might be different
            from the one will be used when calling the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> method.</para>
            <para>The return value of this property may affect the performance of some drawing operations where returning <see langword="true"/>&#160;forces the source and
            target images to be blended together before quantizing the result, while returning <see langword="false"/>&#160;allows the quantizer to be initialized
            with the source image and let the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> method to be called with colors that are blended on-the-fly during the quantization.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> instance that can be used to quantize the colors of the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.
            </summary>
            <param name="source">The quantizing session to be initialized will be performed on the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</param>
            <param name="asyncContext">Contains information for asynchronous processing about the current operation. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> instance that can be used to quantize the colors of the specified <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IQuantizingSession">
            <summary>
            Represents a disposable quantizing session returned by the <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">IQuantizer.Initialize</see> method
            that is used to quantize (reduce the colors) of a specific <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> source.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IQuantizer" />
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.Palette">
            <summary>
            Gets the palette containing the colors of the quantized result. Expected to be called if the result of the quantization
            is an indexed image and in that case should not contain more than 256 colors.
            If this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is not limited to use up to 256 colors, then this property can return <see langword="null"/>.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor">
            <summary>
            Gets the background color for this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/>.
            When the <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> is called with a color with alpha,
            which is considered opaque, then it will be blended with this color before quantizing.
            <br/>See also the <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> property for details.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold">
            <summary>
            If this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> can produce transparent pixels, then gets the alpha threshold value
            that can be used to determine whether a color with alpha should be considered transparent or should be blended with <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <remarks>
            <para>If this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> can produce transparent pixels, and <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> is called with a color,
            whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is lower than the threshold, then the returned color will be transparent.</para>
            <para>If this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> cannot produce transparent pixels, or <see cref="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">GetQuantizedColor</see> is called with a color,
            whose <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field is greater than or equal to the threshold, then the returned color will be will be blended with <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/> before quantizing.</para>
            <para>If <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> is 0, then the quantized color will never be transparent.</para>
            <para>If <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> is 255, then only fully opaque colors will not be considered transparent.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IQuantizingSession.GetQuantizedColor(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets the quantized color of the specified <paramref name="origColor"/>. If <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.Palette"/> property has non-<see langword="null"/>&#160;return value,
            then the result color must be a valid <see cref="T:KGySoft.Drawing.Imaging.Palette"/> entry.
            <br/>See the also <strong>Remarks</strong> section of the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.AlphaThreshold"/> property for details.
            </summary>
            <param name="origColor">The original color to be quantized.</param>
            <returns>The quantized color.</returns>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IQuantizingSessionInternal.IsGrayscale">
            <summary>
            Gets whether this <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> works with grayscale colors.
            Its value may help to optimize the processing in some cases but it is allowed to return always <see langword="false"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadableBitmapData">
            <summary>
            Represents a readable <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            To create an instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class or the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">BitmapExtensions.GetReadableBitmapData</see> extension method.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> instance representing the first row of the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            Subsequent rows can be accessed by calling the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRow.MoveNextRow">MoveNextRow</see> method on the returned instance
            while it returns <see langword="true"/>. Alternatively, you can use the <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)">indexer</see> to obtain any row.
            <br/>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.
            <br/>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified coordinates.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance that represents the color of the specified pixel.</returns>
            <remarks>
            <para>If multiple pixels need to be retrieved process the bitmap line by line for better performance.</para>
            <para>Line by line processing is also possible by obtaining the first row by the <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow"/> property,
            getting the pixels by the <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> members and then moving to the next line by the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRow.MoveNextRow">MoveNextRow</see> property.</para>
            <para>The returned value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:System.Drawing.Imaging.PixelFormat"/>. To access the actual <see cref="T:System.Drawing.Imaging.PixelFormat"/>-dependent raw value
            obtain a row and use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            <note>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.</note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/>.
            <br/>-or-
            <br/><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.FirstRow"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapData.Item(System.Int32)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow">
            <summary>
            Provides a fast read-only access to a single row of the actual data of a <see cref="T:System.Drawing.Bitmap"/>. The owner <see cref="T:System.Drawing.Bitmap"/> can have any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)">
            <summary>
            Gets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the color of the specified pixel.</returns>
            <remarks>
            <para>To return a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">GetColor</see> method but this member has a slightly better performance.</para>
            <para>The returned value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:System.Drawing.Imaging.PixelFormat"/>. To access the actual <see cref="T:System.Drawing.Imaging.PixelFormat"/>-dependent raw value
            use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            <note>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">
            <summary>
            Gets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance that represents the color of the specified pixel.</returns>
            <remarks>
            <para>If you don't really need to retrieve a 20 byte wide <see cref="T:System.Drawing.Color"/> structure (16 bytes on 32-bit targets), then you can use the
            <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)">indexer</see> for a slightly better performance, which returns a more compact 4-byte <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.</para>
            <para>The returned value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:System.Drawing.Imaging.PixelFormat"/>. To access the actual <see cref="T:System.Drawing.Imaging.PixelFormat"/>-dependent raw value
            use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> method.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)">
            <summary>
            If the owner <see cref="T:System.Drawing.Bitmap"/> is an indexed one, then gets the color index of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the color index to retrieve.</param>
            <returns>A palette index that represents the color of the specified pixel.</returns>
            <remarks>
            <para>This method can be used only if the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> returns an indexed format
            (which are <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> and <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>).
            Otherwise, this method throws an <see cref="T:System.InvalidOperationException"/>.</para>
            <para>To get the actual color of the pixel at the <paramref name="x"/> coordinate you can use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">GetColor</see> method,
            the <see cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)">indexer</see>, or you can call the <see cref="M:KGySoft.Drawing.Imaging.Palette.GetColor(System.Int32)">Palette.GetColor</see> method with the return value of this method
            on the <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance returned by the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> does not belong to a row of an indexed <see cref="T:System.Drawing.Bitmap"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">
             <summary>
             Gets the underlying raw value within the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> at the specified <paramref name="x"/> coordinate.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <typeparam name="T">The type of the value to return. Must be a value type without managed references.</typeparam>
             <param name="x">The x-coordinate of the value within the row to retrieve. The valid range depends on the size of <typeparamref name="T"/>.</param>
             <returns>The raw value within the current <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/> at the specified <paramref name="x"/> coordinate.</returns>
             <remarks>
             <para>This method returns the actual raw underlying data as arbitrary unmanaged value type (a value type is unmanaged if contains no managed references).
             <typeparamref name="T"/> can have any size so you using this method can access multiple pixels or individual color channels.</para>
             <para>To determine the row width in bytes use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</para>
             <para>To determine the actual pixel size use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</para>
             <note>Please note that on some non-Windows platforms the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat">IBitmapData.PixelFormat</see> property may return a different format than
             the <see cref="P:System.Drawing.Image.PixelFormat">Image.PixelFormat</see> property of the original <see cref="T:System.Drawing.Bitmap"/>.
             <br/>For details and further information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
             </remarks>
             <example>
             The following example demonstrates how to access the premultiplied color values of a <see cref="T:System.Drawing.Bitmap"/> with premultiplied pixel format:
             <code lang="C#"><![CDATA[
             using (Bitmap bmpPremultiplied = new Bitmap(1, 1, PixelFormat.Format32bppPArgb))
             using (IReadWriteBitmapData bitmapData = bmpPremultiplied.GetReadWriteBitmapData())
             {
                 // setting a white pixel with 50% alpha:
                 bitmapData.SetPixel(0, 0, Color.FromArgb(128, 255, 255, 255));
            
                 // reading the raw premultiplied color value:
                 Console.WriteLine(bitmapData[0].ReadRaw<Color32>(0)); // 80808080 [A=128; R=128; G=128; B=128]
            
                 // but reading it by the indexer (or by GetPixel/GetColor) transforms the color back:
                 Console.WriteLine(bitmapData[0][0]); // 80FFFFFF [A=128; R=255; G=255; B=255]
             }]]></code>
             <note type="tip">See also the example at the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">IWritableBitmapDataRow.WriteRaw</see> method.</note>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or the memory location of the value (considering the size of <typeparamref name="T"/>)
             at least partially exceeds the bounds of the current row.</exception>
             <seealso cref="P:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.Item(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData">
            <summary>
            Represents an <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance with read/write access.
            To create an instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class or the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">BitmapExtensions.GetReadWriteBitmapData</see> extension method.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.FirstRow">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/> instance representing the first row of the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            Subsequent rows can be accessed by calling the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRow.MoveNextRow">MoveNextRow</see> method on the returned instance
            while it returns <see langword="true"/>. Alternatively, you can use the <see cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.Item(System.Int32)">indexer</see> to obtain any row.
            <br/>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadWriteBitmapData.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.
            <br/>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.
            </summary>
            <param name="y">The y.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow">
            <summary>
            Provides a fast read-write access to a single row of the actual data of a <see cref="T:System.Drawing.Bitmap"/>. The owner <see cref="T:System.Drawing.Bitmap"/> can have any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow.Item(System.Int32)">
            <summary>
            Gets or sets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <value>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the color of the specified pixel.</value>
            <remarks>
            <para>To return a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)">GetColor</see> method but this member has a slightly better performance.</para>
            <para>To set the color from a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">SetColor</see> method but this member has a slightly better performance.</para>
            <para>The color value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:System.Drawing.Imaging.PixelFormat"/>. To access the actual <see cref="T:System.Drawing.Imaging.PixelFormat"/>-dependent raw data
            use the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">ReadRaw</see> and <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> methods.</para>
            <para>If the color to be set is not supported by owner <see cref="T:System.Drawing.Bitmap"/>, then it will be quantized to a supported color value.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            <note>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColor(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.GetColorIndex(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IWritableBitmapData">
            <summary>
            Represents a writable <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> instance.
            To create an instance use the <see cref="T:KGySoft.Drawing.Imaging.BitmapDataFactory"/> class or the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">BitmapExtensions.GetWritableBitmapData</see> extension method.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> instance representing the first row of the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            Subsequent rows can be accessed by calling the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRow.MoveNextRow">MoveNextRow</see> method on the returned instance
            while it returns <see langword="true"/>. Alternatively, you can use the <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)">indexer</see> to obtain any row.
            <br/>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.
            <br/>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.
            </summary>
            <param name="y">The y-coordinate of the row to obtain.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> representing the row of the specified <paramref name="y"/> coordinate in the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the pixel at the specified coordinates.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> structure that represents the color to assign to the specified pixel.</param>
            <remarks>
            <para>If multiple pixels need to be set process the bitmap line by line for better performance.</para>
            <para>Line by line processing is also possible by obtaining the first row by the <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow"/> property,
            setting the pixels by the <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> members and then moving to the next line by the <see cref="M:KGySoft.Drawing.Imaging.IBitmapDataRow.MoveNextRow">MoveNextRow</see> property.</para>
            <para>The <paramref name="color"/> argument represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:System.Drawing.Imaging.PixelFormat"/>. To access the actual <see cref="T:System.Drawing.Imaging.PixelFormat"/>-dependent raw value
            obtain a row and use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method.</para>
            <para>If the color to be set is not supported by owner <see cref="T:System.Drawing.Bitmap"/>, then it will be quantized to a supported color value.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            <note>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for an example.</note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/>.
            <br/>-or-
            <br/><paramref name="y"/> is less than zero or is greater than or equal to <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Height"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.FirstRow"/>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapData.Item(System.Int32)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow">
            <summary>
            Provides a fast write-only access to a single row of the actual data of a <see cref="T:System.Drawing.Bitmap"/>. The owner <see cref="T:System.Drawing.Bitmap"/> can have any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadableBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)">
            <summary>
            Sets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <value>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the color of the specified pixel.</value>
            <remarks>
            <para>To set the color from a <see cref="T:System.Drawing.Color"/> structure you can use also the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">SetColor</see> method but this member has a slightly better performance.</para>
            <para>The color value represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:System.Drawing.Imaging.PixelFormat"/>. To access the actual <see cref="T:System.Drawing.Imaging.PixelFormat"/>-dependent raw data
            use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method.</para>
            <para>If the color to be set is not supported by owner <see cref="T:System.Drawing.Bitmap"/>, then it will be quantized to a supported color value.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            <note>See the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for examples.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</exception>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> instance that represents the color of the specified pixel.</param>
            <remarks>
            <para>If you don't really need to set the pixel color from a 20 byte wide <see cref="T:System.Drawing.Color"/> structure (16 bytes on 32-bit targets), then you can use the
            <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)">indexer</see> for a slightly better performance, which uses the more compact 4-byte <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.</para>
            <para>The specified <paramref name="color"/> represents a straight (non-premultiplied) color with gamma correction γ = 2.2,
            regardless of the underlying <see cref="T:System.Drawing.Imaging.PixelFormat"/>. To access the actual <see cref="T:System.Drawing.Imaging.PixelFormat"/>-dependent raw data
            use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> method.</para>
            <para>If the color to be set is not supported by owner <see cref="T:System.Drawing.Bitmap"/>, then it will be quantized to a supported color value.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)">
            <summary>
            If the owner <see cref="T:System.Drawing.Bitmap"/> is an indexed one, then sets the color index of the pixel in the current row at the specified <paramref name="x"/> coordinate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="x">The x-coordinate of the color index to set.</param>
            <param name="colorIndex">A palette index that represents the color to be set.</param>
            <remarks>
            <para>This method can be used only if the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> returns an indexed format
            (which are <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> and <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>).
            Otherwise, this method throws an <see cref="T:System.InvalidOperationException"/>.</para>
            <para>To set the actual color of the pixel at the <paramref name="x"/> coordinate you can use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">SetColor</see> method or
            the <see cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)">indexer</see>.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or is greater than or equal to the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Width"/> of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> does not belong to a row of an indexed <see cref="T:System.Drawing.Bitmap"/>.</exception>
            <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">
             <summary>
             Sets the underlying raw value within the current <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapDataRow"/> at the specified <paramref name="x"/> coordinate.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <typeparam name="T">The type of the value to write. Must be a value type without managed references.</typeparam>
             <param name="x">The x-coordinate of the value within the row to write. The valid range depends on the size of <typeparamref name="T"/>.</param>
             <param name="data">The raw value to write.</param>
             <remarks>
             <para>This method writes the actual raw underlying data. <typeparamref name="T"/> can have any size so you by using this method you can write multiple pixels as well as individual color channels.</para>
             <para>To determine the row width in bytes use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance.</para>
             <para>To determine the actual pixel size use the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> property of the parent <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instance.</para>
             <note>Please note that on some non-Windows platforms the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat">IBitmapData.PixelFormat</see> property may return a different format than
             the <see cref="P:System.Drawing.Image.PixelFormat">Image.PixelFormat</see> property of the original <see cref="T:System.Drawing.Bitmap"/>.
             <br/>For details and further information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
             </remarks>
             <example>
             The following example demonstrates how to write multiple pixels by a single <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">WriteRaw</see> call:
             <code lang="C#"><![CDATA[
             using (Bitmap bmp4bppIndexed = new Bitmap(8, 1, PixelFormat.Format4bppIndexed))
             using (IReadWriteBitmapData bitmapData = bmp4bppIndexed.GetReadWriteBitmapData())
             {
                 IReadWriteBitmapDataRow row = bitmapData[0];
            
                 // Writing as uint writes 8 pixels at once in case of a 4 BPP indexed bitmap:
                 row.WriteRaw<uint>(0, 0x12345678);
            
                 // because of little endianness and 4 BPP pixel order the color indices will be printed
                 // in the following order: 7, 8, 5, 6, 3, 4, 1, 2
                 for (int x = 0; x < bitmapData.Width; x++)
                     Console.WriteLine(row.GetColorIndex(x));
             }]]></code>
             <note type="tip">See also the example at the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">IReadableBitmapDataRow.ReadRaw</see> method.</note>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is less than zero or the memory location of the value (considering the size of <typeparamref name="T"/>)
             at least partially exceeds the bounds of the current row.</exception>
             <seealso cref="P:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.Item(System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColorIndex(System.Int32,System.Int32)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)"/>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer">
            <summary>
            Represents a quantizer that can generate an optimized set of colors best matching to the original image.
            Use the static methods to retrieve an instance. For using predefined colors see the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section for details and results comparison.
            </summary>
            <remarks>
            <para>The <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class can be used to reduce colors of a <see cref="T:System.Drawing.Bitmap"/> using a
            palette of up to 256 colors where the palette entries are optimized for the quantized image.</para>
            <para>This class supports palette optimization by three different algorithms (see the
            <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see>, <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> and <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> methods)</para>
            <para>The following table compares the algorithms supported by the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class:
            <list type="table">
            <listheader><term></term><term><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see></term><term><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see></term><term><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see></term></listheader>
            <item>
            <term><strong>Speed</strong></term>
            <term>Slower than the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm but faster than <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see>.</term>
            <term>This is the slowest one of the three algorithms.</term>
            <term>This is the fastest one of the three algorithms (still much slower though than the quantizers of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class).</term>
            </item>
            <item>
            <term><strong>Memory consumption<sup>*</sup></strong></term>
            <term>Generating the palette may consume quite a large amount of memory but it also depends on the number of different colors
            of the source image and the requested color count.</term>
            <term>Generating the palette may consume quite a large amount of memory but it also depends on the number of different colors
            of the source image and the requested color count.</term>
            <term>Quite large memory consumption even if the source has few colors and the requested color count is small.</term>
            </item>
            <item>
            <term><strong>Quality</strong></term>
            <term><list type="bullet">
            <item>Usually poorer quality for smaller palettes (below 16 colors).</item>
            <item>Banding may appear in images with large low-frequency areas (eg. sky or water in photos).</item>
            <item>Balanced quality for larger palettes and photo-like images.</item>
            </list></term>
            <term><list type="bullet">
            <item>Usually very good quality even for smaller palettes.</item>t
            <item>Excellent, nearly banding-free results with images with large low-frequency areas (eg. sky or water in photos).</item>
            <item>May provide a slightly poorer quality for small areas with unique colors (eg. a smaller human face in a large photo).</item>
            </list></term>
            <term><list type="bullet">
            <item>Usually very good quality even for smaller palettes.</item>
            <item>Banding may appear in images with large low-frequency areas (eg. sky or water in photos), though not as heavily as in case of the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm
            (and it can be blended by dithering anyway). The banding may appear even if the image uses just a few tones because <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s
            algorithm generates colors from the RGB555 color space (which uses 32 shades of each color channels).
            </item>
            <item>Very good quality for photo-like images, especially if the image has no homogeneous low-frequency areas.</item>
            </list></term>
            </item>
            </list>
            <note>
            <para><sup>*</sup>Memory consumption mentioned in the table affects palette generation only.
            That occurs when the <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">IQuantizer.Initialize</see> method of an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance
            is called. As soon as this method returns with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> instance, the memory mentioned in the table can be reclaimed.</para>
            <para>On the other hand, the <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> can also consume a large amount of memory during the quantization
            because its <see cref="T:KGySoft.Drawing.Imaging.Palette"/> caches the quantization results of the source image pixels, though this caching does not
            depend on the chosen algorithm and can also be reclaimed when the <see cref="T:KGySoft.Drawing.Imaging.IQuantizingSession"/> is disposed.</para>
            <para>So keeping a reference to an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> consumes almost no memory when there is no active quantization session in progress.</para>
            </note>
            </para>
            <para>The following table compares the results of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instances returned by the
            <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see>, <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> and <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see> methods.
            <note>For better comparison none of the images are dithered in the examples, though the visual quality can be improved by using dithering.
            See the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/>
            classes for some built-in <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementations.</note>
            <list type="table">
            <listheader><term>Original image</term><term>Quantized image</term></listheader>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
            <br/>Color hues with alpha gradient</para></div></term>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/AlphaGradientOctree256Silver.gif" alt="Color hues quantized by Octree algorithm using 256 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm, 256 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/AlphaGradientMedianCut256Silver.gif" alt="Color hues quantized by Median Cut algorithm using 256 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> algorithm, 256 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/AlphaGradientWu256Silver.gif" alt="Color hues quantized by Wu's algorithm using 256 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm, 256 colors, silver background, zero alpha threshold</para>
            </div></term>
            </item>
            <item>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/Information256.png" alt="Information icon with transparent background"/>
            <br/>Information icon with transparency</para></div></term>
            <term><div style="text-align:center;width:512px">
            <para><img src="../Help/Images/InformationOctree4Silver.gif" alt="Information icon quantized by Octree algorithm using 4 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm, 4 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/InformationMedianCut4Silver.gif" alt="Information icon quantized by Median Cut algorithm using 4 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> algorithm, 4 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/InformationWu4Silver.gif" alt="Information icon quantized by Wu's algorithm using 4 colors, silver background, zero alpha threshold"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm, 4 colors, silver background, zero alpha threshold</para>
            <para><img src="../Help/Images/InformationOctree256Black.gif" alt="Information icon quantized by Octree algorithm using 256 colors, black background, alpha threshold = 128"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">Octree</see> algorithm, 256 colors, black background, alpha threshold = 128. Banding appeared in the result.</para>
            <para><img src="../Help/Images/InformationMedianCut256Black.gif" alt="Information icon quantized by Median Cut algorithm using 256 colors, black background, alpha threshold = 128"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">MedianCut</see> algorithm, 256 colors, black background, alpha threshold = 128. Practically there is no banding in the result.</para>
            <para><img src="../Help/Images/InformationWu256Black.gif" alt="Information icon quantized by Wu's algorithm using 256 colors, black background, alpha threshold = 128"/>
            <br/><see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">Wu</see>'s algorithm, 256 colors, black background, alpha threshold = 128. A slight banding can be observed,
            as if the image was quantized by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.Argb1555</see> quantizer (see the details in the comparison table above).</para>
            </div></term>
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:KGySoft.Drawing.Imaging.IQuantizer"/>
            <seealso cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.PixelFormatHint">
            <summary>
            Gets a <see cref="T:System.Drawing.Imaging.PixelFormat"/>, which is compatible with this <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Octree quantizing algorithm.
             <br/>See the <strong>Examples</strong> section for an example,
             and the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> for details and results comparison with the other algorithms.
             </summary>
             <param name="maxColors">The upper limit of generated colors. Must be between 2 and 256, inclusive bounds. This parameter is optional.
             <br/>Default value: <c>256</c>.</param>
             <param name="backColor">Colors with alpha above the <paramref name="alphaThreshold"/> will be blended with this color before quantizing.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Octree quantizing algorithm.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxColors"/> must be between 2 and 256, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             Bitmap bmpOriginal = Icons.Shield.ExtractBitmap(new Size(256, 256));
             bmpOriginal.SaveAsPng(@"c:\temp\original.png");
            
             IQuantizer quantizer = OptimizedPaletteQuantizer.Octree(256);
             Bitmap bmpConverted = bmpOriginal.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer);
             bmpConverted.SaveAsGif(@"c:\temp\converted.gif");]]></code>
             <para>The example above produces the following result:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/></term></item>
             <item><term><c>converted.gif</c></term><term><img src="../Help/Images/ShieldOctree256Black.gif" alt="Shield icon quantized to 256 colors using the Octree algorithm"/></term></item>
             </list></para>
             <note type="tip">For more image examples and side-by-side comparison with the other algorithms see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</note>
             </example>
             <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Median Cut quantizing algorithm.
             <br/>See the <strong>Examples</strong> section for an example,
             and the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> for details and results comparison with the other algorithms.
             </summary>
             <param name="maxColors">The upper limit of generated colors. Must be between 2 and 256, inclusive bounds. This parameter is optional.
             <br/>Default value: <c>256</c>.</param>
             <param name="backColor">Colors with alpha above the <paramref name="alphaThreshold"/> will be blended with this color before quantizing.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using the Median Cut quantizing algorithm.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxColors"/> must be between 2 and 256, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             Bitmap bmpOriginal = Icons.Shield.ExtractBitmap(new Size(256, 256));
             bmpOriginal.SaveAsPng(@"c:\temp\original.png");
            
             IQuantizer quantizer = OptimizedPaletteQuantizer.MedianCut(256);
             Bitmap bmpConverted = bmpOriginal.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer);
             bmpConverted.SaveAsGif(@"c:\temp\converted.gif");]]></code>
             <para>The example above produces the following result:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/></term></item>
             <item><term><c>converted.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256Black.gif" alt="Shield icon quantized to 256 colors using the Median Cut algorithm"/></term></item>
             </list></para>
             <note type="tip">For more image examples and side-by-side comparison with the other algorithms see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</note>
             </example>
             <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image using Xiaolin Wu's quantizing algorithm.
             <br/>See the <strong>Examples</strong> section for an example,
             and the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> for details and results comparison with the other algorithms.
             </summary>
             <param name="maxColors">The upper limit of generated colors. Must be between 2 and 256, inclusive bounds. This parameter is optional.
             <br/>Default value: <c>256</c>.</param>
             <param name="backColor">Colors with alpha above the <paramref name="alphaThreshold"/> will be blended with this color before quantizing.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> instance that quantizes colors of an image by Xiaolin Wu's quantizing algorithm.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxColors"/> must be between 2 and 256, inclusive bounds.</exception>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             Bitmap bmpOriginal = Icons.Shield.ExtractBitmap(new Size(256, 256));
             bmpOriginal.SaveAsPng(@"c:\temp\original.png");
            
             IQuantizer quantizer = OptimizedPaletteQuantizer.Wu(256);
             Bitmap bmpConverted = bmpOriginal.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer);
             bmpConverted.SaveAsGif(@"c:\temp\converted.gif");]]></code>
             <para>The example above produces the following result:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/></term></item>
             <item><term><c>converted.gif</c></term><term><img src="../Help/Images/ShieldWu256Black.gif" alt="Shield icon quantized to 256 colors by Wu's algorithm"/></term></item>
             </list></para>
             <note type="tip">For more image examples and side-by-side comparison with the other algorithms see the <strong>Remarks</strong> section of the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</note>
             </example>
             <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Octree(System.Int32,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.MedianCut(System.Int32,System.Drawing.Color,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.ConfigureBitLevel(System.Nullable{System.Int32})">
            <summary>
            Configures the bit level per color channel to be used while optimizing the palette.
            If the input image is a monochromatic one, then determines the bit depth of the result.
            Affects the quality, speed and memory usage.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitLevel">Specifies the desired bit level. If <see langword="null"/>, then the value is automatically set by the chosen algorithm.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bitLevel"/> must be either <see langword="null"/>, or between 1 and 8.</exception>
            <remarks>
            TODO: memory usage, default values, effect for each quantizers
            </remarks>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer">
            <summary>
            Credit to Xiaolin Wu's Color Quantizer published at https://www.ece.mcmaster.ca/~xwu/cq.c
            This quantizer is mainly based on his code.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Collections.Array3D{System.Int64}@)">
            <summary>
            Computes the sum over a box of any given statistic.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Collections.Array3D{System.Single}@)">
            <summary>
            Computes the sum over a box of any given statistic (floating point version).
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Bottom(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Direction,KGySoft.Collections.Array3D{System.Int64}@)">
            <summary>
            Computes part of <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Collections.Array3D{System.Int64}@)"/> that doesn't depend on <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.RMax"/>, <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.GMax"/>
            or <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.BMax"/>, depending on <paramref name="dir"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Top(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Direction,System.Int32,KGySoft.Collections.Array3D{System.Int64}@)">
            <summary>
            Computes remainder of <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.Volume(KGySoft.Collections.Array3D{System.Int64}@)"/>, substituting <paramref name="pos"/>
            for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.RMax"/>, <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.GMax"/> or <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box.BMax"/>, depending on <paramref name="dir"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.sqrTable">
            <summary>
            Just a lookup table for squared values between 0..255
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2">
            <summary>
            The squared moment values of color RGB values.
            After building the histogram by <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> an element of this array can be interpreted as
            m2[r, g, b] = sum over voxel of c^2*P(c)
            and after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.HistogramToMoments"/> it contains cumulative moments.
            The strictly taken Bernoulli probability is actually multiplied by image size.
            but it does not matter here.
            Effective histogram elements are in 1..<see cref="P:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.HistSize"/> along each axis,
            element 0 is just for base or marginal value.
            Values are floats just because of the possible big ranges due to squared values.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.wt">
            <summary>
            The counts of voxels of the 3D color cubes in each position.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of P(c)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.mr">
            <summary>
            The moment values of red color components.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of r*P(c)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.mg">
            <summary>
            The moment values of green color components.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of g*P(c)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.mb">
            <summary>
            The moment values of green color components.
            The same applies as for <see cref="F:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.m2"/> except that after <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.AddColor(KGySoft.Drawing.Imaging.Color32)"/> values are interpreted as
            wt[r, g, b] = sum over voxel of b*P(c)
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.HistogramToMoments">
            <summary>
            Computing cumulative moments from the histogram.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Var(KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.WuQuantizer.Box)">
            <summary>
            Compute the weighted variance of a box.
            Note: as with the raw statistics, this is actually the variance multiplied by image size
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer">
            <summary>
            Represents a quantizer with predefined set of colors. Use the static members to retrieve an instance.
            For using optimized colors for a specific source image see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of the static methods of this class for details and image examples.
            </summary>
            <seealso cref="T:KGySoft.Drawing.Imaging.IQuantizer" />
            <seealso cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>
            <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)"/>
        </member>
        <member name="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.PixelFormatHint">
            <summary>
            Gets a <see cref="T:System.Drawing.Imaging.PixelFormat"/> that is compatible with this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance.
            If this <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> was not initialized with custom color mapping logic,
            then this is the possible lowest bits-per-pixel value format.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb8888(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to the 32-bit ARGB color space.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Determines the <see cref="P:KGySoft.Drawing.Imaging.IQuantizingSession.BackColor"/> property of the returned quantizer.
             Considering that this quantizer can return alpha colors it has effect only when the returned quantizer is used with
             a ditherer that does not support partial transparency.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color
             is considered completely transparent. If 0, then the quantized colors will preserve their original alpha value. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to the 32-bit ARGB color space.</returns>
             <remarks>
             <para>If <paramref name="alphaThreshold"/> is zero, then the returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance is practically just a pass-through filter in the 32-bit color space
             and it is effective only for some bitmap data operations (eg. <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Clone</see>),
             which could possibly preserve wide color information (<see cref="T:System.Drawing.Imaging.PixelFormat"/>s with 48/64 bpp) without specifying a quantizer.</para>
             <para>If <paramref name="alphaThreshold"/> is not zero, then every partially transparent pixel with lower <see cref="P:System.Drawing.Color.A">Color.A</see> value than the threshold will turn completely transparent.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToArgb8888(Bitmap source, Color backColor = default,
                 byte alphaThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Argb8888(backColor, alphaThreshold);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format32bppArgb, quantizer, ditherer);
            
                 // b.) when converting to Format32bppArgb format without dithering, this produces the same result:
                 if (ditherer == null && alphaThreshold == 0)
                     return source.ConvertPixelFormat(PixelFormat.Format32bppArgb);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientArgb8888BlackA128.png" alt="Color hues with ARGB8888 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). The top-half of the image preserved the original transparency,
             while bottom half turned completely transparent. Without dithering the back color is irrelevant.</para>
             <para><img src="../Help/Images/AlphaGradientArgb8888SilverA1.png" alt="Color hues with ARGB8888 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Only the bottom line is completely transparent, otherwise the image preserved its original transparency,
             so the result is practically the same as the original image. Without dithering the back color is irrelevant.</para>
             <para><img src="../Help/Images/AlphaGradientArgb8888SilverDitheredA1.png" alt="Color hues with ARGB8888 pixel format, silver background, alpha threshold = 1, using Bayer 8x8 ordered dithering"/>
             <br/>Silver background, alpha threshold = 1, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering.
             As dithering does not support partial transparency only the bottom line is transparent, otherwise the image was blended with back color.
             No dithering pattern appeared in the result due to the auto <see cref="M:KGySoft.Drawing.Imaging.OrderedDitherer.ConfigureStrength(System.Single)">strength</see> calibration.
             This also demonstrates why dithering is practically useless for true color results.</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldArgb8888lackA128.png" alt="Shield icon with ARGB8888 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). Without dithering the back color is irrelevant but pixels with alpha &lt; 128 turned completely transparent.</para>
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with ARGB8888 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Practically the same as the original image. Without dithering the back color is irrelevant.</para>
             <para><img src="../Help/Images/ShieldArgb8888SilverA1Dithered.png" alt="Shield icon with ARGB8888 pixel format, silver background, alpha threshold = 1, using Floyd-Steinberg dithering"/>
             <br/>Silver background, alpha threshold = 1, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering.
             As dithering does not support partial transparency alpha pixels were blended with back color. No dithering pattern appeared in the result as there was no quantization error during the process.
             This also demonstrates why dithering is practically useless for true color results.</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb888(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 24-bit ones where each color component is encoded in 8 bits.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 24-bit ones where each color component is encoded in 8 bits.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256<sup>3</sup> (16,777,216) colors.
             It practically just removes transparency and does not change colors without alpha.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToRgb888(Bitmap source, Color backColor = default)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb888(backColor);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format24bppRgb, quantizer);
            
                 // b.) when converting to Format24bppRgb format, this produces the same result:
                 return source.ConvertPixelFormat(PixelFormat.Format24bppRgb, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientRgb888Black.png" alt="Color hues with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/AlphaGradientRgb888Silver.png" alt="Color hues with silver background"/>
             <br/>Silver background</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldRgb888Black.png" alt="Shield icon with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/ShieldRgb888Silver.png" alt="Shield icon with silver background"/>
             <br/>Silver background</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where red,
             green and blue components are encoded in 5, 6 and 5 bits, respectively.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where red,
             green and blue components are encoded in 5, 6 and 5 bits, respectively.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 65,536 colors.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/> pixel format.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToRgb565(Bitmap source, Color backColor = default, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb565(backColor);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format16bppRgb565, quantizer, ditherer);
            
                 // b.) when converting to Format16bppRgb565 format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.ConvertPixelFormat(PixelFormat.Format16bppRgb565, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientRgb565Black.png" alt="Color hues with RGB565 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientRgb565Silver.png" alt="Color hues with RGB565 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientRgb565SilverDithered.png" alt="Color hues with RGB565 pixel format, silver background and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldRgb565Black.png" alt="Shield icon with RGB565 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldRgb565Silver.png" alt="Shield icon with RGB565 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldRgb565SilverDithered.png" alt="Shield icon with RGB565 pixel format, silver background and Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb555(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where each color component is encoded in 5 bits.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where each color component is encoded in 5 bits.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 32,768 colors.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/> pixel format.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToRgb555(Bitmap source, Color backColor = default, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb555(backColor);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format16bppRgb555, quantizer, ditherer);
            
                 // b.) when converting to Format16bppRgb555 format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.ConvertPixelFormat(PixelFormat.Format16bppRgb555, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientRgb555Black.png" alt="Color hues with RGB555 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientRgb555Silver.png" alt="Color hues with RGB555 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientRgb555SilverDithered.png" alt="Color hues with RGB555 pixel format, silver background and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldRgb555Black.png" alt="Shield icon with RGB555 pixel format and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldRgb555Silver.png" alt="Shield icon with RGB555 pixel format and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldRgb555SilverDithered.png" alt="Shield icon with RGB555 pixel format, silver background and Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where alpha, red,
             green and blue components are encoded in 1, 5, 5 and 5 bits, respectively.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency), whose <see cref="P:System.Drawing.Color.A">Color.A</see> property
             is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 16-bit ones where each color component is encoded in 5 bits.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 32,768 colors, and a transparent color.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/> pixel format.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToArgb1555(Bitmap source, Color backColor = default,
                 byte alphaThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Argb1555(backColor, alphaThreshold);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format16bppArgb1555, quantizer, ditherer);
            
                 // b.) when converting to Format16bppArgb1555 format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.ConvertPixelFormat(PixelFormat.Format16bppArgb1555, backColor, alphaThreshold);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientArgb1555BlackA128.png" alt="Color hues with ARGB1555 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). The bottom half of the image is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientArgb1555SilverA1.png" alt="Color hues with ARGB1555 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Only the bottom line is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientArgb1555SilverDithered.png" alt="Color hues with ARGB1555 pixel format, silver background, default alpha threshold and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, default alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering. The bottom half of the image is transparent.</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldArgb1555BlackA128.png" alt="Shield icon with ARGB1555 pixel format, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128)</para>
             <para><img src="../Help/Images/ShieldArgb1555SilverA1.png" alt="Shield icon with ARGB1555 pixel format, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1</para>
             <para><img src="../Help/Images/ShieldArgb1555SilverA128Dithered.png" alt="Shield icon with ARGB1555 pixel format, silver background, default alpha threshold and Floyd-Steinberg dithering"/>
             <br/>Silver background, default alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb332(System.Drawing.Color,System.Boolean)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit ones where red,
             green and blue components are encoded in 3, 3 and 2 bits, respectively.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="directMapping"><see langword="true"/>&#160;to map any color directly to an index instead of searching for a nearest color,
             which is very fast but without dithering may end up in a noticeably poorer result and higher contrast;
             <see langword="false"/>&#160;to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit ones where red,
             green and blue components are encoded in 3, 3 and 2 bits, respectively.</returns>
             <remarks>
             <para>If <paramref name="directMapping"/> is <see langword="true"/>, then the result of the quantization may have a higher contrast than without direct color mapping,
             though this can be compensated if the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>. Other ditherers preserve the effect of the <paramref name="directMapping"/> parameter.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256 colors.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/> pixel format.</para>
             <para>The palette of this quantizer does not contain the transparent color.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToRgb332(Bitmap source, Color backColor = default, bool directMapping = false, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Rgb332(backColor, directMapping);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientRgb332Black.gif" alt="Color hues with RGB332 palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (black background, nearest color lookup)</para>
             <para><img src="../Help/Images/AlphaGradientRgb332Silver.gif" alt="Color hues with RGB332 palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/AlphaGradientRgb332SilverDM.gif" alt="Color hues with RGB332 palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/AlphaGradientRgb332SilverDMDitheredB8.gif" alt="Color hues with RGB332 palette, silver background, using direct color mapping and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesRgb332.gif" alt="Grayscale color shades with RGB332 palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/GrayShadesRgb332Direct.gif" alt="Grayscale color shades with RGB332 palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/GrayShadesRgb332DitheredB8.gif" alt="Grayscale color shades with RGB332 palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
             <para><img src="../Help/Images/GrayShadesRgb332DirectDitheredB8.gif" alt="Grayscale color shades with RGB332 palette, using direct color mapping and Bayer 8x8 ordered dithering"/>
             <br/>Direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldRgb332Black.gif" alt="Shield icon with RGB332 palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (nearest color lookup)</para>
             <para><img src="../Help/Images/ShieldRgb332Silver.gif" alt="Shield icon with RGB332 palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/ShieldRgb332SilverDM.gif" alt="Shield icon with RGB332 palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/ShieldRgb332SilverDMDithered.gif" alt="Shield icon with RGB332 palette, silver background, using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Lena.png" alt="Test image &quot;Lena&quot;"/>
             <br/>Original test image "Lena"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/LenaRgb332.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/LenaRgb332DM.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/LenaRgb332DMFloydSteinberg.gif" alt="Test image &quot;Lena&quot; with RGB332 palette using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.Palette.Rgb332(KGySoft.Drawing.Imaging.Color32,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit grayscale ones of 256 shades.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 8-bit grayscale ones.</returns>
             <remarks>
             <para>The returned quantizer uses direct mapping to grayscale colors based on human perception, which makes quantization very fast while it is very accurate at the same time.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256 possible shades of gray.</para>
             <para>The palette of this quantizer does not contain the transparent color. To make an image grayscale with transparency you can use the
             <see cref="M:KGySoft.Drawing.ImageExtensions.ToGrayscale(System.Drawing.Image)">ToGrayscale</see> and <see cref="M:KGySoft.Drawing.BitmapExtensions.MakeGrayscale(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)">MakeGrayscale</see> extension methods.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/> pixel format.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToGrayscale(Bitmap source, Color backColor = default)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Grayscale(backColor);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer);
                 
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientGray8bppBlack.gif" alt="Grayscale color hues with 8 BPP grayscale palette and black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/AlphaGradientGray8bppSilver.gif" alt="Graayscale color hues with 8 BPP grayscale palette and silver background"/>
             <br/>Silver background</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldGray8bppBlack.gif" alt="Shield icon with 8 BPP grayscale palette and black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/ShieldGray8bppSilver.gif" alt="Shield icon with 8 BPP grayscale palette and silver background"/>
             <br/>Silver background</para></div></term>
             </item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.Palette.Grayscale256(KGySoft.Drawing.Imaging.Color32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale16(System.Drawing.Color,System.Boolean)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 4-bit grayscale ones of 16 shades.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="directMapping"><see langword="true"/>&#160;to map any color directly to an index instead of searching for a nearest color,
             which is very fast but may end up in a result of a bit higher contrast than the original image;
             <see langword="false"/>&#160;to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 4-bit grayscale ones.</returns>
             <remarks>
             <para>If <paramref name="directMapping"/> is <see langword="true"/>, then the result of the quantization may have a higher contrast than without direct color mapping,
             though this can be compensated if the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>. Other ditherers preserve the effect of the <paramref name="directMapping"/> parameter.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 16 possible shades of gray.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> pixel format.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToGrayscale16(Bitmap source, Color backColor = default, bool directMapping = false, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Grayscale16(backColor, directMapping);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format4bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientGray4bppBlack.gif" alt="Color hues with 4 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (black background, nearest color lookup)</para>
             <para><img src="../Help/Images/AlphaGradientGray4bppSilver.gif" alt="Color hues with 4 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/AlphaGradientGray4bppSilverDirect.gif" alt="Color hues with 4 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/AlphaGradientGray4bppSilverDitheredB8.gif" alt="Color hues with 4 BPP grayscale palette, silver background, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades4bpp.gif" alt="Grayscale color shades with 4 BPP grayscale palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/GrayShades4bppDirect.gif" alt="Grayscale color shades with 2 BPP grayscale palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/GrayShades4bppDitheredB8.gif" alt="Grayscale color shades with 4 BPP grayscale palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldGray4bppBlack.gif" alt="Shield icon with 4 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (nearest color lookup)</para>
             <para><img src="../Help/Images/ShieldGray4bppSilver.gif" alt="Shield icon with 4 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/ShieldGray4bppSilverDirect.gif" alt="Shield icon with 4 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/ShieldGray4bppSilverDirectDitheredFS.gif" alt="Shield icon with 4 BPP grayscale palette, silver background, using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.Palette.Grayscale16(KGySoft.Drawing.Imaging.Color32,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale4(System.Drawing.Color,System.Boolean)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 2-bit grayscale ones of 4 shades.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="directMapping"><see langword="true"/>&#160;to map any color directly to an index instead of searching for a nearest color,
             which is very fast but may end up in a result of a bit higher contrast than the original image;
             <see langword="false"/>&#160;to perform a lookup to determine nearest colors, which may be slower but more accurate. This parameter is optional.
             <br/>Default value: <see langword="false"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors to 2-bit grayscale ones.</returns>
             <remarks>
             <para>If <paramref name="directMapping"/> is <see langword="true"/>, then the result of the quantization may have a higher contrast than without direct color mapping,
             though this can be compensated if the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>. Other ditherers preserve the effect of the <paramref name="directMapping"/> parameter.</para>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 4 possible shades of gray.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> pixel format, though only 4 palette entries are used instead of the possible maximum of 16.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToGrayscale4(Bitmap source, Color backColor = default, bool directMapping = false, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.Grayscale4(backColor, directMapping);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format4bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientGray2bppBlack.gif" alt="Color hues with 2 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (black background, nearest color lookup)</para>
             <para><img src="../Help/Images/AlphaGradientGray2bppSilver.gif" alt="Color hues with 2 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/AlphaGradientGray2bppSilverDirect.gif" alt="Color hues with 2 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/AlphaGradientGray2bppSilverDitheredB8.gif" alt="Color hues with 2 BPP grayscale palette, silver background, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades2bpp.gif" alt="Grayscale color shades with 2 BPP grayscale palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/GrayShades2bppDirect.gif" alt="Grayscale color shades with 2 BPP grayscale palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/GrayShades2bppDitheredB8.gif" alt="Grayscale color shades with 2 BPP grayscale palette, using nearest color lookup and Bayer 8x8 ordered dithering"/>
             <br/>Nearest color lookup, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldGray2bppBlack.gif" alt="Shield icon with 2 BPP grayscale palette and black background using nearest color lookup"/>
             <br/>Default optional parameter values (nearest color lookup)</para>
             <para><img src="../Help/Images/ShieldGray2bppSilver.gif" alt="Shield icon with 2 BPP grayscale palette and silver background using nearest color lookup"/>
             <br/>Silver background, nearest color lookup</para>
             <para><img src="../Help/Images/ShieldGray2bppSilverDirect.gif" alt="Shield icon with 2 BPP grayscale palette and silver background using direct color mapping"/>
             <br/>Silver background, direct color mapping</para>
             <para><img src="../Help/Images/ShieldGray2bppSilverDirectDitheredFS.gif" alt="Shield icon with 2 BPP grayscale palette, silver background, using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Silver background, direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
             <br/>Original test image "Cameraman"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Cameraman2bpp.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using nearest color lookup"/>
             <br/>Nearest color lookup</para>
             <para><img src="../Help/Images/Cameraman2bppDirect.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using direct color mapping"/>
             <br/>Direct color mapping</para>
             <para><img src="../Help/Images/Cameraman2bppDirectDitheredFS.gif" alt="Test image &quot;Cameraman&quot; with 2 BPP grayscale palette using direct color mapping and Floyd-Steinberg dithering"/>
             <br/>Direct color mapping, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.Palette.Grayscale4(KGySoft.Drawing.Imaging.Color32,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes every color to black or white.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with the specified <paramref name="backColor"/> before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="whiteThreshold">Specifies a threshold value for the brightness of the colors, under which a quantized color is considered black.
             If 0, then the complete result will be white. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes every color to black or white.</returns>
             <remarks>
             <para>If the returned quantizer is combined with an <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, then the effect of the <paramref name="whiteThreshold"/> parameter is
             mostly compensated. Other ditherers preserve the effect of the <paramref name="whiteThreshold"/> parameter.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/> pixel format.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToBlackAndWhite(Bitmap source, Color backColor = default,
                 byte whiteThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.BlackAndWhite(backColor, whiteThreshold);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format1bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientBWBlack.gif" alt="Color hues with black and white palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientBWSilver.gif" alt="Color hues with black and white palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientBWSilverDitheredB8.gif" alt="Color hues with black and white palette, silver background, using Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with black and white palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GrayShadesBWThr32.gif" alt="Grayscale color shades with black and white palette, white threshold = 32"/>
             <br/>White threshold = 32</para>
             <para><img src="../Help/Images/GrayShadesBWThr224.gif" alt="Grayscale color shades with black and white palette, white threshold = 224"/>
             <br/>White threshold = 224</para>
             <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with black and white palette, using Bayer 8x8 ordered dithering"/>
             <br/>Default white threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldBWBlack.gif" alt="Shield icon with black and white palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldBWSilver.gif" alt="Shield icon with black and white palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldBWSilverDitheredFS.gif" alt="Shield icon with black and white palette, silver background, using Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Cameraman.png" alt="Test image &quot;Cameraman&quot;"/>
             <br/>Original test image "Cameraman"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/CameramanBW.gif" alt="Test image &quot;Cameraman&quot; with black and white palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/CameramanBWThr96.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, white threshold = 96"/>
             <br/>White threshold = 96</para>
             <para><img src="../Help/Images/CameramanBWThr96DitheredB8.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Bayer 8x8 dithering and white threshold = 96"/>
             <br/>White threshold = 96, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering. The ordered dithering preserves the white threshold value.</para>
             <para><img src="../Help/Images/CameramanBWThr96DitheredFS.gif" alt="Test image &quot;Cameraman&quot; with black and white palette, using Floyd-Steinberg dithering and white threshold = 96"/>
             <br/>White threshold = 96, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering. The error diffusion dithering compensates the white threshold value.</para></div></term>
             </item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.Palette.BlackAndWhite(KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 8-bit palette.
             On Windows this palette contains the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>,
             the "web-safe" palette of 216 colors as well as 24 transparent entries.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency), which are considered opaque will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">If the system default 8-bit palette contains a transparent color on the current operating system,
             then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 8-bit palette.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 256 colors.
             On Windows this amount is somewhat smaller because of redundant entries in the palette.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/> pixel format.</para>
             <para>On Windows the palette of this quantizer contains transparent entries.</para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDefault8Bpp(Bitmap source, Color backColor = default,
                 byte alphaThreshold = 128, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.SystemDefault8BppPalette(backColor, alphaThreshold);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer, ditherer);
            
                 // b.) when converting to Format8bppIndexed format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.ConvertPixelFormat(PixelFormat.Format8bppIndexed, backColor, alphaThreshold);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault8bppBlackA128.gif" alt="Color hues with system default 8 BPP palette, black background and default alpha threshold"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128). The bottom half of the image is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverA1.gif" alt="Color hues with system default 8 BPP palette, silver background and alpha threshold = 1"/>
             <br/>Silver background, alpha threshold = 1. Only the bottom line is transparent.</para>
             <para><img src="../Help/Images/AlphaGradientDefault8bppSilverA128DitheredB8.gif" alt="Color hues with system default 8 BPP palette, silver background, default alpha threshold and Bayer 8x8 ordered dithering"/>
             <br/>Silver background, default alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering. The bottom half of the image is transparent.</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesDefault8bpp.gif" alt="Grayscale color shades with system default 8 BPP palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GrayShadesDefault8bppDitheredB8.gif" alt="Grayscale color shades with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldDefault8bppBlack.gif" alt="Shield icon with system default 8 BPP palette"/>
             <br/>Default optional parameter values (black background, alpha threshold = 128)</para>
             <para><img src="../Help/Images/ShieldDefault8bppBlackDitheredB8.gif" alt="Shield icon with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/>Default background and alpha threshold, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
             <para><img src="../Help/Images/ShieldDefault8bppSilverA1DitheredFS.gif" alt="Shield icon with system default 8 BPP palette using silver background, alpha threshold = 1 and Floyd-Steinberg dithering"/>
             <br/>Silver background, alpha threshold = 1, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Lena.png" alt="Test image &quot;Lena&quot;"/>
             <br/>Original test image "Lena"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/LenaDefault8bpp.gif" alt="Test image &quot;Lena&quot; with system default 8 BPP palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/LenaDefault8bppDitheredB8.gif" alt="Test image &quot;Lena&quot; with system default 8 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para>
             <para><img src="../Help/Images/LenaDefault8bppDitheredFS.gif" alt="Test image &quot;Lena&quot; with system default 8 BPP palette using Floyd-Steinberg dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.Palette.SystemDefault8BppPalette(KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 4-bit palette.
             On Windows this palette consists of the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a>.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 4-bit palette.</returns>
             <remarks>
             <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 16 colors.</para>
             <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> pixel format.</para>
             <para>The palette of this quantizer is not expected to contain transparent entries.
             On Windows the palette consists of the 16 standard <a href="https://www.w3.org/TR/REC-html40/types.html#h-6.5" target="_blank">basic sRGB colors</a></para>
             <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToDefault4Bpp(Bitmap source, Color backColor = default, IDitherer ditherer = null)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.SystemDefault4BppPalette(backColor);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format8bppIndexed, quantizer, ditherer);
            
                 // b.) when converting to Format4bppIndexed format without dithering, this produces the same result:
                 if (ditherer == null)
                     return source.ConvertPixelFormat(PixelFormat.Format4bppIndexed, backColor);
            
                 // c.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             } ]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientDefault4bppBlack.gif" alt="Color hues with system default 4 BPP palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/AlphaGradientDefault4bppSilver.gif" alt="Color hues with system default 4 BPP palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/AlphaGradientDefault4bppSilverDitheredB8.gif" alt="Color hues with system default 4 BPP palette, using silver background and a stronger Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering with strength = 0.5</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesDefault4bpp.gif" alt="Grayscale color shades with system default 4 BPP palette"/>
             <br/>Default optional parameter values. The asymmetry is due to the uneven distribution of gray shades of this palette.</para>
             <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8.gif" alt="Grayscale color shades with system default 4 BPP palette using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using auto strength. Darker shades have banding.</para>
             <para><img src="../Help/Images/GrayShadesDefault4bppDitheredB8Str-5.gif" alt="Grayscale color shades with system default 4 BPP palette using a stronger Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering using strength = 0.5. Now there is no banding but white suffers from overdithering.</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldDefault4bppBlack.gif" alt="Shield icon with system default 4 BPP palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldDefault4bppSilver.gif" alt="Shield icon with system default 4 BPP palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldDefault4bppSilverDitheredFS.gif" alt="Shield icon with system default 4 BPP palette using silver background and Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.Palette.SystemDefault4BppPalette(KGySoft.Drawing.Imaging.Color32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 1-bit palette.
            On Windows this palette consists of the black and white colors.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="backColor">Colors with alpha (transparency) will be blended with this color before quantization.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the system default 1-bit palette.</returns>
            <remarks>
            <para>The returned <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance can return up to 2 colors.
            The system 1-bit palette expected to have the black and white colors on most operating systems.
            <note type="tip">To make sure that you use a black and white palette use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">BlackAndWhite</see> method instead, which provides white threshold adjustment as well.
            <br/>For more details and examples see the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.BlackAndWhite(System.Drawing.Color,System.Byte)">BlackAndWhite</see> method.</note></para>
            <para>This quantizer fits well for <see cref="T:System.Drawing.Bitmap"/>s with <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/> pixel format.</para>
            <note>For more information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.Palette.SystemDefault1BppPalette(KGySoft.Drawing.Imaging.Color32)"/>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the colors in the specified <paramref name="palette"/>.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="palette">The array of colors to be used by the returned instance.</param>
             <param name="backColor">Colors with alpha (transparency), which are considered opaque will be blended with this color before quantization.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">If the specified <paramref name="palette"/> contains a transparent color,
             then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then the quantized colors will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the colors in the specified <paramref name="palette"/>.</returns>
             <remarks>
             <para>The <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance returned by this method will use a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> internally, created from
             the colors specified in the <paramref name="palette"/> parameter. When quantizing, best matching colors might be looked up sequentially and results
             might be cached.</para>
             <para>If a color to be quantized can be mapped to a color index directly, then create a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance explicitly,
             specifying the custom mapping logic and use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> overload instead.</para>
             <para>If a color to be quantized can be transformed to a result color directly, and the quantized result is not needed to be an indexed image,
             then use the <see cref="O:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction">FromCustomFunction</see> overloads instead.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToRgb111(Bitmap source, Color backColor = default, IDitherer ditherer = null)
             {
                 Color[] colors =
                 {
                     Color.Black, Color.Red, Color.Lime, Color.Blue,
                     Color.Magenta, Color.Yellow, Color.Cyan, Color.White
                 };
            
                 IQuantizer quantizer = PredefinedColorsQuantizer.FromCustomPalette(colors, backColor);
                 // or: quantizer = PredefinedColorsQuantizer.FromCustomPalette(new Palette(colors, backColor));
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format4bppIndexed, quantizer, ditherer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 if (ditherer == null)
                     source.Quantize(quantizer);
                 else
                     source.Dither(quantizer, ditherer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientRgb111Black.gif" alt="Color hues with RGB111 palette and black background"/>
             <br/>Default optional parameter values (black background). The bottom half of the result is black.</para>
             <para><img src="../Help/Images/AlphaGradientRgb111Silver.gif" alt="Color hues with RGB111 palette and silver background"/>
             <br/>Silver background. The bottom part of the result is white.</para>
             <para><img src="../Help/Images/AlphaGradientRgb111SilverDitheredB8.gif" alt="Color hues with RGB111 palette and silver background, using Bayer 8x8 ordered dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShades.gif" alt="Grayscale color shades with different bit depths"/>
             <br/>Grayscale color shades</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/GrayShadesBW.gif" alt="Grayscale color shades with RGB111 palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/GrayShadesBWDitheredB8.gif" alt="Grayscale color shades with RGB111 palette, using Bayer 8x8 ordered dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.OrderedDitherer.Bayer8x8">Bayer 8x8</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldRgb111Black.gif" alt="Shield icon with RGB111 palette and black background"/>
             <br/>Default optional parameter values (black background)</para>
             <para><img src="../Help/Images/ShieldRgb111Silver.gif" alt="Shield icon with RGB111 palette and silver background"/>
             <br/>Silver background</para>
             <para><img src="../Help/Images/ShieldRgb111SilverDitheredFS.gif" alt="Shield icon with RGB111 palette, silver background, using Floyd-Steinberg dithering"/>
             <br/>Silver background, <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Lena.png" alt="Test image &quot;Lena&quot;"/>
             <br/>Original test image "Lena"</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/LenaRgb111.gif" alt="Test image &quot;Lena&quot; with RGB111 palette"/>
             <br/>Default optional parameter values</para>
             <para><img src="../Help/Images/LenaRgb111DitheredFS.gif" alt="Test image &quot;Lena&quot; with RGB111 palette and Floyd-Steinberg dithering"/>
             <br/><see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">Floyd-Steinberg</see> dithering</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the specified <paramref name="palette"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="palette">The <see cref="T:KGySoft.Drawing.Imaging.Palette"/> to be used by the returned instance.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the specified <paramref name="palette"/>.</returns>
            <remarks>
            <para>If a color to be quantized can be transformed to a result color directly, and the quantized result is not needed to be an indexed image,
            then use the <see cref="O:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction">FromCustomFunction</see> overloads instead.</para>
            <note>For examples see the <strong>Examples</strong> section of the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> overload.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,System.Drawing.Imaging.PixelFormat,System.Byte)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="quantizingFunction">A delegate that specifies the custom quantization logic. It must be thread-safe for parallel invoking and it is expected to be fast.
             The results returned by the delegate are not cached.</param>
             <param name="backColor">Colors with alpha (transparency), whose <see cref="P:System.Drawing.Color.A">Color.A</see> property
             is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color before invoking the <paramref name="quantizingFunction"/> delegate.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored.</param>
             <param name="pixelFormatHint">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> value that the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.PixelFormatHint"/> property of the returned instance will return. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>, which is valid only if <paramref name="alphaThreshold"/> has the default zero value.</param>
             <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
             If 0, then even the completely transparent colors will be blended with <paramref name="backColor"/> before invoking the <paramref name="quantizingFunction"/> delegate. This parameter is optional.
             <br/>Default value: <c>0</c>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.</returns>
             <remarks>
             <para>The quantizer returned by this method does not have a palette. If you need to create an indexed result using a custom mapping function that
             uses up to 256 different colors, then create a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance specifying a custom function and call the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> method instead.</para>
             <para>This overload never calls the <paramref name="quantizingFunction"/> delegate with a color with alpha. Depending on <paramref name="alphaThreshold"/> either a completely
             transparent color will be returned or the color will be blended with <paramref name="backColor"/> before invoking the delegate.
             In order to allow invoking <paramref name="quantizingFunction"/> with alpha colors use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)"/> overload instead.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToGrayscaleOpaque(Bitmap source, Color backColor = default)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.FromCustomFunction(c => c.ToGray(), backColor, 0);
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format24bppRgb, quantizer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientGray8bppBlack.gif" alt="Grayscale color hues with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/AlphaGradientGray8bppSilver.gif" alt="Graayscale color hues with silver background"/>
             <br/>Silver background</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldGray8bppBlack.gif" alt="Grayscale shield icon with black background"/>
             <br/>Default (black) background</para>
             <para><img src="../Help/Images/ShieldGray8bppSilver.gif" alt="Grayscale shield icon with silver background"/>
             <br/>Silver background</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)">
             <summary>
             Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.
             <br/>See the <strong>Remarks</strong> section for details and some examples.
             </summary>
             <param name="quantizingFunction">A delegate that specifies the custom quantization logic. It must be thread-safe for parallel invoking and it is expected to be fast.
             The results returned by the delegate are not cached.</param>
             <param name="pixelFormatHint">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> value that the <see cref="P:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.PixelFormatHint"/> property of the returned instance will return. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</param>
             <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that quantizes colors using the custom quantizer function specified in the <paramref name="quantizingFunction"/> parameter.</returns>
             <remarks>
             <para>The quantizer returned by this method does not have a palette. If you need to create indexed using a custom mapping function that
             uses up to 256 different colors, then create a <see cref="T:KGySoft.Drawing.Imaging.Palette"/> instance specifying a custom function and call the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> method instead.</para>
             <para>This overload always calls the <paramref name="quantizingFunction"/> delegate without preprocessing the input colors.
             In order to pass only opaque colors to the <paramref name="quantizingFunction"/> delegate use the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,System.Drawing.Imaging.PixelFormat,System.Byte)"/> overload instead.</para>
             </remarks>
             <example>
             The following example demonstrates how to use the quantizer returned by this method:
             <code lang="C#"><![CDATA[
             public static Bitmap ToGrayscalePreserveAlpha(Bitmap source)
             {
                 IQuantizer quantizer = PredefinedColorsQuantizer.FromCustomFunction(c => c.ToGray());
            
                 // a.) this solution returns a new bitmap and does not change the original one:
                 return source.ConvertPixelFormat(PixelFormat.Format32bppArgb, quantizer);
            
                 // b.) alternatively, you can perform the quantization directly on the source bitmap:
                 source.Quantize(quantizer);
                 return source;
             }]]></code>
             <para>The example above may produce the following results:
             <list type="table">
             <listheader><term>Original image</term><term>Quantized image</term></listheader>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradient.png" alt="Color hues with alpha gradient"/>
             <br/>Color hues with alpha gradient</para></div></term>
             <term>
             <div style="text-align:center;width:512px">
             <para><img src="../Help/Images/AlphaGradientGrayscale.png" alt="Grayscale color hues with alpha preserved"/>
             <br/>Alpha has been preserved</para></div></term>
             </item>
             <item>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/>
             <br/>Shield icon with transparency</para></div></term>
             <term><div style="text-align:center;width:512px">
             <para><img src="../Help/Images/ShieldGrayscale.png" alt="Grayscale shield icon with alpha preserved"/>
             <br/>Alpha has been preserved</para></div></term>
             </item>
             </list></para>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromBitmapData(KGySoft.Drawing.Imaging.IBitmapData)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of the specified <paramref name="bitmapData"/>
            and uses its <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> if <paramref name="bitmapData"/> represents an indexed bitmap.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmapData">The <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> to get a compatible quantizer for.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the specified <paramref name="bitmapData"/>.</returns>
            <remarks>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/> or <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb888(System.Drawing.Color)">Rgb888</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">Argb1555</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">Rgb565</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb555(System.Drawing.Color)">Rgb555</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> method.</para>
            <para>If the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat"/> of <paramref name="bitmapData"/> is an indexed format
            (<see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> or <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>),
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(KGySoft.Drawing.Imaging.Palette)"/> using the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> of the specified <paramref name="bitmapData"/>.</para>
            <para>In any other case than the ones above this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb8888(System.Drawing.Color,System.Byte)">Argb8888</see> method.</para>
            <note>For examples see the <strong>Examples</strong> section of the mentioned methods above.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromPixelFormat(System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the specified <paramref name="pixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="pixelFormat">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> to get a compatible quantizer for.</param>
            <param name="backColor">Colors with alpha (transparency), which are considered opaque will be blended with this color before quantization.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a quantized color is considered transparent.
            If 0, then the quantized colors will never be transparent. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> instance that is compatible with the specified <paramref name="pixelFormat"/>.</returns>
            <remarks>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/> or <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb888(System.Drawing.Color)">Rgb888</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">Argb1555</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">Rgb565</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb555(System.Drawing.Color)">Rgb555</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">Grayscale</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">SystemDefault8BppPalette</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault4BppPalette(System.Drawing.Color)">SystemDefault4BppPalette</see> method.</para>
            <para>If <paramref name="pixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>,
            then this method returns the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault1BppPalette(System.Drawing.Color)">SystemDefault1BppPalette</see> method.</para>
            <para>In any other case than the ones above this method the same quantizer as the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb8888(System.Drawing.Color,System.Byte)">Argb8888</see> method.</para>
            <note>For examples see the <strong>Examples</strong> section of the mentioned methods above.</note>
            </remarks>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color16Gray">
            <summary>
            Represents a 16-bit grayscale color.
            Implements <see cref="T:System.IEquatable`1"/> because used in a <see cref="T:System.Collections.Generic.HashSet`1"/> in <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount``1(KGySoft.Drawing.IAsyncContext,KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color32">
            <summary>
            Represents the same 32-bit ARGB color as the <see cref="T:System.Drawing.Color"/> structure does but in a more optimized way
            for better performance and smaller memory consumption.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.A">
            <summary>
            Gets the alpha component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.R">
            <summary>
            Gets the red component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.G">
            <summary>
            Gets the green component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.Imaging.Color32.B">
            <summary>
            Gets the blue component value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.op_Equality(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/>&#160;if the two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.op_Inequality(KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/>&#160;if the two <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> struct from ARGB (alpha, red, green, and blue) values.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> struct from RGB (red, green, and blue) values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.Imaging.Color32"/> struct from a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="c">A <see cref="T:System.Drawing.Color"/> structure to initialize a new instance of <see cref="T:KGySoft.Drawing.Imaging.Color32"/> from.</param>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromArgb(System.Int32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value. As a hex value it can be specified as <c>AARRGGBB</c> where <c>AA</c>
            is the most significant byte (MSB) and <c>BB</c> is the least significant byte (LSB).</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from the specified 32-bit ARGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromArgb(System.Byte,KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance from the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure, but with the new specified alpha value.
            </summary>
            <param name="a">The alpha value for the new <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</param>
            <param name="baseColor">The <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance from which to create the new one.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance from the specified <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure and alpha value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromRgb(System.Int32)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 24-bit RGB value. The highest byte of the specified integer is ignored
            and the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">A</see> property of the result will be 255.
            </summary>
            <param name="rgb">A value specifying the 24-bit RGB value. The possibly nonzero alpha component will be ignored.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure from a 24-bit RGB value.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.FromGray(System.Byte)">
            <summary>
            Creates a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure representing a grayscale color of the specified <paramref name="brightness"/>.
            </summary>
            <param name="brightness">The brightness of the gray color to be created where 0 represents the black color and 255 represents the white color.</param>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure representing a grayscale color of the specified <paramref name="brightness"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToColor">
            <summary>
            Converts this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/> structure converted from this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToArgb">
            <summary>
            Gets the 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <returns>The 32-bit ARGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToRgb">
            <summary>
            Gets the 24-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance. The most significant byte of the returned integer is zero.
            </summary>
            <returns>The 24-bit RGB value of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance. The most significant byte of the returned integer is zero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToGray">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the matching gray shade of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance based on human perception.
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents the matching gray shade of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance based on human perception.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToOpaque">
            <summary>
            Gets a <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> without alpha (transparency).
            </summary>
            <returns>A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance that represents this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> without alpha.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.Equals(KGySoft.Drawing.Imaging.Color32)">
            <summary>
            Determines whether the current <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.Imaging.Color32"/> structure to compare with this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</param>
            <returns><see langword="true"/>, if the current <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.Color32.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.Color32"/> instance.</returns>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color48">
            <summary>
            Represents a 48-bit RGB color.
            Implements <see cref="T:System.IEquatable`1"/> because used in a <see cref="T:System.Collections.Generic.HashSet`1"/> in <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount``1(KGySoft.Drawing.IAsyncContext,KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.Color64">
            <summary>
            Represents a 64-bit ARGB color.
            Implements <see cref="T:System.IEquatable`1"/> because used in a <see cref="T:System.Collections.Generic.HashSet`1"/> in <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCount``1(KGySoft.Drawing.IAsyncContext,KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Multiply(KGySoft.Drawing.Imaging.ColorF,System.Single)">
            <summary>
            Multiplies a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> by the given scalar.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Addition(KGySoft.Drawing.Imaging.ColorF,System.Single)">
            <summary>
            Adds a given scalar to a <see cref="T:KGySoft.Drawing.Imaging.ColorF"/>.
            </summary>
            <param name="left">The source color.</param>
            <param name="right">The scalar value.</param>
            <returns>The result color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.op_Addition(KGySoft.Drawing.Imaging.ColorF,KGySoft.Drawing.Imaging.ColorF)">
            <summary>
            Adds two colors together.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>The summed color.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.ColorF.ToString">
            <summary>
            Gets the string representation of this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:KGySoft.Drawing.Imaging.ColorF"/> instance.</returns>
        </member>
        <member name="M:KGySoft.Drawing.Imaging.CopySession.TryPerformRawCopy">
            <summary>
            Tries to perform a raw copy. If succeeds converts the horizontal dimensions to bytes from pixels.
            Note: Stride and origin is set from outside so we spare some casts and possible GCHandle uses.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.Imaging.NamespaceDoc">
            <summary>
            The <c>KGySoft.Drawing.Imaging</c> namespace provides advanced imaging functionality such as low-level bitmap data access for any pixel format,
            interfaces for quantization and dithering along with some built-in implementations, etc.
            <br/>See also the <see cref="N:KGySoft.Drawing"/> namespace, which provides more basic functionality.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.ParallelHelper.For(KGySoft.Drawing.IAsyncContext,KGySoft.Drawing.DrawingOperation,System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Similar to <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/> but tries to balance resources and works also in .NET 3.5.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.RawIcon">
            <summary>
            Provides low-level support for an icon. This class is internal because it can process and produce <see cref="T:System.Drawing.Icon"/> and <see cref="T:System.Drawing.Bitmap"/>
            instances and every functionality is accessible via extensions for those classes.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.RawIconImageCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.RawIconImageCollection.InsertItem(System.Int32,KGySoft.Drawing.RawIcon.RawIconImage)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.NotSupportedException">There are too many images in the icon collection</exception>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.RawIconImage.isPng">
            <summary>
            Gets whether <see cref="F:KGySoft.Drawing.RawIcon.RawIconImage.rawColor"/> contains PNG data.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.RawIconImage.bmpComposite">
            <summary>
            In: Source image if it is already 32 bit ARGB and Color.Transparent is specified for transparency
            Out: Result image of ToBitmap(false)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.RawIconImage.bmpColor">
            <summary>
            In: Source image if it is non ARGB or when a custom transparent color is specified
            Out: Result image of ToBitmap(true)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.RawIconImage.rawColor">
            <summary>
            Color image or the raw image itself when PNG
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.RawIconImage.rawMask">
            <summary>
            Mask data (can be null even if BMP)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.RawIconImage.bmpHeader">
            <summary>
            Header (only if BMP)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.RawIconImage.palette">
            <summary>
            Palette (only if indexed BMP)
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.RawIcon.RawIconImage.Size">
            <summary>
            Gets the size in pixels
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.RawIconImage.#ctor(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            From bitmap
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.RawIconImage.#ctor(System.Byte[])">
            <summary>
            From raw data
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.RawIconImage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.RawIcon.MinCompressedSize">
            <summary>
            The minimum size for compressed icons. If smaller than 256, then loading the icon as Bitmap fails even on Windows 10,
            though in Explorer the icons with sizes 49-255 look better with PNG compression.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.RawIcon"/> class.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.#ctor(System.Drawing.Icon,System.Nullable{System.Drawing.Size},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.RawIcon"/> class from an <see cref="T:System.Drawing.Icon"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.Add(System.Drawing.Icon)">
            <summary>
            Adds an icon to the raw icon. <param name="icon"> is deserialized from stream.</param>
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.Add(System.Drawing.Bitmap)">
            <summary>
            Adds an image to the raw icon. If it contains icons, all images are added.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.Add(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Adds an image to the raw icon. If it contains icons, all images are added.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.ToIcon(System.Boolean)">
            <summary>
            Gets the icons of the <see cref="T:KGySoft.Drawing.RawIcon"/> instance as a single, combined <see cref="T:System.Drawing.Icon"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.ToBitmap">
            <summary>
            Gets a <see cref="T:System.Drawing.Bitmap"/> instance, which contains every images of the <see cref="T:KGySoft.Drawing.RawIcon"/> instance as a single, multi-resolution <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the icon into a stream
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.ExtractIcons(System.Boolean)">
            <summary>
            Gets the icons of the <see cref="T:KGySoft.Drawing.RawIcon"/> instance as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.ExtractBitmaps(System.Boolean)">
            <summary>
            Gets the images of the <see cref="T:KGySoft.Drawing.RawIcon"/> instance as separated <see cref="T:System.Drawing.Bitmap"/> instances.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.ExtractNearestBitmap(System.Int32,System.Drawing.Size,System.Boolean)">
            <summary>
            Gets the nearest bitmap to the specified color depth and size. Bpp is matched first.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.RawIcon.ExtractNearestIcon(System.Int32,System.Drawing.Size,System.Boolean)">
            <summary>
            Gets the nearest icon to the specified color depth and size.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.TaskConfig">
            <summary>
            Represents asynchronous configuration for <see cref="T:System.Threading.Tasks.Task"/>-returning methods.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.TaskConfig.CancellationToken">
            <summary>
            Gets or sets the cancellation token for this operation.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.TaskConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.TaskConfig"/> class.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.TaskConfig.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.TaskConfig"/> class.
            </summary>
            <param name="cancellationToken">Specifies the cancellation token for this operation.</param>
        </member>
        <member name="T:KGySoft.Drawing.WinApi.Gdi32">
            <summary>
            Contains external methods for Gdi32.dll
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.GetObject(System.IntPtr,System.Int32,KGySoft.Drawing.WinApi.BITMAP@)">
            <summary>
            The GetObject function retrieves information for the specified graphics object.
            </summary>
            <param name="hgdiobj">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.CreateDIBSection(System.IntPtr,KGySoft.Drawing.WinApi.BITMAPINFO@,System.Int32,System.IntPtr@,System.IntPtr,System.UInt32)"/> function.</param>
            <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
            <param name="lpvObject">A pointer to a buffer that receives the information about the specified graphics object.</param>
            <returns>If the lpvObject parameter is NULL, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.CreateDIBSection(System.IntPtr,KGySoft.Drawing.WinApi.BITMAPINFO@,System.Int32,System.IntPtr@,System.IntPtr,System.UInt32)">
            <summary>
            The CreateDIBSection function creates a DIB that applications can write to directly. The function gives you a pointer to the location of the bitmap bit values. You can supply a handle to a file-mapping object that the function will use to create the bitmap, or you can let the system allocate the memory for the bitmap.
            </summary>
            <param name="hdc">A handle to a device context. If the value of iUsage is DIB_PAL_COLORS, the function uses this device context's logical palette to initialize the DIB colors.</param>
            <param name="pbmi">A pointer to a <see cref="T:KGySoft.Drawing.WinApi.BITMAPINFO"/> structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.</param>
            <param name="iUsage">The type of data contained in the bmiColors array member of the BITMAPINFO structure pointed to by pbmi (either logical palette indexes or literal RGB values). The following values are defined.
            <para>DIB_PAL_COLORS - The bmiColors member is an array of 16-bit indexes into the logical palette of the device context specified by hdc.</para>
            <para>DIB_RGB_COLORS - The BITMAPINFO structure contains an array of literal RGB values.</para>
            </param>
            <param name="ppvBits">A pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
            <param name="hSection">A handle to a file-mapping object that the function will use to create the DIB. This parameter can be NULL.</param>
            <param name="dwOffset">The offset from the beginning of the file-mapping object referenced by hSection where storage for the bitmap bit values is to begin. This value is ignored if hSection is NULL. The bitmap bit values are aligned on doubleword boundaries, so dwOffset must be a multiple of the size of a DWORD.</param>
            <returns>If the function succeeds, the return value is a handle to the newly created DIB, and *ppvBits points to the bitmap bit values.
            If the function fails, the return value is NULL, and ppvBits is NULL.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.CreateCompatibleDC(System.IntPtr)">
            <summary>
            This function creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hdc">[in] Handle to an existing device context.
            If this handle is NULL, the function creates a memory device context compatible with the application's current screen. </param>
            <returns>The handle to a memory device context indicates success.
            NULL indicates failure.
            To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type.
            </summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="hgdiobj">A handle to the object to be selected.</param>
            <returns>If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,KGySoft.Drawing.WinApi.TernaryRasterOperations)">
            <summary>The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.</summary>
            <param name="hdc">Handle to the destination device context.</param>
            <param name="nXDest">The leftmost x-coordinate of the destination rectangle (in pixels).</param>
            <param name="nYDest">The topmost y-coordinate of the destination rectangle (in pixels).</param>
            <param name="nWidth">The width of the source and destination rectangles (in pixels).</param>
            <param name="nHeight">The height of the source and the destination rectangles (in pixels).</param>
            <param name="hdcSrc">Handle to the source device context.</param>
            <param name="nXSrc">The leftmost x-coordinate of the source rectangle (in pixels).</param>
            <param name="nYSrc">The topmost y-coordinate of the source rectangle (in pixels).</param>
            <param name="dwRop">A raster-operation code.</param>
            <returns><see langword="true"/>&#160;if the operation succeeds, <see langword="false"/>&#160;otherwise. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.DeleteDC(System.IntPtr)">
            <summary>The DeleteDC function deletes the specified device context (DC).</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>. If the function fails, the return value is <see langword="false"/>.</returns>
            <remarks>
            An application must not delete a DC whose handle was obtained by calling the GetDC function. Instead, it must call the ReleaseDC function to free the DC.
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.GetEnhMetaFileBits(System.IntPtr,System.UInt32,System.Byte[])">
            <summary>
            The GetEnhMetaFileBits function retrieves the contents of the specified enhanced-format metafile and copies them into a buffer.
            </summary>
            <param name="hemf">A handle to the enhanced metafile.</param>
            <param name="cbBuffer">The size, in bytes, of the buffer to receive the data.</param>
            <param name="lpbBuffer">A pointer to a buffer that receives the metafile data. The buffer must be sufficiently large to contain the data. If lpbBuffer is NULL, the function returns the size necessary to hold the data.</param>
            <returns>If the function succeeds and the buffer pointer is NULL, the return value is the size of the enhanced metafile, in bytes.
            If the function succeeds and the buffer pointer is a valid pointer, the return value is the number of bytes copied to the buffer.
            If the function fails, the return value is zero.</returns>
            <remarks>After the enhanced-metafile bits are retrieved, they can be used to create a memory-based metafile by calling the SetEnhMetaFileBits function.
            The GetEnhMetaFileBits function does not invalidate the enhanced-metafile handle. The application must call the DeleteEnhMetaFile function to delete the handle when it is no longer needed.
            The metafile contents retrieved by this function are in the enhanced format. To retrieve the metafile contents in the Windows format, use the GetWinMetaFileBits function.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.GetWinMetaFileBits(System.IntPtr,System.UInt32,System.Byte[],KGySoft.Drawing.WinApi.MappingModes,System.IntPtr)">
            <summary>
            The GetWinMetaFileBits function converts the enhanced-format records from a metafile into Windows-format records and stores the converted records in the specified buffer.
            </summary>
            <param name="hemf">A handle to the enhanced metafile.</param>
            <param name="cbBuffer">The size, in bytes, of the buffer into which the converted records are to be copied.</param>
            <param name="lpbBuffer">A pointer to the buffer that receives the converted records. If lpbBuffer is NULL, GetWinMetaFileBits returns the number of bytes required to store the converted metafile records.</param>
            <param name="fnMapMode">The mapping mode to use in the converted metafile.</param>
            <param name="hdcRef">A handle to the reference device context.</param>
            <returns>If the function succeeds and the buffer pointer is NULL, the return value is the number of bytes required to store the converted records; if the function succeeds and the buffer pointer is a valid pointer, the return value is the size of the metafile data in bytes.
            If the function fails, the return value is zero.</returns>
            <remarks>This function converts an enhanced metafile into a Windows-format metafile so that its picture can be displayed in an application that recognizes the older format.
            The system uses the reference device context to determine the resolution of the converted metafile.
            The GetWinMetaFileBits function does not invalidate the enhanced metafile handle. An application should call the DeleteEnhMetaFile function to release the handle when it is no longer needed.
            To create a scalable Windows-format metafile, specify MM_ANISOTROPIC as the fnMapMode parameter.
            The upper-left corner of the metafile picture is always mapped to the origin of the reference device.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.GetMetaFileBitsEx(System.IntPtr,System.UInt32,System.Byte[])">
            <summary>
            The GetMetaFileBitsEx function retrieves the contents of a Windows-format metafile and copies them into the specified buffer.
            </summary>
            <param name="hmf">A handle to a Windows-format metafile.</param>
            <param name="nSize">The size, in bytes, of the buffer to receive the data.</param>
            <param name="lpvData">A pointer to a buffer that receives the metafile data. The buffer must be sufficiently large to contain the data. If lpvData is NULL, the function returns the number of bytes required to hold the data.</param>
            <returns>If the function succeeds and the buffer pointer is NULL, the return value is the number of bytes required for the buffer; if the function succeeds and the buffer pointer is a valid pointer, the return value is the number of bytes copied.
            If the function fails, the return value is zero.</returns>
            <remarks>
            Note: This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is GetEnhMetaFileBits.
            After the Windows-metafile bits are retrieved, they can be used to create a memory-based metafile by calling the SetMetaFileBitsEx function.
            The GetMetaFileBitsEx function does not invalidate the metafile handle. An application must delete this handle by calling the DeleteMetaFile function.
            To convert a Windows-format metafile into an enhanced-format metafile, use the SetWinMetaFileBits function.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.DeleteEnhMetaFile(System.IntPtr)">
            <summary>
            The DeleteEnhMetaFile function deletes an enhanced-format metafile or an enhanced-format metafile handle.
            </summary>
            <param name="hemf">A handle to an enhanced metafile.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.DeleteMetaFile(System.IntPtr)">
            <summary>
            The DeleteMetaFile function deletes a Windows-format metafile or Windows-format metafile handle.
            </summary>
            <param name="hmf">A handle to a Windows-format metafile.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Gdi32.NativeMethods.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Creates a bitmap compatible with the device that is associated with the specified device context.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="nWidth">The bitmap width, in pixels.</param>
            <param name="nHeight">The bitmap height, in pixels.</param>
            <returns>If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
            If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Shell32.NativeMethods.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
            <summary>
            The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.
            </summary>
            <param name="lpszFile">[in] (Type: LPCTSTR)
            Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.
            </param>
            <param name="nIconIndex">[in] (Type: int)
            Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.
            If this value is –1 and phiconLarge and phiconSmall are both NULL, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.
            If this value is a negative number and either phiconLarge or phiconSmall is not NULL, the function begins by extracting the icon whose resource identifier is equal to the absolute value of nIconIndex. For example, use -3 to extract the icon whose resource identifier is 3.
            </param>
            <param name="phIconLarge">[out] (Type: HICON*)
            Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is NULL, no large icons are extracted from the file.
            </param>
            <param name="phIconSmall">[out] (Type: HICON*)
            Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is NULL, no small icons are extracted from the file.
            </param>
            <param name="nIcons">Type: UINT
            The number of icons to extract from the file.
            </param>
            <returns>If the nIconIndex parameter is -1, the phiconLarge parameter is NULL, and the phiconSmall parameter is NULL,
            then the return value is the number of icons contained in the specified file.
            Otherwise, the return value is the number of icons successfully extracted from the file.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Shell32.NativeMethods.SHGetFileInfo(System.String,System.UInt32,KGySoft.Drawing.WinApi.SHFILEINFO@,System.UInt32,KGySoft.Drawing.WinApi.SGHFI)">
             <summary>
             Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
             </summary>
             <param name="pszPath">[in] (Type: LPCSTR)
             A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.
            
             If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers
             that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.
            
             If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists
             with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just
             the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes.
            
             This string can use either short (the 8.3 form) or long file names.
             </param>
             <param name="dwFileAttributes">Type: DWORD
             A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the SHGFI_USEFILEATTRIBUTES flag,
             this parameter is ignored.
             </param>
             <param name="psfi">[in, out] (Type: SHFILEINFO*)
             Pointer to a SHFILEINFO structure to receive the file information.
             </param>
             <param name="cbSizeFileInfo">Type: UINT
             The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.
             </param>
             <param name="uFlags">Type: UINT
             The flags that specify the file information to retrieve.
             </param>
             <returns>Type: DWORD_PTR
             Returns a value whose meaning depends on the uFlags parameter.
            
             If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise.
            
             If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file.
             </returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.Shell32.NativeMethods.SHGetStockIconInfo(KGySoft.Drawing.StockIcon,KGySoft.Drawing.WinApi.SHGSI,KGySoft.Drawing.WinApi.SHSTOCKICONINFO@)">
            <summary>
            Retrieves information about system-defined Shell icons.
            </summary>
            <param name="siid">One of the values from the SHSTOCKICONID enumeration that specifies which icon should be retrieved.</param>
            <param name="uFlags">A combination of zero or more of the <see cref="T:KGySoft.Drawing.WinApi.SHGSI"/> flags that specify which information is requested.</param>
            <param name="psii">A pointer to a <see cref="T:KGySoft.Drawing.WinApi.SHSTOCKICONINFO"/> structure. When this function is called, the cbSize member of this structure needs to be set to the size of the SHSTOCKICONINFO structure. When this function returns, contains a pointer to a SHSTOCKICONINFO structure that contains the requested information.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.DestroyIcon(System.IntPtr)">
            <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="handle">[in] (Type: HICON)
            A handle to the icon to be destroyed. The icon must not be in use.
            </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context(DC) for the client area of a specified window or for the entire screen.You can use the returned handle in subsequent GDI functions to draw in the DC.The device context is an opaque data structure, whose values are used internally by GDI.
            </summary>
            <param name = "hWnd" > A handle to the window whose DC is to be retrieved.If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
            <returns>If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. If the DC was released, the return value is 1.
            If the DC was not released, the return value is zero.</returns>
            <remarks>
            The application must call the ReleaseDC function for each call to the GetWindowDC function and for each call to the GetDC function that retrieves a common DC.
            An application cannot use the ReleaseDC function to release a DC that was created by calling the CreateDC function; instead, it must use the DeleteDC function. ReleaseDC must be called from the same thread that called GetDC.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.GetIconInfo(System.IntPtr,KGySoft.Drawing.WinApi.ICONINFO@)">
            <summary>
            Retrieves information about the specified icon or cursor.
            </summary>
            <param name="hIcon">A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the standard values.</param>
            <param name="piconinfo">A pointer to an ICONINFO structure. The function fills in the structure's members.</param>
            <returns>If the function succeeds, the return value is nonzero and the function fills in the members of the specified ICONINFO structure. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.WindowFromDC(System.IntPtr)">
            <summary>
            The WindowFromDC function returns a handle to the window associated with the specified display device context (DC). Output functions that use the specified device context draw into this window.
            </summary>
            <param name="hDC">Handle to the device context from which a handle to the associated window is to be retrieved.</param>
            <returns>The return value is a handle to the window associated with the specified DC. If no window is associated with the specified DC, the return value is NULL.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.GetWindowRect(System.IntPtr,KGySoft.Drawing.WinApi.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window. </param>
            <param name="lpRect">A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window. </param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.GetClientRect(System.IntPtr,KGySoft.Drawing.WinApi.RECT@)">
            <summary>
            Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="hWnd">A handle to the window whose client coordinates are to be retrieved.</param>
            <param name="lpRect">A pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.CreateIconIndirect(KGySoft.Drawing.WinApi.ICONINFO@)">
            <summary>
            Creates an icon or cursor from an <see cref="T:KGySoft.Drawing.WinApi.ICONINFO"/> structure.
            </summary>
            <param name="piconinfo">A pointer to an <see cref="T:KGySoft.Drawing.WinApi.ICONINFO"/> structure the function uses to create the icon or cursor.</param>
            <returns>If the function succeeds, the return value is a handle to the icon or cursor that is created. If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
            <remarks>The system copies the bitmaps in the ICONINFO structure before creating the icon or cursor. Because the system may temporarily select the bitmaps in a device context, the hbmMask and hbmColor members of the ICONINFO structure should not already be selected into a device context. The application must continue to manage the original bitmaps and delete them when they are no longer necessary.
            When you are finished using the icon, destroy it using the <see cref="M:KGySoft.Drawing.WinApi.User32.NativeMethods.DestroyIcon(System.IntPtr)"/> function.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.WinApi.User32.NativeMethods.DestroyCursor(System.IntPtr)">
            <summary>
            Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.
            </summary>
            <param name="hCursor">A handle to the cursor to be destroyed. The cursor must not be in use.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SGHFI.SHGFI_USEFILEATTRIBUTES">
            <summary>
            Indicates that the function should not attempt to access the file specified by pszPath.
            Rather, it should act as if the file specified by pszPath exists with the file attributes passed in dwFileAttributes.
            This flag cannot be combined with the SHGFI_ATTRIBUTES, SHGFI_EXETYPE, or SHGFI_PIDL flags.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SGHFI.SHGFI_ICON">
            <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list.
            The handle is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.ICONLOCATION">
            <summary>
            The szPath and iIcon members of the SHSTOCKICONINFO structure receive the path and icon index of the requested icon, in a format suitable for passing to the ExtractIcon function. The numerical value of this flag is zero, so you always get the icon location regardless of other flags.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.ICON">
            <summary>
            The hIcon member of the SHSTOCKICONINFO structure receives a handle to the specified icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.SYSICONINDEX">
            <summary>
            The iSysImageImage member of the SHSTOCKICONINFO structure receives the index of the specified icon in the system imagelist.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.LINKOVERLAY">
            <summary>
            Modifies the SHGSI_ICON value by causing the function to add the link overlay to the file's icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.SELECTED">
            <summary>
            Modifies the SHGSI_ICON value by causing the function to blend the icon with the system highlight color.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.LARGEICON">
            <summary>
            Modifies the SHGSI_ICON value by causing the function to retrieve the large version of the icon, as specified by the SM_CXICON and SM_CYICON system metrics.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.SMALLICON">
            <summary>
            Modifies the SHGSI_ICON value by causing the function to retrieve the small version of the icon, as specified by the SM_CXSMICON and SM_CYSMICON system metrics.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHGSI.SHELLICONSIZE">
            <summary>
            Modifies the SHGSI_LARGEICON or SHGSI_SMALLICON values by causing the function to retrieve the Shell-sized icons rather than the sizes specified by the system metrics.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.BLACKNESS">
            <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.CAPTUREBLT">
            <summary>
            Includes any windows that are layered on top of your window in the resulting image. By default, the image only contains your window. Note that this generally cannot be used for printing device contexts.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.DSTINVERT">
            <summary>
            Inverts the destination rectangle.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.MERGECOPY">
            <summary>
            Merges the colors of the source rectangle with the brush currently selected in hdcDest, by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.MERGEPAINT">
            <summary>
            Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.NOTSRCCOPY">
            <summary>
            Copies the inverted source rectangle to the destination.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.NOTSRCERASE">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator and then inverts the resultant color.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.PATCOPY">
            <summary>
            Copies the brush currently selected in hdcDest, into the destination bitmap.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.PATINVERT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the destination rectangle by using the Boolean XOR operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.PATPAINT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle by using the Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.SRCAND">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.SRCCOPY">
            <summary>
            Copies the source rectangle directly to the destination rectangle.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.SRCERASE">
            <summary>
            Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.SRCINVERT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean XOR operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.SRCPAINT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.TernaryRasterOperations.WHITENESS">
            <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.WinApi.BITMAPINFOHEADER">
            <summary>
            The BITMAPINFOHEADER structure contains information about the dimensions and color format of a DIB.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biSize">
            <summary>
            The number of bytes required by the structure.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biWidth">
            <summary>
            The width of the bitmap, in pixels.
            If biCompression is BI_JPEG or BI_PNG, the biWidth member specifies the width of the decompressed JPEG or PNG image file, respectively.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biHeight">
            <summary>
            The height of the bitmap, in pixels. If biHeight is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner. If biHeight is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            If biHeight is negative, indicating a top-down DIB, biCompression must be either BI_RGB or BI_BITFIELDS. Top-down DIBs cannot be compressed.
            If biCompression is BI_JPEG or BI_PNG, the biHeight member specifies the height of the decompressed JPEG or PNG image file, respectively.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biPlanes">
            <summary>
            The number of planes for the target device. This value must be set to 1.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biBitCount">
            <summary>
            The number of bits-per-pixel. The biBitCount member of the BITMAPINFOHEADER structure determines the number of bits that define each pixel and the maximum number of colors in the bitmap. This member must be one of the following values.
            <p>0	The number of bits-per-pixel is specified or is implied by the JPEG or PNG format.</p>
            <p>1	The bitmap is monochrome, and the bmiColors member of BITMAPINFO contains two entries. Each bit in the bitmap array represents a pixel. If the bit is clear, the pixel is displayed with the color of the first entry in the bmiColors table; if the bit is set, the pixel has the color of the second entry in the table.</p>
            <p>4	The bitmap has a maximum of 16 colors, and the bmiColors member of BITMAPINFO contains up to 16 entries. Each pixel in the bitmap is represented by a 4-bit index into the color table. For example, if the first byte in the bitmap is 0x1F, the byte represents two pixels. The first pixel contains the color in the second table entry, and the second pixel contains the color in the sixteenth table entry.</p>
            <p>8	The bitmap has a maximum of 256 colors, and the bmiColors member of BITMAPINFO contains up to 256 entries. In this case, each byte in the array represents a single pixel.</p>
            <p>16	The bitmap has a maximum of 2^16 colors. If the biCompression member of the BITMAPINFOHEADER is BI_RGB, the bmiColors member of BITMAPINFO is NULL. Each WORD in the bitmap array represents a single pixel. The relative intensities of red, green, and blue are represented with five bits for each color component. The value for blue is in the least significant five bits, followed by five bits each for green and red. The most significant bit is not used. The bmiColors color table is used for optimizing colors used on palette-based devices, and must contain the number of entries specified by the biClrUsed member of the BITMAPINFOHEADER.
            If the biCompression member of the BITMAPINFOHEADER is BI_BITFIELDS, the bmiColors member contains three DWORD color masks that specify the red, green, and blue components, respectively, of each pixel. Each WORD in the bitmap array represents a single pixel.
            When the biCompression member is BI_BITFIELDS, bits set in each DWORD mask must be contiguous and should not overlap the bits of another mask. All the bits in the pixel do not have to be used.</p>
            <p>24	The bitmap has a maximum of 2^24 colors, and the bmiColors member of BITMAPINFO is NULL. Each 3-byte triplet in the bitmap array represents the relative intensities of blue, green, and red, respectively, for a pixel. The bmiColors color table is used for optimizing colors used on palette-based devices, and must contain the number of entries specified by the biClrUsed member of the BITMAPINFOHEADER.</p>
            <p>32	The bitmap has a maximum of 2^32 colors. If the biCompression member of the BITMAPINFOHEADER is BI_RGB, the bmiColors member of BITMAPINFO is NULL. Each DWORD in the bitmap array represents the relative intensities of blue, green, and red for a pixel. The value for blue is in the least significant 8 bits, followed by 8 bits each for green and red. The high byte in each DWORD is not used. The bmiColors color table is used for optimizing colors used on palette-based devices, and must contain the number of entries specified by the biClrUsed member of the BITMAPINFOHEADER.
            If the biCompression member of the BITMAPINFOHEADER is BI_BITFIELDS, the bmiColors member contains three DWORD color masks that specify the red, green, and blue components, respectively, of each pixel. Each DWORD in the bitmap array represents a single pixel.
            When the biCompression member is BI_BITFIELDS, bits set in each DWORD mask must be contiguous and should not overlap the bits of another mask. All the bits in the pixel do not need to be used.</p>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biCompression">
            <summary>
            The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed). This member can be one of the following values.
            <p>BI_RGB	An uncompressed format.</p>
            <p>BI_RLE8	A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte format consisting of a count byte followed by a byte containing a color index. For more information, see Bitmap Compression.</p>
            <p>BI_RLE4	An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte followed by two word-length color indexes. For more information, see Bitmap Compression.</p>
            <p>BI_BITFIELDS	Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green, and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.</p>
            <p>BI_JPEG	Indicates that the image is a JPEG image.</p>
            <p>BI_PNG	Indicates that the image is a PNG image.</p>
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biSizeImage">
            <summary>
            The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.
            If biCompression is BI_JPEG or BI_PNG, biSizeImage indicates the size of the JPEG or PNG image buffer, respectively.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. An application can use this value to select a bitmap from a resource group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>
            The vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biClrUsed">
            <summary>
            The number of color indexes in the color table that are actually used by the bitmap. If this value is zero, the bitmap uses the maximum number of colors corresponding to the value of the biBitCount member for the compression mode specified by biCompression.
            If biClrUsed is nonzero and the biBitCount member is less than 16, the biClrUsed member specifies the actual number of colors the graphics engine or device driver accesses. If biBitCount is 16 or greater, the biClrUsed member specifies the size of the color table used to optimize performance of the system color palettes. If biBitCount equals 16 or 32, the optimal color palette starts immediately following the three DWORD masks.
            When the bitmap array immediately follows the BITMAPINFO structure, it is a packed bitmap. Packed bitmaps are referenced by a single pointer. Packed bitmaps require that the biClrUsed member must be either zero or the actual size of the color table.
             </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.BITMAPINFOHEADER.biClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIR.idReserved">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIR.idType">
            <summary>
            1 for icons, 2 for cursors.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIR.idCount">
            <summary>
            The number of images in the icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.bWidth">
            <summary>
            The icon width in pixels. 0 for >=256 width or PNG compressed icons.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.bHeight">
            <summary>
            The icon height in pixels. 0 for >=256 height or PNG compressed icons.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.bColorCount">
            <summary>
            Number of colors in the image. 0 for 256 or more colors.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.bReserved">
            <summary>
            Reserved byte. Always 0.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.wPlanes">
            <summary>
            Color planes. Always 1.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.wBitCount">
            <summary>
            Bits per pixel.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.dwBytesInRes">
            <summary>
            Length of the image in bytes including header and palette size.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONDIRENTRY.dwImageOffset">
            <summary>
            Start offset of the image insize of the icon in bytes.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.WinApi.ICONINFO">
            <summary>
            Contains information about an icon or a cursor.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONINFO.fIcon">
            <summary>
            Specifies whether this structure defines an icon or a cursor. A value of TRUE specifies an icon; FALSE specifies a cursor.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONINFO.xHotspot">
            <summary>
            The x-coordinate of a cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONINFO.yHotspot">
            <summary>
            The y-coordinate of the cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONINFO.hbmMask">
            <summary>
            The icon bitmask bitmap. If this structure defines a black and white icon, this bitmask is formatted so that the upper half is the icon AND bitmask and the lower half is the icon XOR bitmask. Under this condition, the height should be an even multiple of two. If this structure defines a color icon, this mask only defines the AND bitmask of the icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.ICONINFO.hbmColor">
            <summary>
            A handle to the icon color bitmap. This member can be optional if this structure defines a black and white icon. The AND bitmask of hbmMask is applied with the SRCAND flag to the destination; subsequently, the color bitmap is applied (using XOR) to the destination by using the SRCINVERT flag.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.WinApi.RGBQUAD">
            <summary>
            The RGBQUAD structure describes a color consisting of relative intensities of red, green, and blue.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.RGBQUAD.rgbBlue">
            <summary>
            The intensity of blue in the color.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.RGBQUAD.rgbGreen">
            <summary>
            The intensity of green in the color.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.RGBQUAD.rgbRed">
            <summary>
            The intensity of red in the color.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.RGBQUAD.rgbReserved">
            <summary>
            This member is reserved and must be zero.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.WinApi.SHFILEINFO">
            <summary>
            Contains information about a file object.
            </summary>
            <remarks>
            This structure is used with the SHGetFileInfo function.
            </remarks>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHFILEINFO.hIcon">
            <summary>
            Type: HICON
            A handle to the icon that represents the file. You are responsible for destroying this handle with DestroyIcon when you no longer need it.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHFILEINFO.iIcon">
            <summary>
            Type: int
            The index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHFILEINFO.dwAttributes">
            <summary>
            Type: DWORD
            An array of values that indicates the attributes of the file object. For information about these values, see the IShellFolder::GetAttributesOf method.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHFILEINFO.szDisplayName">
            <summary>
            Type: TCHAR[MAX_PATH]
            A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHFILEINFO.szTypeName">
            <summary>
            Type: TCHAR[80]
            A string that describes the type of file.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.WinApi.SHSTOCKICONINFO">
            <summary>
            Receives information used to retrieve a stock Shell icon. This structure is used in a call SHGetStockIconInfo.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHSTOCKICONINFO.cbSize">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHSTOCKICONINFO.hIcon">
            <summary>
            When SHGetStockIconInfo is called with the SHGSI_ICON flag, this member receives a handle to the icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHSTOCKICONINFO.iSysIconIndex">
            <summary>
            When SHGetStockIconInfo is called with the SHGSI_SYSICONINDEX flag, this member receives the index of the image in the system icon cache.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHSTOCKICONINFO.iIcon">
            <summary>
            When SHGetStockIconInfo is called with the SHGSI_ICONLOCATION flag, this member receives the index of the icon in the resource whose path is received in szPath.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.WinApi.SHSTOCKICONINFO.szPath">
            <summary>
            Type: TCHAR[MAX_PATH]
            When SHGetStockIconInfo is called with the SHGSI_ICONLOCATION flag, this member receives the path of the resource that contains the icon. The index of the icon within the resource is received in iIcon.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.ColorChannels">
            <summary>
            Represents the RGB color channels when manipulating images.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.None">
            <summary>
            Represents none of the color channels.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.R">
            <summary>
            Represents the Red color channel.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.G">
            <summary>
            Represents the Green color channel.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.B">
            <summary>
            Represents the Blue color channel.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ColorChannels.Rgb">
            <summary>
            Represents the R, G and B color channels.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.DrawingOperation">
            <summary>
            Represents various drawing operations that can be used with the <see cref="T:KGySoft.Drawing.IDrawingProgress"/> type.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.UndefinedProcessing">
            <summary>
            Represents indefinite processing
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.InitializingQuantizer">
            <summary>
            Represents the initialization of a quantizer
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.InitializingDitherer">
            <summary>
            Represents the initialization of a ditherer
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.GeneratingPalette">
            <summary>
            Represents a palette-generating operation. Can be the part of another operation, such as quantizer initialization.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.ProcessingPixels">
            <summary>
            Represents an operation that processes pixels. An more complex async method may perform multiple processing operations one after another.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.Saving">
            <summary>
            Represents a saving operation.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.DrawingOperation.Loading">
            <summary>
            Represents a loading operation.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.ScalingMode">
            <summary>
            Represents the scaling mode when an image needs to be resized.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Auto">
            <summary>
            Represents an automatically selected scaling mode based on source/target sizes providing the best quality.
            In practice, the <see cref="F:KGySoft.Drawing.ScalingMode.MitchellNetravali"/> scaling mode is selected if either the width or height is enlarged,
            and the <see cref="F:KGySoft.Drawing.ScalingMode.Bicubic"/> scaling mode, if there is shrinking in both dimensions.
            If source and target sizes are the same, then <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/> is selected.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.NoScaling">
            <summary>
            Represents no scaling. When source and target sizes are different, then clipping might occur.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.NearestNeighbor">
            <summary>
            Represents the nearest neighbor scaling mode, which always selects the closest pixel when scaling.
            Apart from <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/> this is the fastest scaling mode but provides the poorest quality.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Box">
            <summary>
            Represents box scaling mode. When downscaling, the pixels will average.
            When upscaling, the result is identical to <see cref="F:KGySoft.Drawing.ScalingMode.NearestNeighbor"/>.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Bilinear">
            <summary>
            Represents a 2-dimensional linear interpolation scaling mode. It is among the faster scaling techniques but
            it provides an acceptable quality only if the difference between the source and target size does not exceed 25%.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Bicubic">
            <summary>
            Represents the bicubic interpolation. It both preserves sharpness and reduces artifacts quite well.
            This is the default scaling mode when downscaling images.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Lanczos2">
            <summary>
            Represents the resampling algorithm suggested by Kornél Lánczos using a kernel radius of 2 pixels.
            It both preserves sharpness and reduces artifacts quite well. When downscaling, acts also as a low-pass filter.
            The result is usually similar to the bicubic filter.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Lanczos3">
            <summary>
            Represents the resampling algorithm suggested by Kornél Lánczos using a kernel radius of 3 pixels.
            It is among the slower filters and it tends to increase the sharpness of the original image.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Spline">
            <summary>
            Represents the spline cubic interpolation. It provides smooth results but it tends to overly blur the details.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.CatmullRom">
            <summary>
            Represents the Catmull-Rom cubic interpolation. Similarly to the bicubic interpolation
            it preserves sharpness quite well without producing strong artifacts.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.MitchellNetravali">
            <summary>
            Represents the Mitchell-Netravali cubic interpolation. Usually it produces very good results.
            This is the default scaling mode when upscaling images.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.ScalingMode.Robidoux">
            <summary>
            Represents the Robidoux cubic interpolation. It produces a very similar result to the Mitchell-Netravali interpolation.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.StockIcon">
            <summary>
            Represents the Windows stock icons can be retrieved by the <see cref="M:KGySoft.Drawing.Icons.GetStockIcon(KGySoft.Drawing.StockIcon)">Icons.GetStockIcon</see> method in Windows Vista and above.
            <br/>See also the <a href="https://docs.microsoft.com/en-us/windows/desktop/api/shellapi/ne-shellapi-shstockiconid" target="_blank">SHSTOCKICONID Enumeration</a> at the Microsoft Docs site.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DocNoAssoc">
            <summary>
             Document of a type with no associated application.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DocAssoc">
            <summary>
             Document of a type with an associated application.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Application">
            <summary>
            Generic application with no custom icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Folder">
            <summary>
            Folder (generic, unspecified state).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.FolderOpen">
            <summary>
             Folder (open).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Drive525">
            <summary>
            5.25-inch disk drive.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Drive35">
            <summary>
             3.5-inch disk drive.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveRemove">
            <summary>
            Removable drive.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveFixed">
            <summary>
             Fixed drive (hard disk).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveNet">
            <summary>
            Network drive (connected).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveNetDisabled">
            <summary>
            Network drive (disconnected).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveCD">
            <summary>
            CD drive.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveRam">
            <summary>
            RAM disk drive.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.World">
            <summary>
            The entire network.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Server">
            <summary>
            A computer on the network.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Printer">
            <summary>
             A local printer or print destination.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MyNetwork">
            <summary>
            The Network virtual folder
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Find">
            <summary>
            The Search feature.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Help">
            <summary>
            The Help and Support feature.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Share">
            <summary>
            Overlay for a shared item.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Link">
            <summary>
            Overlay for a shortcut.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.SlowFile">
            <summary>
            Overlay for items that are expected to be slow to access.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Recycler">
            <summary>
            The Recycle Bin (empty).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.RecyclerFull">
            <summary>
            The Recycle Bin (not empty).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaCDAudio">
            <summary>
            Audio CD media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Lock">
            <summary>
            Security lock.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.AutoList">
            <summary>
            A virtual folder that contains the results of a search.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.PrinterNet">
            <summary>
            A network printer.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.ServerShare">
            <summary>
            A server shared on a network.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.PrinterFax">
            <summary>
            A local fax printer.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.PrinterFaxNet">
            <summary>
            A network fax printer.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.PrinterFile">
            <summary>
            A file that receives the output of a Print to file operation.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Stack">
            <summary>
            A category that results from a Stack by command to organize the contents of a folder.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaSvcd">
            <summary>
            Super Video CD (SVCD) media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.StuffedFolder">
            <summary>
            A folder that contains only subfolders as child items.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveUnknown">
            <summary>
            Unknown drive type.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveDvd">
            <summary>
            DVD drive.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaDvd">
            <summary>
            DVD media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaDvdRam">
            <summary>
            DVD-RAM media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaDvdRW">
            <summary>
            DVD-RW media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaDvdR">
            <summary>
            DVD-R media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaDvdRom">
            <summary>
            DVD-ROM media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaCDAudioPlus">
            <summary>
            CD+ (enhanced audio CD) media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaCDRW">
            <summary>
            CD-RW media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaCDR">
            <summary>
            CD-R media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaCDBurn">
            <summary>
            A writeable CD in the process of being burned.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaBlankCD">
            <summary>
            Blank writable CD media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaCDRom">
            <summary>
            CD-ROM media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.AudioFiles">
            <summary>
            An audio file.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.ImageFiles">
            <summary>
            An image file.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.VideoFiles">
            <summary>
            A video file.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MixedFiles">
            <summary>
            A mixed file.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.FolderBack">
            <summary>
            Folder back.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.FolderFront">
            <summary>
            Folder front.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Shield">
            <summary>
            Security shield. Use for UAC prompts only.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Warning">
            <summary>
            The warning icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Information">
            <summary>
            The information icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Error">
            <summary>
            The error icon.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Software">
            <summary>
            Software.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Rename">
            <summary>
            A UI item, such as a button, that issues a rename command.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Delete">
            <summary>
             A UI item, such as a button, that issues a delete command.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaAudioDvd">
            <summary>
            Audio DVD media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediamMoieDvd">
            <summary>
            Movie DVD media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaEnhancedCD">
            <summary>
            Enhanced CD media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaEnhancedDvd">
            <summary>
            Enhanced DVD media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaHDDvd">
            <summary>
            High definition DVD media in the HD DVD format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaBluray">
            <summary>
            High definition DVD media in the Blu-ray Disc™ format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaVcd">
            <summary>
            Video CD (VCD) media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaDvdPlusR">
            <summary>
            DVD+R media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaDvdPlusRW">
            <summary>
            DVD+RW media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DesktopPC">
            <summary>
            A desktop computer.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MobilePC">
            <summary>
            A mobile computer (laptop).
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Users">
            <summary>
            The User Accounts Control Panel item.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaSmartMedia">
            <summary>
             Smart media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaCompactFlash">
            <summary>
            CompactFlash media.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DeviceCellphone">
            <summary>
            A cell phone.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DeviceCamera">
            <summary>
            A digital camera.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DeviceVideoCamera">
            <summary>
             A digital video camera.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DeviceAudioPlayer">
            <summary>
            An audio player.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.NetworkConnect">
            <summary>
            Connect to network.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Internet">
            <summary>
            The Network and Internet Control Panel item.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.ZipFile">
            <summary>
            A compressed file with a .zip file name extension.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.Settings">
            <summary>
            The Additional Options Control Panel item.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveHDDvd">
            <summary>
            Windows Vista with Service Pack 1 (SP1) and later. High definition DVD drive (any type - HD DVD-ROM, HD DVD-R, HD-DVD-RAM) that uses the HD DVD format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.DriveBD">
            <summary>
            Windows Vista with SP1 and later. High definition DVD drive (any type - BD-ROM, BD-R, BD-RE) that uses the Blu-ray Disc format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaHDDvdRom">
            <summary>
            Windows Vista with SP1 and later. High definition DVD-ROM media in the HD DVD-ROM format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaHDDvdR">
            <summary>
            Windows Vista with SP1 and later. High definition DVD-R media in the HD DVD-R format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaHDDvdRam">
            <summary>
            Windows Vista with SP1 and later. High definition DVD-RAM media in the HD DVD-RAM format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaBDRom">
            <summary>
            Windows Vista with SP1 and later. High definition DVD-ROM media in the Blu-ray Disc BD-ROM format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaBDR">
            <summary>
            Windows Vista with SP1 and later. High definition write-once media in the Blu-ray Disc BD-R format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.MediaBDRE">
            <summary>
            Windows Vista with SP1 and later. High definition read/write media in the Blu-ray Disc BD-RE format.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.StockIcon.ClusteredDrive">
            <summary>
            Windows Vista with SP1 and later. A cluster disk array.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.SystemIconSize">
            <summary>
            Represents the predefined system icon sizes.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.SystemIconSize.Large">
            <summary>
            Represents the larger version of an icon. With 100% scale settings (96 DPI) this usually means the 32x32 system icon size.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.SystemIconSize.Small">
            <summary>
            Represents the smaller version of an icon. With 100% scale settings (96 DPI) this usually means the 16x16 system icon size.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.BitmapExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Drawing.Bitmap"/> type.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.Resize(System.Drawing.Bitmap,System.Drawing.Size,System.Boolean)">
            <summary>
            Resizes the image with high quality. The result always has a <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/> pixel format.
            <br/>This overload uses <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">Graphics.DrawImage</see> internally,
            which provides a good quality result but on Windows blocks every parallel <see cref="O:System.Drawing.Graphics.DrawImage">DrawImage</see> call within the same process.
            If that might be an issue use the <see cref="M:KGySoft.Drawing.BitmapExtensions.Resize(System.Drawing.Bitmap,System.Drawing.Size,KGySoft.Drawing.ScalingMode,System.Boolean)"/> overload instead.
            </summary>
            <param name="image">The original image to resize</param>
            <param name="newSize">The requested new size.</param>
            <param name="keepAspectRatio"><see langword="true"/>&#160;to keep aspect ratio of the source <paramref name="image"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance with the new size.</returns>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.Resize(System.Drawing.Bitmap,System.Drawing.Size,KGySoft.Drawing.ScalingMode,System.Boolean)">
            <summary>
            Resizes the image using the specified <paramref name="scalingMode"/>. The result always has a <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/> pixel format.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The original image to resize</param>
            <param name="newSize">The requested new size.</param>
            <param name="scalingMode">A <see cref="T:KGySoft.Drawing.ScalingMode"/> value, which determines the quality of the result as well as the processing time.</param>
            <param name="keepAspectRatio"><see langword="true"/>&#160;to keep aspect ratio of the source <paramref name="image"/>; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance with the new size.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method always produces a result with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/>. To resize an image
            with a custom pixel format you can create a new <see cref="T:System.Drawing.Bitmap"/> with the <see cref="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)"/> constructor
            and use the <see cref="O:KGySoft.Drawing.ImageExtensions.DrawInto">DrawInto</see> extension methods.</para>
            <para>Generally, the best quality result can be achieved by the <see cref="M:KGySoft.Drawing.BitmapExtensions.Resize(System.Drawing.Bitmap,System.Drawing.Size,System.Boolean)"/> overload, which
            uses <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">Graphics.DrawImage</see> internally. On Windows some <see cref="T:System.Drawing.Graphics"/>
            members use process-wide locks, which prevent them to be called concurrently without blocking. If that can be an issue you should use this overload.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.ExtractBitmaps(System.Drawing.Bitmap)">
            <summary>
            When <paramref name="image"/> contains multiple pages, frames or multi-resolution sub-images, returns them as separated <see cref="T:System.Drawing.Bitmap"/> instances.
            Otherwise, returns a new <see cref="T:System.Drawing.Bitmap"/> with the copy of the original <paramref name="image"/>.
            </summary>
            <param name="image">An <see cref="T:System.Drawing.Image"/> instance, which may contain multiple pages, frames or multi-resolution sub-images.</param>
            <returns>An array of <see cref="T:System.Drawing.Bitmap"/> instances, which contains the images of the provided <paramref name="image"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.CloneCurrentFrame(System.Drawing.Bitmap)">
            <summary>
            Creates a clone of the current frame of the provided <see cref="T:System.Drawing.Bitmap"/> instance. Unlike the <see cref="M:System.Drawing.Bitmap.#ctor(System.Drawing.Image)"/> constructor, this method preserves original pixel format,
            and unlike <see cref="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">Bitmap.Clone(Rectangle,PixelFormat)</see> method, this method returns a single frame image.
            </summary>
            <param name="bitmap">The bitmap to be cloned.</param>
            <returns>A single frame <see cref="T:System.Drawing.Bitmap"/> instance that has the same content and has the same pixel format as the current frame of the source bitmap.</returns>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.GetColors(System.Drawing.Bitmap,System.Int32,System.Boolean)">
            <summary>
            Gets the colors used in the defined <paramref name="bitmap"/>. A limit can be defined in <paramref name="maxColors"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The bitmap, whose colors have to be returned. If it is indexed and the <paramref name="forceScanningContent"/> parameter is <see langword="false"/>,
            then its palette entries are returned and <paramref name="maxColors"/> is ignored.</param>
            <param name="maxColors">A limit of the returned colors. If <paramref name="forceScanningContent"/> parameter is <see langword="false"/>, then
            this parameter is ignored for indexed bitmaps. Use 0 for no limit. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="forceScanningContent"><see langword="true"/>&#160;to force scanning the actual image content even if the specified <paramref name="bitmap"/> is
            indexed and has a palette. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An array of <see cref="T:System.Drawing.Color"/> entries.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColors(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginGetColors</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorsAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Int32,System.Boolean,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.GetColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>Completely transparent pixels are considered the same regardless of their color information.</para>
            <para>Every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported, though wide color formats (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>,
            <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/> and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>) are quantized to 32 bit during the processing.
            To get the actual <em>number</em> of colors, which is accurate even for wide color formats, use the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetColorCount(System.Drawing.Bitmap)">GetColorCount</see> method.
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            </para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.GetColorCount(System.Drawing.Bitmap)">
            <summary>
            Gets the actual number of colors of the specified <paramref name="bitmap"/>. Colors are counted even for indexed bitmaps.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The bitmap, whose colors have to be counted to count its colors.</param>
            <returns>The actual number of colors of the specified <paramref name="bitmap"/>.</returns>
            <remarks>
            <note>This method blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginGetColorCount(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginGetColorCount</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.GetColorCountAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.GetColorCountAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <para>Completely transparent pixels are considered the same regardless of their color information.</para>
            <para>Every <see cref="T:System.Drawing.Imaging.PixelFormat"/> is supported, but an accurate result is returned for wide color formats only
            when <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.RowSize"/> is large enough to access all pixels directly (might not be the case for a clipped bitmap data, for example).
            Otherwise, colors are quantized to 32 bits-per-pixel values while counting them.
            Wide pixel formats are <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/> and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/>.
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
            </para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.ToCursorHandle(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Converts the provided <paramref name="bitmap"/> to a <see cref="T:KGySoft.Drawing.CursorHandle"/>, which can be passed to the
            <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">System.Windows.Forms.Cursor</a> constructor
            to create a new cursor that supports colors and partial transparency. <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/>, which should be converted to a cursor.</param>
            <param name="cursorHotspot">The hotspot coordinates of the cursor. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Point.Empty">Point.Empty</see> (top-left corner)</param>
            <returns>A <see cref="T:KGySoft.Drawing.CursorHandle"/> instance that can be used to create a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">System.Windows.Forms.Cursor</a> instance.</returns>
            <remarks>
            <note>This method is supported on Windows only.</note>
            <para>Though the documentation of the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">System.Windows.Forms.Cursor</a>
            class states that it does not support cursors with colors other than black and white, by using this method you can create a cursor that supports colors and partial transparency.
            Just pass the result <see cref="T:KGySoft.Drawing.CursorHandle"/> to the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor.-ctor" target="_blank">Cursor(IntPtr)</a> constructor.
            <note type="important">Do keep a reference to this <see cref="T:KGySoft.Drawing.CursorHandle"/> instance until the cursor is in use; otherwise, the cursor resources might be disposed too soon.</note></para>
            </remarks>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance, which provides fast read-only access to the actual data of the specified <paramref name="bitmap"/>.
            The <paramref name="bitmap"/> can have any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> instance, whose data is about to be accessed.</param>
            <param name="backColor">For an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance the <paramref name="backColor"/> is relevant only for indexed bitmaps
            when <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> methods
            are called with an alpha color on the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property. Queried colors with alpha, which are considered opaque will be blended
            with this color before performing a lookup. The alpha value (<see cref="P:System.Drawing.Color.A">Color.A</see> property) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Similarly to <paramref name="backColor"/>, for an <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance the <paramref name="alphaThreshold"/> is relevant
            only for indexed bitmaps when <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColorIndex(KGySoft.Drawing.Imaging.Color32)">GetNearestColorIndex</see> and <see cref="M:KGySoft.Drawing.Imaging.Palette.GetNearestColor(KGySoft.Drawing.Imaging.Color32)">GetNearestColor</see> methods
            are called with an alpha color on the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.Palette"/> property. In such case determines the lowest alpha value of a color,
            which should not be considered as transparent. If 0, then a color lookup will never return a transparent color. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> instance, which provides fast read-only access to the actual data of the specified <paramref name="bitmap"/>.</returns>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instance, which provides fast write-only access to the actual data of the specified <paramref name="bitmap"/>.
            The <paramref name="bitmap"/> can have any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method for details and examples.
            </summary>
            <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> instance, whose data is about to be accessed.</param>
            <param name="backColor">When setting pixels of indexed bitmaps and bitmaps without alpha support or with single bit alpha, then specifies the color of the background.
            Color values with alpha, which are considered opaque will be blended with this color before setting the pixel in the result bitmap data.
            The alpha value (<see cref="P:System.Drawing.Color.A">Color.A</see> property) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">When setting pixels of bitmaps with single bit alpha or with a palette that has a transparent color,
            then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
            then the pixels to be set will never be transparent. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <returns>An <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> instance, which provides fast write-only access to the actual data of the specified <paramref name="bitmap"/>.</returns>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">
             <summary>
             Gets an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance, which provides fast read-write access to the actual data of the specified <paramref name="bitmap"/>.
             The <paramref name="bitmap"/> can have any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
             <br/>See the <strong>Remarks</strong> section for details and examples.
             </summary>
             <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> instance, whose data is about to be accessed.</param>
             <param name="backColor">When setting pixels of indexed bitmaps and bitmaps without alpha support or with single bit alpha, then specifies the color of the background.
             Color values with alpha, which are considered opaque will be blended with this color before setting the pixel in the result bitmap data.
             The alpha value (<see cref="P:System.Drawing.Color.A">Color.A</see> property) of the specified background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">When setting pixels of bitmaps with single bit alpha or with a palette that has a transparent color,
             then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
             then the pixels to be set will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>An <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance, which provides fast read-write access to the actual data of the specified <paramref name="bitmap"/>.</returns>
             <remarks>
             <para>All possible <see cref="T:System.Drawing.Imaging.PixelFormat"/>s are supported, of which a <see cref="T:System.Drawing.Bitmap"/> can be created in the current operating system.
             <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> method.</note>
             </para>
             <para>If <paramref name="alphaThreshold"/> is zero, then setting a fully transparent pixel in a bitmap with indexed or single-bit-alpha pixel format
             will blend the pixel to set with <paramref name="backColor"/> even if the bitmap can handle transparent pixels.</para>
             <para>If <paramref name="alphaThreshold"/> is <c>1</c>, then the result color of setting a pixel of a bitmap with indexed or single-bit-alpha pixel format
             will be transparent only if the color to set is completely transparent (has zero alpha).</para>
             <para>If <paramref name="alphaThreshold"/> is <c>255</c>, then the result color of setting a pixel of a bitmap with indexed or single-bit-alpha pixel format
             will be opaque only if the color to set is completely opaque (its alpha value is <c>255</c>).</para>
             <para>If a pixel of a bitmap without alpha gradient support is set by the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>/<see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.SetColor(System.Int32,System.Drawing.Color)">IWritableBitmapDataRow.SetColor</see>
             methods or by the <see cref="P:KGySoft.Drawing.Imaging.IReadWriteBitmapDataRow.Item(System.Int32)">IReadWriteBitmapDataRow indexer</see>, and the pixel has an alpha value that is greater than <paramref name="alphaThreshold"/>,
             then the pixel to set will be blended with <paramref name="backColor"/>.</para>
             <note type="tip">To create a managed <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> instance that supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on any platform
             you can use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)">BitmapDataFactory.CreateBitmapData</see> method.</note>
             </remarks>
             <example>
             <para>The following example demonstrates how easily you can copy the content of a 32-bit ARGB image into an 8-bit indexed one by
             using the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadableBitmapData</see> and <see cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetWritableBitmapData</see> methods:</para>
             <code lang="C#"><![CDATA[
             var targetFormat = PixelFormat.Format8bppIndexed; // feel free to try other formats as well
             using (Bitmap bmpSrc = Icons.Shield.ExtractBitmap(new Size(256, 256)))
             using (Bitmap bmpDst = new Bitmap(256, 256, targetFormat))
             {
                 using (IReadableBitmapData dataSrc = bmpSrc.GetReadableBitmapData())
                 using (IWritableBitmapData dataDst = bmpDst.GetWritableBitmapData())
                 {
                     for (int y = 0; y < dataSrc.Height; y++)
                     {
                         for (int x = 0; x < dataSrc.Width; x++)
                         {
                             // Please note that bmpDst.SetPixel would not work for indexed formats
                             // and even when it can be used it would be much slower.
                             dataDst.SetPixel(x, y, dataSrc.GetPixel(x, y));
                         }
                     }
                 }
            
                 bmpSrc.SaveAsPng(@"c:\temp\bmpSrc.png");
                 bmpDst.SaveAsPng(@"c:\temp\bmpDst.png"); // or saveAsGif/SaveAsTiff to preserve the indexed format
             }]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>bmpSrc.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Shield icon with transparent background"/></term></item>
             <item><term><c>bmpDst.png</c></term><term><img src="../Help/Images/ShieldDefault8bppBlack.gif" alt="8 BPP shield icon with system default palette"/></term></item>
             </list></para>
             <para>If the pixels are not accessed randomly, then the sequential enumeration of rows can be a bit faster:</para>
             <code lang="C#"><![CDATA[
             // Replace the body of the inner using block of the previous example with the following code:
             IReadableBitmapDataRow rowSrc = dataSrc.FirstRow;
             IWritableBitmapDataRow rowDst = dataDst.FirstRow;
             do
             {
                 for (int x = 0; x < dataSrc.Width; x++)
                     rowDst[x] = rowSrc[x];
             } while (rowSrc.MoveNextRow() && rowDst.MoveNextRow());]]></code>
             <para>For parallel processing you can retrieve multiple rows by the indexer and process them concurrently.
             When targeting .NET Framework 4.0 or newer, the example above can be easily re-written to use parallel processing:</para>
             <code lang="C#"><![CDATA[
             // The parallel version of same body as in the previous example:
             Parallel.For(0, dataSrc.Height, y =>
             {
                 IReadableBitmapDataRow rowSrc = dataSrc[y];
                 IWritableBitmapDataRow rowDst = dataDst[y];
                 for (int x = 0; x < dataSrc.Width; x++)
                     rowDst[x] = rowSrc[x];
             });]]></code>
             <note>The examples above are just for demonstration purpose. For the same result use the <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see>
             methods for more flexibility and optimized parallel processing. The <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload allows using custom quantizer and ditherer implementations as well.</note>
             <para>The following example demonstrates how to use the read-write <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> returned by the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> method
             to manipulate a <see cref="T:System.Drawing.Bitmap"/> in-place:</para>
             <code lang="C#"><![CDATA[
             // This example produces the same result as the MakeGrayscale extension method without a ditherer:
             using (Bitmap bmp = Icons.Shield.ExtractBitmap(new Size(256, 256)))
             {
                 bmp.SaveAsPng(@"c:\temp\before.png");
            
                 using (IReadWriteBitmapData bmpData = bmp.GetReadWriteBitmapData())
                 {
                     IReadWriteBitmapDataRow row = bmpData.FirstRow;
                     do
                     {
                         for (int x = 0; x < bmpData.Width; x++)
                             row[x] = row[x].ToGray();
                     } while (row.MoveNextRow());
                 }
            
                 bmp.SaveAsPng(@"c:\temp\after.png");
             }]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>before.png</c></term><term><img src="../Help/Images/Shield256.png" alt="Color shield icon"/></term></item>
             <item><term><c>after.png</c></term><term><img src="../Help/Images/ShieldGrayscale.png" alt="Grayscale shield icon"/></term></item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataFactory.CreateBitmapData(System.Drawing.Size,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)">
            <summary>
            Quantizes a <paramref name="bitmap"/> using the specified <paramref name="quantizer"/> (reduces the number of colors).
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmap"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> or <paramref name="quantizer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="quantizer"/>'s <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginQuantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginQuantize</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.QuantizeAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.QuantizeAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method quantizes <paramref name="bitmap"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">ConvertPixelFormat</see> extension method instead.</para>
            <para>If the <see cref="T:System.Drawing.Imaging.PixelFormat"/> or the palette of <paramref name="bitmap"/> is not compatible with the colors of the specified <paramref name="quantizer"/>, then
            the result may not be correct.</para>
            <para>If <paramref name="bitmap"/> has already the same set of colors that the specified <paramref name="quantizer"/>, then it can happen
            that calling this method does not change <paramref name="bitmap"/> at all.</para>
            <note type="tip"><list type="bullet">
            <item>To use predefined colors or custom quantization functions use the static methods of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of its members for details and examples.</item>
            <item>To use an optimized palette of up to 256 colors adjusted for <paramref name="bitmap"/> see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</item>
            </list></note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Quantize(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Quantizes a <paramref name="bitmap"/> with dithering (reduces the number of colors while trying to preserve details)
            using the specified <paramref name="quantizer"/> and <paramref name="ditherer"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> instance to be quantized.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementation to be used for quantizing the specified <paramref name="bitmap"/>.</param>
            <param name="ditherer">An <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementation to be used for dithering during the quantization of the specified <paramref name="bitmap"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/>, <paramref name="quantizer"/> or <paramref name="ditherer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:KGySoft.Drawing.Imaging.IQuantizer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.IAsyncContext)">IQuantizer.Initialize</see> method
            or the <see cref="M:KGySoft.Drawing.Imaging.IDitherer.Initialize(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IQuantizingSession,KGySoft.Drawing.IAsyncContext)">IDitherer.Initialize</see> method returned <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDither</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DitherAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DitherAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method quantizes <paramref name="bitmap"/> with dithering in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">ConvertPixelFormat</see> extension method instead.</para>
            <para>If the <see cref="T:System.Drawing.Imaging.PixelFormat"/> or the palette of <paramref name="bitmap"/> is not compatible with the colors of the specified <paramref name="quantizer"/>, then
            the result may not be correct.</para>
            <para>If <paramref name="bitmap"/> has already the same set of colors that the specified <paramref name="quantizer"/>, then it can happen
            that calling this method does not change <paramref name="bitmap"/> at all.</para>
            <note type="tip"><list type="bullet">
            <item>To use predefined colors or custom quantization functions use the static methods of the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.
            <br/>See the <strong>Remarks</strong> section of its members for details and examples.</item>
            <item>To use an optimized palette of up to 256 colors adjusted for <paramref name="bitmap"/> see the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</item>
            <item>For some built-in dithering solutions see the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/>
            and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> classes. All of them have several examples in their <strong>Remarks</strong> section.</item>
            </list></note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Dither(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.Clear(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color,System.Byte)">
            <summary>
            Clears the complete <paramref name="bitmap"/> and fills it with the specified <paramref name="color"/>.
            <br/>This method is similar to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)">Graphics.Clear</see> but can be used for <see cref="T:System.Drawing.Bitmap"/>s of any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be cleared.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the desired result color of the bitmap.</param>
            <param name="backColor">If <paramref name="bitmap"/> cannot have alpha or has only single-bit alpha, and <paramref name="color"/> is not fully opaque, then specifies the color of the background.
            If <paramref name="color"/> has alpha and it is considered opaque, then it will be blended with <paramref name="backColor"/> to determine the color of the cleared <paramref name="bitmap"/>.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="bitmap"/> has only single-bit alpha or its palette contains a transparent color,
            then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the specified <paramref name="color"/> is considered transparent. If 0,
            then the cleared <paramref name="bitmap"/> will not be transparent. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginClear</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ClearAsync(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.ClearAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.Clear(System.Drawing.Bitmap,System.Drawing.Color,KGySoft.Drawing.Imaging.IDitherer,System.Drawing.Color,System.Byte)">
            <summary>
            Clears the complete <paramref name="bitmap"/> and fills it with the specified <paramref name="color"/>.
            <br/>This method is similar to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)">Graphics.Clear</see> but can be used for <see cref="T:System.Drawing.Bitmap"/>s of any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be cleared.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the desired result color of the bitmap.</param>
            <param name="backColor">If <paramref name="bitmap"/> cannot have alpha or has only single-bit alpha, and <paramref name="color"/> is not fully opaque, then specifies the color of the background.
            If <paramref name="color"/> has alpha and it is considered opaque, then it will be blended with <paramref name="backColor"/> to determine the color of the cleared <paramref name="bitmap"/>.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="bitmap"/> has only single-bit alpha or its palette contains a transparent color,
            then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the specified <paramref name="color"/> is considered transparent. If 0,
            then the cleared <paramref name="bitmap"/> will not be transparent. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="ditherer">The ditherer to be used for the clearing. Has no effect if <paramref name="bitmap"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> has at least 24 bits-per-pixel size.
            If <see langword="null"/>, then the <see cref="M:KGySoft.Drawing.BitmapExtensions.Clear(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color,System.Byte)"/> overload will be called.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginClear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginClear</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ClearAsync(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.ClearAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clear(KGySoft.Drawing.Imaging.IWritableBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.TransformColors(System.Drawing.Bitmap,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Color,System.Byte)">
            <summary>
            Transforms the colors of a <paramref name="bitmap"/> using the specified <paramref name="transformFunction"/> delegate.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be transformed.</param>
            <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmap"/>. It must be thread-safe.</param>
            <param name="backColor">If <paramref name="transformFunction"/> returns colors with alpha and <paramref name="bitmap"/> has no alpha or supports single bit alpha only,
            then specifies the color of the background. Color values with alpha, which are considered opaque will be blended with this color before setting the pixel in the specified <paramref name="bitmap"/>.
            The alpha value (<see cref="P:System.Drawing.Color.A">Color.A</see> property) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="transformFunction"/> returns colors with alpha and <paramref name="bitmap"/> supports single bit alpha only,
            then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which the color is considered transparent. If 0,
            then the pixels to be set will never be transparent. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginTransformColors</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColorsAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.TransformColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmap"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">ConvertPixelFormat</see> extension method
            with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</para>
            <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/>, then its palette entries will be transformed instead of the actual pixels.</para>
            <para>On multi-core systems <paramref name="transformFunction"/> might be called concurrently so it must be thread-safe.</para>
            <note type="tip">If <paramref name="transformFunction"/> can return colors incompatible with the pixel format of the specified <paramref name="bitmap"/>, or you want to transform the actual
            pixels of an indexed <see cref="T:System.Drawing.Bitmap"/> instead of modifying the palette, then use the <see cref="M:KGySoft.Drawing.BitmapExtensions.TransformColors(System.Drawing.Bitmap,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,System.Drawing.Color,System.Byte)"/> overload and specify an <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32})"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.TransformColors(System.Drawing.Bitmap,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,System.Drawing.Color,System.Byte)">
             <summary>
             Transforms the colors of a <paramref name="bitmap"/> using the specified <paramref name="transformFunction"/> delegate.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be transformed.</param>
             <param name="transformFunction">The transform function to be used on the colors of the specified <paramref name="bitmap"/>. It must be thread-safe.</param>
             <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if <paramref name="transformFunction"/> returns colors
             that is not compatible with the <see cref="T:System.Drawing.Imaging.PixelFormat"/> of the specified <paramref name="bitmap"/>.</param>
             <param name="backColor">If <paramref name="transformFunction"/> returns colors with alpha and <paramref name="bitmap"/> has no alpha or supports single bit alpha only,
             then specifies the color of the background. Color values with alpha, which are considered opaque will be blended with this color before setting the pixel in the specified <paramref name="bitmap"/>.
             The alpha value (<see cref="P:System.Drawing.Color.A">Color.A</see> property) of the specified background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">If <paramref name="transformFunction"/> returns colors with alpha and <paramref name="bitmap"/> supports single bit alpha only,
             then specifies a threshold value for the <see cref="F:KGySoft.Drawing.Imaging.Color32.A">Color32.A</see> field, under which the color is considered transparent. If 0,
             then the pixels to be set will never be transparent. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> or <paramref name="transformFunction"/> is <see langword="null"/>.</exception>
             <remarks>
             <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginTransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginTransformColors</see>
             or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColorsAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.TransformColorsAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
             <para>This method transforms the <paramref name="bitmap"/> in place (its original content will be overwritten). To return a new instance
             use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">ConvertPixelFormat</see> extension method
             with an <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance created by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomFunction(System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},System.Drawing.Imaging.PixelFormat)">PredefinedColorsQuantizer.FromCustomFunction</see> method.</para>
             <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
             then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
             specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
             <para>On multi-core systems <paramref name="transformFunction"/> might be called concurrently so it must be thread-safe.</para>
             <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use this method:
             <code lang="C#"><![CDATA[
             using Bitmap original = Icons.Shield.ExtractBitmap(new Size(256, 256));
            
             // starting with an indexed image using an optimized 8 BPP palette
             using Bitmap bmp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                 OptimizedPaletteQuantizer.MedianCut());
             
             bmp.SaveAsGif(@"c:\temp\before.gif");
            
             // Transforming colors to grayscale. By specifying a ditherer the original palette is preserved
             // (which is not so optimal for the transformed image anymore). The ditherer tries
             // to approximate the desired result with the original palette as much as possible.
             // Try it also without a ditherer to transform only the palette entries.
             bmp.TransformColors(c => c.ToGray(),
                 ErrorDiffusionDitherer.FloydSteinberg.ConfigureErrorDiffusionMode(byBrightness: true));
            
             // As ditherer was not null now the result is generated using the original palette
             bmp.SaveAsGif(@"c:\temp\after.gif");]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>before.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256Black.gif" alt="Shield icon quantized to 256 colors using the Median Cut algorithm"/></term></item>
             <item><term><c>after.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256TrGrayDitheredFS.gif" alt="Shield icon transformed to grayscale with Floyd-Steinberg dithering while still using an optimized palette for the colored version"/></term></item>
             </list></para>
             </example>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.TransformColors(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.ReplaceColor(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Replaces every <paramref name="oldColor"/> occurrences to <paramref name="newColor"/> in the specified <paramref name="bitmap"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be transformed.</param>
            <param name="oldColor">The original color to be replaced.</param>
            <param name="newColor">The new color to replace <paramref name="oldColor"/> with.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if <paramref name="newColor"/>
            is not compatible with the <see cref="T:System.Drawing.Imaging.PixelFormat"/> of the specified <paramref name="bitmap"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginReplaceColor</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColorAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.ReplaceColorAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="newColor"/> has alpha, which cannot be represented by <paramref name="bitmap"/>, then it will be blended with black.
            Call <see cref="M:KGySoft.Drawing.BitmapExtensions.TransformColors(System.Drawing.Bitmap,System.Func{KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32},KGySoft.Drawing.Imaging.IDitherer,System.Drawing.Color,System.Byte)">TransformColors</see> to use a custom background color instead.</para>
            <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
            specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ReplaceColor(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.Invert(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Inverts the colors of the specified <paramref name="bitmap"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be inverted.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the inverse of the <paramref name="bitmap"/>
            has no exact representation with its <see cref="T:System.Drawing.Imaging.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginInvert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginInvert</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.InvertAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.InvertAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
            specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Invert(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.MakeOpaque(System.Drawing.Bitmap,System.Drawing.Color,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Makes a <paramref name="bitmap"/> opaque using the specified <paramref name="backColor"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to make opaque.</param>
            <param name="backColor">Pixels with alpha in <paramref name="bitmap"/> will be blended with this color.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the specified color is ignored.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if <paramref name="backColor"/>
            is not compatible with the <see cref="T:System.Drawing.Imaging.PixelFormat"/> of the specified <paramref name="bitmap"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginMakeOpaque</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaqueAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.MakeOpaqueAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
            specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeOpaque(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.Color32,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.MakeGrayscale(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Makes a <paramref name="bitmap"/> grayscale.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to make grayscale.</param>
            <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result if grayscale colors
            cannot be represented by the <see cref="T:System.Drawing.Imaging.PixelFormat"/> or the current palette of the specified <paramref name="bitmap"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginMakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginMakeGrayscale</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.MakeGrayscaleAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method transforms the <paramref name="bitmap"/> in place (its original content will be overwritten). To return a new instance
            use the <see cref="M:KGySoft.Drawing.ImageExtensions.ToGrayscale(System.Drawing.Image)">ToGrayscale</see> extension method, which always returns a bitmap with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> format,
            or the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">ConvertPixelFormat</see> method with a grayscale
            quantizer (<see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see>, for example).</para>
            <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
            then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
            specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
            <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.AdjustBrightness(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
             <summary>
             Adjusts the brightness of the specified <paramref name="bitmap"/>.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be transformed.</param>
             <param name="brightness">A float value between -1 and 1, inclusive bounds. Positive values make the <paramref name="bitmap"/> brighter,
             while negative values make it darker.</param>
             <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
             are not compatible with the <see cref="T:System.Drawing.Imaging.PixelFormat"/> of the specified <paramref name="bitmap"/>. This parameter is optional.
             <br/>Default value: <see langword="null"/>.</param>
             <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
             <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
             <remarks>
             <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginAdjustBrightness</see>
             or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightnessAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.AdjustBrightnessAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
             <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
             then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
             specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
             <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use this method:
             <code lang="C#"><![CDATA[
             using Bitmap original = Icons.Shield.ExtractBitmap(new Size(256, 256));
            
             // starting with an indexed image using an optimized 8 BPP palette
             using Bitmap bmp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                 OptimizedPaletteQuantizer.MedianCut());
            
             bmp.SaveAsGif(@"c:\temp\before.gif");
            
             // Making the image darker. By specifying a ditherer the original palette is preserved
             // (which is not so optimal for the transformed image anymore). The ditherer tries
             // to approximate the desired result with the original palette as much as possible.
             // Try it also without a ditherer to transform only the palette entries.
             // Try different brightness values and ColorChannels, too.
             bmp.AdjustBrightness(-0.5f, ErrorDiffusionDitherer.FloydSteinberg, ColorChannels.Rgb);
            
             // As ditherer was not null now the result is generated using the original palette
             bmp.SaveAsGif(@"c:\temp\after.gif");]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>before.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256Black.gif" alt="Shield icon quantized to 256 colors using the Median Cut algorithm"/></term></item>
             <item><term><c>after.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256TrBrightnessFS.gif" alt="Shield icon transformed to be darker with Floyd-Steinberg dithering while still using a palette optimized for the original image"/></term></item>
             </list></para>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="brightness"/> is not between -1 and 1
             <br/>-or-
             <br/><paramref name="channels"/> is out of the defined flags.</exception>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustBrightness(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.AdjustContrast(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
             <summary>
             Adjusts the contrast of the specified <paramref name="bitmap"/>.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be transformed.</param>
             <param name="contrast">A float value between -1 and 1, inclusive bounds. Positive values increase the contrast,
             while negative values decrease the it.</param>
             <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
             are not compatible with the <see cref="T:System.Drawing.Imaging.PixelFormat"/> of the specified <paramref name="bitmap"/>. This parameter is optional.
             <br/>Default value: <see langword="null"/>.</param>
             <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
             <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
             <remarks>
             <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginAdjustContrast</see>
             or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrastAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.AdjustContrastAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
             <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
             then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
             specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
             <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use this method:
             <code lang="C#"><![CDATA[
             using Bitmap original = Icons.Shield.ExtractBitmap(new Size(256, 256));
            
             // starting with an indexed image using an optimized 8 BPP palette
             using Bitmap bmp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                 OptimizedPaletteQuantizer.MedianCut());
            
             bmp.SaveAsGif(@"c:\temp\before.gif");
            
             // Decreasing the contrast. By specifying a ditherer the original palette is preserved
             // (which is not so optimal for the transformed image anymore). The ditherer tries
             // to approximate the desired result with the original palette as much as possible.
             // Try it also without a ditherer to transform only the palette entries.
             // Try different contrast values and ColorChannels, too.
             bmp.AdjustContrast(-0.5f, ErrorDiffusionDitherer.FloydSteinberg, ColorChannels.Rgb);
            
             // As ditherer was not null now the result is generated using the original palette
             bmp.SaveAsGif(@"c:\temp\after.gif");]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>before.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256Black.gif" alt="Shield icon quantized to 256 colors using the Median Cut algorithm"/></term></item>
             <item><term><c>after.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256TrContrastFS.gif" alt="Shield icon with decreased contrast using Floyd-Steinberg dithering and a palette optimized for the untransformed image"/></term></item>
             </list></para>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="contrast"/> is not between -1 and 1
             <br/>-or-
             <br/><paramref name="channels"/> is out of the defined flags.</exception>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustContrast(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.AdjustGamma(System.Drawing.Bitmap,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)">
             <summary>
             Adjusts the gamma correction of the specified <paramref name="bitmap"/>.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be transformed.</param>
             <param name="gamma">A float value between 0 and 10, inclusive bounds. Values less than 1 decrease gamma correction,
             while values above 1 increase it.</param>
             <param name="ditherer">An optional <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> instance to dither the result of the transformation if the transformed colors
             are not compatible with the <see cref="T:System.Drawing.Imaging.PixelFormat"/> of the specified <paramref name="bitmap"/>. This parameter is optional.
             <br/>Default value: <see langword="null"/>.</param>
             <param name="channels">The <see cref="T:KGySoft.Drawing.ColorChannels"/>, on which the adjustment has to be performed. This parameter is optional.
             <br/>Default value: <see cref="F:KGySoft.Drawing.ColorChannels.Rgb"/>.</param>
             <remarks>
             <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginAdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginAdjustGamma</see>
             or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGammaAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.AdjustGammaAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
             <para>If <paramref name="bitmap"/> has an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> and <paramref name="ditherer"/> is <see langword="null"/>,
             then its palette entries will be transformed instead of the actual pixels. To transform the colors of an indexed <see cref="T:System.Drawing.Bitmap"/> without changing the palette
             specify a non-<see langword="null"/>&#160;<paramref name="ditherer"/>. Transforming the palette is both faster and provides a better result.</para>
             <para>The <paramref name="ditherer"/> is ignored for <see cref="T:System.Drawing.Imaging.PixelFormat"/>s with more than 16 bits-per-pixel and for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format.</para>
             </remarks>
             <example>
             The following example demonstrates how to use this method:
             <code lang="C#"><![CDATA[
             using Bitmap original = Icons.Shield.ExtractBitmap(new Size(256, 256));
            
             // starting with an indexed image using an optimized 8 BPP palette
             using Bitmap bmp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                 OptimizedPaletteQuantizer.MedianCut());
            
             bmp.SaveAsGif(@"c:\temp\before.gif");
            
             // Decreasing gamma. By specifying a ditherer the original palette is preserved
             // (which is not so optimal for the transformed image anymore). The ditherer tries
             // to approximate the desired result with the original palette as much as possible.
             // Try it also without a ditherer to transform only the palette entries.
             // Try different values and ColorChannels, too.
             bmp.AdjustGamma(0.5f, ErrorDiffusionDitherer.FloydSteinberg, ColorChannels.Rgb);
            
             // As ditherer was not null now the result is generated using the original palette
             bmp.SaveAsGif(@"c:\temp\after.gif");]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>before.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256Black.gif" alt="Shield icon quantized to 256 colors using the Median Cut algorithm"/></term></item>
             <item><term><c>after.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256TrGammaFS.gif" alt="Shield icon with decreased gamma using Floyd-Steinberg dithering and a palette optimized for the untransformed image"/></term></item>
             </list></para>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="gamma"/> is not between 0 and 10
             <br/>-or-
             <br/><paramref name="channels"/> is out of the defined flags.</exception>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.AdjustGamma(KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Single,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ColorChannels)"/>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.ExtractIconImages(System.Drawing.Bitmap)">
            <summary>
            Tries to extract the icon images from an image.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.BitmapExtensions.CloneBitmap(System.Drawing.Bitmap)">
            <summary>
            Returns a clone of a bitmap in a way that works also on Linux where Image.Clone may return a fully transparent image.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.GraphicsExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Drawing.Graphics"/> type.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.GraphicsExtensions.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rounded rectangle specified by a bounding <see cref="T:System.Drawing.Rectangle"/> and four corner radius values.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> instance to draw on.</param>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> instance to be used for the drawing.</param>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle"/> that bounds the rounded rectangle.</param>
            <param name="radiusTopLeft">Size of the top-left radius.</param>
            <param name="radiusTopRight">Size of the top-right radius.</param>
            <param name="radiusBottomRight">Size of the bottom-right radius.</param>
            <param name="radiusBottomLeft">Size of the bottom-left radius.</param>
        </member>
        <member name="M:KGySoft.Drawing.GraphicsExtensions.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Draws a rounded rectangle specified by a bounding <see cref="T:System.Drawing.Rectangle"/> and a common corner radius value for each corners.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> instance to draw on.</param>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> instance to be used for the drawing.</param>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle"/> that bounds the rounded rectangle.</param>
            <param name="cornerRadius">Size of the corner radius for each corners.</param>
        </member>
        <member name="M:KGySoft.Drawing.GraphicsExtensions.FillRoundedRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rounded rectangle specified by a bounding <see cref="T:System.Drawing.Rectangle"/> and four custom corner radius values.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> instance to draw on.</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> instance to be used for the drawing.</param>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle"/> that bounds the rounded rectangle.</param>
            <param name="radiusTopLeft">Size of the top-left radius.</param>
            <param name="radiusTopRight">Size of the top-right radius.</param>
            <param name="radiusBottomRight">Size of the bottom-right radius.</param>
            <param name="radiusBottomLeft">Size of the bottom-left radius.</param>
        </member>
        <member name="M:KGySoft.Drawing.GraphicsExtensions.FillRoundedRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Fills a rounded rectangle specified by a bounding <see cref="T:System.Drawing.Rectangle"/> and a common corner radius value for each corners.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> instance to draw on.</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> instance to be used for the drawing.</param>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle"/> that bounds the rounded rectangle.</param>
            <param name="cornerRadius">Size of the corner radius for each corners.</param>
        </member>
        <member name="M:KGySoft.Drawing.GraphicsExtensions.ToBitmap(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Copies the <see cref="T:System.Drawing.Graphics"/> object specified in the <paramref name="graphics"/> parameter to a <see cref="T:System.Drawing.Bitmap"/> instance.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> instance to be converted.</param>
            <param name="visibleClipOnly">When <see langword="true"/>, the result will contain only the area represented by <see cref="P:System.Drawing.Graphics.VisibleClipBounds"/> property. When <see langword="false"/>,
            the result will contain the image of the whole container source (when a container object is found), where the visible clip bounds can be identified by <see cref="P:System.Drawing.Graphics.VisibleClipBounds"/> in pixels.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object that contains the image content of the source <see cref="T:System.Drawing.Graphics"/> object, or <see langword="null"/>, when the required area of
            <paramref name="graphics"/> is empty.</returns>
            <remarks>
            <note>This method is supported on Windows only.</note>
            </remarks>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="graphics"/> belongs to a <see cref="T:System.Drawing.Imaging.Metafile"/>, which cannot be accessed until the <paramref name="graphics"/> is disposed.</exception>
        </member>
        <member name="M:KGySoft.Drawing.GraphicsExtensions.CreateRoundedRectangle(System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the path for a rounded rectangle specified by a bounding <see cref="T:System.Drawing.Rectangle"/> structure and four corner radius values.
            </summary>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle"/> structure that bounds the rounded rectangle.</param>
            <param name="radiusTopLeft">Size of the top-left radius.</param>
            <param name="radiusTopRight">Size of the top-right radius.</param>
            <param name="radiusBottomRight">Size of the bottom-right radius.</param>
            <param name="radiusBottomLeft">Size of the bottom-left radius.</param>
        </member>
        <member name="M:KGySoft.Drawing.GraphicsExtensions.CreateRoundedRectangle(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Returns the path for a rounded rectangle specified by a bounding <see cref="T:System.Drawing.Rectangle"/> structure and a common corner radius value for each corners.
            </summary>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle"/> structure that bounds the rounded rectangle.</param>
            <param name="radius">Size of the corner radius for each corners.</param>
        </member>
        <member name="T:KGySoft.Drawing.IconExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Drawing.Icon"/> type.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ToAlphaBitmap(System.Drawing.Icon)">
            <summary>
            Converts the specified <paramref name="icon"/> to a <see cref="T:System.Drawing.Bitmap"/>. While <see cref="M:System.Drawing.Icon.ToBitmap">Icon.ToBitmap</see> may return a wrong result
            when icon contains semi-transparent pixels, this method returns an image, in which alpha channel
            is always correctly applied for the image.
            </summary>
            <param name="icon">The icon optionally with transparency.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> that represents the converted <see cref="T:System.Drawing.Icon"/>.</returns>
            <remarks>
            <para>If <paramref name="icon"/> is not from a native handle, then this method calls the <see cref="M:KGySoft.Drawing.IconExtensions.ExtractNearestBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)">ExtractBitmap</see> method using the icon size
            and <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format as parameters.</para>
            <para>If the <paramref name="icon"/> contains multiple images consider to use either the <see cref="O:KGySoft.Drawing.IconExtensions.ExtractBitmap">ExtractBitmap</see>
            or <see cref="M:KGySoft.Drawing.IconExtensions.ExtractNearestBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)">ExtractNearestBitmap</see> methods to specify the exact image to return,
            or the <see cref="O:KGySoft.Drawing.IconExtensions.ToMultiResBitmap">ToMultiResBitmap</see> methods, which return every images in a single combined <see cref="T:System.Drawing.Bitmap"/>.</para>
            </remarks>
            <seealso cref="O:KGySoft.Drawing.IconExtensions.ExtractBitmap"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ToMultiResBitmap(System.Drawing.Icon)">
            <summary>
            Converts the <paramref name="icon"/> to a <see cref="T:System.Drawing.Bitmap"/> instance, which contains every image of the <paramref name="icon"/>.
            When the returned <see cref="T:System.Drawing.Bitmap"/> is used to create another <see cref="T:System.Drawing.Bitmap"/> or is drawn into a <see cref="T:System.Drawing.Graphics"/>, the best-fitting image is automatically applied.
            </summary>
            <param name="icon">The icon to convert to a multi-resolution <see cref="T:System.Drawing.Bitmap"/>.</param>
            <remarks>
            <para></para>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> if <paramref name="icon"/> contains only a very large icon.</note>
            </remarks>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance, which contains every image of the <paramref name="icon"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ToMultiResBitmap(System.Drawing.Icon,System.Boolean)">
            <summary>
            Converts the <paramref name="icon"/> to a <see cref="T:System.Drawing.Bitmap"/> instance, which contains every image of the <paramref name="icon"/>.
            When the returned <see cref="T:System.Drawing.Bitmap"/> is used to create another <see cref="T:System.Drawing.Bitmap"/> or is drawn into a <see cref="T:System.Drawing.Graphics"/>, the best-fitting image is automatically applied.
            </summary>
            <param name="icon">The icon to convert to a multi-resolution <see cref="T:System.Drawing.Bitmap"/>.</param>
            <param name="forceUncompressedResult">This parameter is ignored.</param>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> if <paramref name="icon"/> contains only a very large icon.</note>
            </remarks>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance, which contains every image of the <paramref name="icon"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.GetImagesCount(System.Drawing.Icon)">
            <summary>
            Gets the number of images in the <paramref name="icon"/>.
            </summary>
            <param name="icon">The icon to check.</param>
            <returns>The number of images in the <paramref name="icon"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Boolean)">
            <summary>
            Extracts every image from an <see cref="T:System.Drawing.Icon" /> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An array of <see cref="T:System.Drawing.Bitmap" /> instances, which were extracted from the <paramref name="icon" />.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large uncompressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon)" />
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Drawing.Size,System.Boolean)">
            <summary>
            Extracts every image of specified size from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An array of <see cref="T:System.Drawing.Bitmap" /> instances, which were extracted from the <paramref name="icon" />.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large uncompressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon,System.Drawing.Size)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Extracts every image of specified pixel format from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An array of <see cref="T:System.Drawing.Bitmap" /> instances, which were extracted from the <paramref name="icon" />.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large uncompressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon,System.Drawing.Imaging.PixelFormat)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Boolean)">
            <summary>
            Extracts the first image from an <see cref="T:System.Drawing.Icon"/> instance. If the icon has only one image consider to use
            <see cref="M:KGySoft.Drawing.IconExtensions.ToAlphaBitmap(System.Drawing.Icon)">ToAlphaBitmap</see>, which is faster.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An <see cref="T:System.Drawing.Bitmap"/> instance, which was extracted from the <paramref name="icon"/>,
            or <see langword="null"/>&#160;if no image was found in the <paramref name="icon"/>.</returns>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large uncompressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ToAlphaBitmap(System.Drawing.Icon)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Drawing.Size,System.Boolean)">
            <summary>
            Extracts the first image of specified size from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An <see cref="T:System.Drawing.Bitmap"/> instance, which was extracted from the <paramref name="icon"/>,
            or <see langword="null"/>&#160;if no icon found with the specified size.</returns>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large uncompressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Drawing.Size)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Extracts the image of specified size and pixel format from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An <see cref="T:System.Drawing.Bitmap"/> instance, which was extracted from the <paramref name="icon"/>,
            or <see langword="null"/>&#160;if no icon found with the specified size and format.</returns>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large uncompressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Int32,System.Boolean)">
            <summary>
            Extracts the image of specified index from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="index">The zero-based index of the icon image to retrieve.</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An <see cref="T:System.Drawing.Bitmap"/> instance, which was extracted from the <paramref name="icon"/>,
            or <see langword="null"/>&#160;if the specified <paramref name="index"/> was too large.</returns>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large uncompressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Int32)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractNearestBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Extracts the nearest image of specified size and pixel format from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <param name="keepOriginalFormat">If <see langword="true"/>, keeps the original image format stored in the <paramref name="icon"/>. Possible transparent pixels of
            non-32 bpp ARGB formats may be black. If <see langword="false"/>, always returns 32 bpp images with transparency. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>An <see cref="T:System.Drawing.Bitmap"/> instance, which was extracted from the <paramref name="icon"/>. If no
            icon was found with the specified size and format the nearest image (<paramref name="pixelFormat"/> matches first, then <paramref name="size"/>) is returned.</returns>
            <remarks>
            <para>On some platforms it may happen that a smaller result is returned than requested if the requested size and format is not supported.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractNearestIcon(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon)">
            <summary>
            Extracts every icon from an <see cref="T:System.Drawing.Icon"/> instance as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <returns>An array of <see cref="T:System.Drawing.Icon"/> instances, which were extracted from the <paramref name="icon"/>.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> instances are compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon,System.Boolean)">
            <summary>
            Extracts every icon from an <see cref="T:System.Drawing.Icon"/> instance as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning uncompressed icons only;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>An array of <see cref="T:System.Drawing.Icon"/> instances, which were extracted from the <paramref name="icon"/>.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon,System.Drawing.Size)">
            <summary>
            Extracts every icon of specified size from an <see cref="T:System.Drawing.Icon"/> instance as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <returns>An array of <see cref="T:System.Drawing.Icon"/> instances, which were extracted from the <paramref name="icon"/>.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> instances are compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Drawing.Size,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon,System.Drawing.Size,System.Boolean)">
            <summary>
            Extracts every icon of specified size from an <see cref="T:System.Drawing.Icon"/> instance as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning uncompressed icons only;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>An array of <see cref="T:System.Drawing.Icon"/> instances, which were extracted from the <paramref name="icon"/>.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Drawing.Size,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Extracts every icon of specified pixel format from an <see cref="T:System.Drawing.Icon"/> instance as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <returns>An array of <see cref="T:System.Drawing.Icon"/> instances, which were extracted from the <paramref name="icon"/>.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> instances are compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Drawing.Imaging.PixelFormat,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcons(System.Drawing.Icon,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Extracts every icon of specified pixel format from an <see cref="T:System.Drawing.Icon"/> instance as separated <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning uncompressed icons only;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>An array of <see cref="T:System.Drawing.Icon"/> instances, which were extracted from the <paramref name="icon"/>.
            On Windows the result never has <see langword="null"/>&#160;elements</returns>
            <remarks>
            <note>On some non-Windows platforms the result may contain <see langword="null"/>&#160;elements in place of very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmaps(System.Drawing.Icon,System.Drawing.Imaging.PixelFormat,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Drawing.Size)">
            <summary>
            Extracts the first icon of specified size from an <see cref="T:System.Drawing.Icon"/> instance.
            Unless the <see cref="T:System.Drawing.Icon"/> constructors, this method works as expected.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image,
            or <see langword="null"/>&#160;if no icon found with the specified size.</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> instances are compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Drawing.Size,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Drawing.Size,System.Boolean)">
            <summary>
            Extracts the first icon of specified size from an <see cref="T:System.Drawing.Icon"/> instance.
            Unless the <see cref="T:System.Drawing.Icon"/> constructors, this method works as expected.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image,
            or <see langword="null"/>&#160;if no icon found with the specified size.</returns>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large or compressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Drawing.Size,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Extracts the icon of specified size and pixel format from an <see cref="T:System.Drawing.Icon"/> instance.
            Unless the <see cref="T:System.Drawing.Icon"/> constructors, this method works as expected.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image,
            or <see langword="null"/>&#160;if no icon found with the specified size and format.</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> instances are compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Extracts the icon of specified size and pixel format from an <see cref="T:System.Drawing.Icon"/> instance.
            Unless the <see cref="T:System.Drawing.Icon"/> constructors, this method works as expected.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image,
            or <see langword="null"/>&#160;if no icon found with the specified size and format.</returns>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large or compressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Int32)">
            <summary>
            Extracts the icon of specified index from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="index">The zero-based index of the icon image to retrieve.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image,
            or <see langword="null"/>&#160;if the specified <paramref name="index"/> was too large.</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> instances are compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractIcon(System.Drawing.Icon,System.Int32,System.Boolean)">
            <summary>
            Extracts the icon of specified index from an <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="index">The zero-based index of the icon image to retrieve.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image,
            or <see langword="null"/>&#160;if the specified <paramref name="index"/> was too large.</returns>
            <remarks>
            <note>On some platforms this method may throw a <see cref="T:System.PlatformNotSupportedException"/> for very large or compressed icons.</note>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractBitmap(System.Drawing.Icon,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractNearestIcon(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Extracts the nearest icon of specified size and pixel format from an <see cref="T:System.Drawing.Icon"/> instance.
            Unless the <see cref="T:System.Drawing.Icon"/> constructors, this method works as expected.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image. If no
            icon was found with the specified size and format the nearest icon (<paramref name="size"/> match has preference over <paramref name="pixelFormat"/>) is returned.</returns>
            <remarks>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <para>On some platforms it may happen that a smaller icon is returned than requested size if the requested icon size is not supported.
            If <paramref name="icon"/> contains only unsupported icon sizes, then <see langword="null"/>&#160;is returned.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractNearestBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ExtractNearestIcon(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Extracts the nearest icon of specified size and pixel format from an <see cref="T:System.Drawing.Icon"/> instance.
            Unless the <see cref="T:System.Drawing.Icon"/> constructors, this method works as expected.
            </summary>
            <param name="icon">The icon that may contain multiple images.</param>
            <param name="size">The required icon size to retrieve.</param>
            <param name="pixelFormat">The required pixel format to retrieve</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance, which contains only a single image. If no
            icon was found with the specified size and format the nearest icon (<paramref name="size"/> match have preference over <paramref name="pixelFormat"/>) is returned.</returns>
            <remarks>
            <para>On some platforms it may happen that a smaller icon is returned than requested size if the requested icon size is not supported.
            If <paramref name="icon"/> contains only unsupported icon sizes, then <see langword="null"/>&#160;is returned.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.IconExtensions.ExtractNearestBitmap(System.Drawing.Icon,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Boolean)"/>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Collections.Generic.IEnumerable{System.Drawing.Icon})">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon"/> instance with the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon to combine with other icons.</param>
            <param name="icons">The icons to be combined with the specified <paramref name="icon"/>.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>
            <para>Both <paramref name="icon"/> and elements of <paramref name="icons"/> may contain multiple icons.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Drawing.Icon[])">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon"/> instance with the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon to combine with other icons.</param>
            <param name="icons">The icons to be combined with the specified <paramref name="icon"/>.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>
            <para>Both <paramref name="icon"/> and elements of <paramref name="icons"/> may contain multiple icons.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Boolean,System.Drawing.Icon[])">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon"/> instance with the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon to combine with other icons.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="icons">The icons to be combined with the specified <paramref name="icon"/>.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>Both <paramref name="icon"/> and elements of <paramref name="icons"/> may contain multiple icons.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Boolean,System.Collections.Generic.IEnumerable{System.Drawing.Icon})">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon"/> instance with the provided <paramref name="icons"/> into a multi-resolution <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="icon">The icon to combine with other icons.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="icons">The icons to be combined with the specified <paramref name="icon"/>.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains every image of the source <paramref name="icons"/>.</returns>
            <remarks>Both <paramref name="icon"/> and elements of <paramref name="icons"/> may contain multiple icons.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Drawing.Bitmap[])">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon" /> instance with the provided <paramref name="images" /> into a multi-resolution <see cref="T:System.Drawing.Icon" /> instance.
            </summary>
            <param name="icon">The icon to combine with other images.</param>
            <param name="images">The images to be added to the <paramref name="icon"/>. Images can be non-squared ones.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon" /> instance that contains every image of the source <paramref name="images" />.
            </returns>
            <remarks>
            <para>Both <paramref name="icon"/> and elements of <paramref name="images"/> may contain multiple icons.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Collections.Generic.IEnumerable{System.Drawing.Bitmap})">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon" /> instance with the provided <paramref name="images" /> into a multi-resolution <see cref="T:System.Drawing.Icon" /> instance.
            </summary>
            <param name="icon">The icon to combine with other images.</param>
            <param name="images">The images to be added to the <paramref name="icon"/>. Images can be non-squared ones.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon" /> instance that contains every image of the source <paramref name="images" />.
            </returns>
            <remarks>
            <para>Both <paramref name="icon"/> and elements of <paramref name="images"/> may contain multiple icons.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Boolean,System.Drawing.Bitmap[])">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon" /> instance with the provided <paramref name="images" /> into a multi-resolution <see cref="T:System.Drawing.Icon" /> instance.
            </summary>
            <param name="icon">The icon to combine with other images.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="images">The images to be added to the <paramref name="icon"/>. Images can be non-squared ones.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon" /> instance that contains every image of the source <paramref name="images" />.
            </returns>
            <para>Both <paramref name="icon"/> and elements of <paramref name="images"/> may contain multiple icons.</para>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Boolean,System.Collections.Generic.IEnumerable{System.Drawing.Bitmap})">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon" /> instance with the provided <paramref name="images" /> into a multi-resolution <see cref="T:System.Drawing.Icon" /> instance.
            </summary>
            <param name="icon">The icon to combine with other images.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <param name="images">The images to be added to the <paramref name="icon"/>. Images can be non-squared ones.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon" /> instance that contains every image of the source <paramref name="images" />.
            </returns>
            <para>Both <paramref name="icon"/> and elements of <paramref name="images"/> may contain multiple icons.</para>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon" /> instance with the provided <paramref name="image" /> into a multi-resolution <see cref="T:System.Drawing.Icon" /> instance.
            </summary>
            <param name="icon">The icon to combine with other images.</param>
            <param name="image">The image to be added to the <paramref name="icon"/>. Can be a non-squared one.</param>
            <param name="transparentColor">A color that represents the transparent color in <paramref name="image"/>.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon" /> instance that contains the source <paramref name="image" />.
            </returns>
            <remarks>
            <para>Both <paramref name="icon"/> and <paramref name="image"/> may contain multiple icons.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.Combine(System.Drawing.Icon,System.Drawing.Bitmap,System.Drawing.Color,System.Boolean)">
            <summary>
            Combines an <see cref="T:System.Drawing.Icon" /> instance with the provided <paramref name="image" /> into a multi-resolution <see cref="T:System.Drawing.Icon" /> instance.
            </summary>
            <param name="icon">The icon to combine with other images.</param>
            <param name="image">The image to be added to the <paramref name="icon"/>. Can be a non-squared one.</param>
            <param name="transparentColor">A color that represents the transparent color in <paramref name="image"/>.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force returning an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above.</param>
            <returns>
            An <see cref="T:System.Drawing.Icon" /> instance that contains the source <paramref name="image" />.
            </returns>
            <remarks>
            <para>Both <paramref name="icon"/> and <paramref name="image"/> may contain multiple icons.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.SaveAsIcon(System.Drawing.Icon,System.IO.Stream,System.Boolean)">
            <summary>
            Saves the <paramref name="icon"/> into the specified <paramref name="stream"/>. Unlike <see cref="M:System.Drawing.Icon.Save(System.IO.Stream)">Icon.Save</see>, this method can save every icon with high quality, even
            <see cref="T:System.Drawing.SystemIcons"/> members, and icons created by the <see cref="M:System.Drawing.Icon.FromHandle(System.IntPtr)">Icon.FromHandle</see> method.
            </summary>
            <param name="icon">The icon to save</param>
            <param name="stream">A stream into which the icon has to be saved.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force saving an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ToUncompressedIcon(System.Drawing.Icon)">
            <summary>
            Converts the <paramref name="icon"/> to an uncompressed one.
            </summary>
            <param name="icon">The icon to convert.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance that contains only uncompressed images.</returns>
            <remarks>Compressed icons (which contain PNG images) cannot be displayed by the standard ways in Windows XP.
            Calling this method is supported though in any operating system if there is registered built-in PNG decoder.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.IsCompressed(System.Drawing.Icon,System.Nullable{System.Int32})">
            <summary>
            Determines whether the icon or its image at the specified index is compressed.
            </summary>
            <param name="icon">The icon.</param>
            <param name="index">The index to check. If <see langword="null"/>, then the result determines whether the <paramref name="icon"/> has at least one compressed image. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns><see langword="true"/>&#160;if the icon or its image at the specified index is compressed.</returns>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.GetBitsPerPixel(System.Drawing.Icon,System.Nullable{System.Int32})">
            <summary>
            Gets the bits per pixel (BPP) value of the <paramref name="icon"/>.
            </summary>
            <param name="icon">The icon.</param>
            <param name="index">The index to check. If <see langword="null"/>, then the result determines the highest bpp value of the icon images. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>The bits per pixel (BPP) value of the icon.</returns>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.GetIconInfo(System.Drawing.Icon)">
            <summary>
            Gets an array of <see cref="T:KGySoft.Drawing.IconInfo"/> instances containing information about the images of an <see cref="T:System.Drawing.Icon"/>.
            </summary>
            <param name="icon">The icon.</param>
            <returns>An array of <see cref="T:KGySoft.Drawing.IconInfo"/> instances containing information about the images of an <see cref="T:System.Drawing.Icon"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.GetIconInfo(System.Drawing.Icon,System.Int32)">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.IconInfo"/> instance containing information about an <see cref="T:System.Drawing.Icon"/> image of the specified <paramref name="index"/>.
            </summary>
            <param name="icon">The icon.</param>
            <param name="index">The index of the icon image to obtain information for.</param>
            <returns>An <see cref="T:KGySoft.Drawing.IconInfo"/> instance containing information about an <see cref="T:System.Drawing.Icon"/> image of the specified <paramref name="index"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ToCursorHandle(System.Drawing.Icon,System.Drawing.Point)">
            <summary>
            Converts the provided <paramref name="icon"/> to a <see cref="T:KGySoft.Drawing.CursorHandle"/>, which can be passed to the
            <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">System.Windows.Forms.Cursor</a> constructor
            to create a new cursor that supports colors and partial transparency. <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="icon">The <see cref="T:System.Drawing.Icon"/>, which should be converted to a cursor.</param>
            <param name="cursorHotspot">The hotspot coordinates of the cursor. This parameter is optional.
            <br/>Default value: <c>0; 0</c> (top-left corner)</param>
            <returns>A <see cref="T:KGySoft.Drawing.CursorHandle"/> instance that can be used to create a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">System.Windows.Forms.Cursor</a> instance.</returns>
            <remarks>
            <note>This method is supported on Windows only.</note>
            <para>Though the documentation of the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor" target="_blank">System.Windows.Forms.Cursor</a>
            class states that it does not support cursors with colors other than black and white, by using this method you can create a cursor that supports colors and partial transparency.
            Just pass the result <see cref="T:KGySoft.Drawing.CursorHandle"/> to the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.cursor.-ctor" target="_blank">Cursor(IntPtr)</a> constructor.
            <note type="important">Do keep a reference to this <see cref="T:KGySoft.Drawing.CursorHandle"/> instance until the cursor is in use; otherwise, the cursor resources might be disposed too soon.</note></para>
            </remarks>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
        </member>
        <member name="M:KGySoft.Drawing.IconExtensions.ToManagedIcon(System.Drawing.Icon)">
            <summary>
            Needed for unmanaged icons returned by winapi methods because <see cref="M:System.Drawing.Icon.FromHandle(System.IntPtr)"/> does not
            take ownership of handle and does not dispose the icon.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.ImageExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Drawing.Image"/> type.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ToGrayscale(System.Drawing.Image)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Image"/>, which is the grayscale version of the specified <paramref name="image"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The image to convert to grayscale.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> containing the grayscale version of the original <paramref name="image"/>.</returns>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginToGrayscale</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscaleAsync(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.TaskConfig)">ToGrayscaleAsync</see> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>This method always returns a <see cref="T:System.Drawing.Bitmap"/> with <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format.</para>
            <para>To return a <see cref="T:System.Drawing.Bitmap"/> with arbitrary <see cref="T:System.Drawing.Imaging.PixelFormat"/> use the <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat">ConvertPixelFormat</see> overloads with a grayscale palette,
            quantizer (eg. <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see>) or pixel format (<see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/>).</para>
            <para>To make a <see cref="T:System.Drawing.Bitmap"/> grayscale without creating a new instance use the <see cref="M:KGySoft.Drawing.BitmapExtensions.MakeGrayscale(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)">BitmapExtensions.MakeGrayscale</see> method.</para>
            </remarks>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.ToGrayscale(KGySoft.Drawing.Imaging.IReadableBitmapData)"/>
            <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.MakeGrayscale(KGySoft.Drawing.Imaging.IReadWriteBitmapData,KGySoft.Drawing.Imaging.IDitherer)"/>
            <seealso cref="M:KGySoft.Drawing.BitmapExtensions.MakeGrayscale(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)">
             <summary>
             Converts the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <param name="image">The original image to convert.</param>
             <param name="newPixelFormat">The desired new pixel format.</param>
             <param name="palette">The desired target palette if <paramref name="newPixelFormat"/> is an indexed format. If <see langword="null"/>,
             then the source palette is taken from the source image if it also has a palette of no more entries than the target indexed format can have;
             otherwise, a default palette will be used based on <paramref name="newPixelFormat"/>.</param>
             <param name="backColor">If <paramref name="newPixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
             Source pixels with alpha, which will be opaque in the result will be blended with this color.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">If <paramref name="newPixelFormat"/> can represent only single-bit alpha or <paramref name="newPixelFormat"/> is an indexed format and the target palette contains a transparent color,
             then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
             then the result will not have transparent pixels. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A new <see cref="T:System.Drawing.Bitmap"/> instance with the desired pixel format.</returns>
             <remarks>
             <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/>
             or <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
             <para>If <paramref name="newPixelFormat"/> can represent fewer colors than the source format, then a default
             quantization will occur during the conversion. To use a specific quantizer (and optionally a ditherer) use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload.
             To use a quantizer with a specific palette you can use the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.</para>
             <para>If <paramref name="newPixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <paramref name="image"/> has no palette and <paramref name="palette"/> is <see langword="null"/>, then the standard 256 color palette will be used.
             On Windows this contains the web-safe palette, the standard 16 Windows colors and the transparent color.</para>
             <para>If <paramref name="newPixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/>, <paramref name="image"/> has no palette and <paramref name="palette"/> is <see langword="null"/>, then the standard 16 color palette will be used.</para>
             <para>If <paramref name="newPixelFormat"/> is <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>, <paramref name="image"/> has no palette and <paramref name="palette"/> is <see langword="null"/>, then black and white colors will be used.</para>
             <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)"/> overload.</note>
             <note type="tip">To convert an image to any <see cref="T:System.Drawing.Imaging.PixelFormat"/> on any platform obtain an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> from a <see cref="T:System.Drawing.Bitmap"/> by
             the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> extension method and use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extension methods.</note>
             </remarks>
             <example>
             The following example demonstrates the possible results of this method:
             <code lang="C#"><![CDATA[
             using (Bitmap original = Icons.Shield.ExtractBitmap(new Size(256, 256)))
             {
                 // The original bitmap has 32 bpp color depth with transparency
                 original.SaveAsPng(@"c:\temp\original.png");
            
                 // Specifying a custom palette of 8 colors
                 Color[] palette =
                 {
                     Color.Black, Color.Red, Color.Lime, Color.Blue,
                     Color.Magenta, Color.Yellow, Color.Cyan, Color.White
                 };
            
                 // Palette is ignored for hi-color and true-color formats
                 using (Bitmap converted24Bpp = original.ConvertPixelFormat(PixelFormat.Format24bppRgb, palette))
                     converted24Bpp.SaveAsPng(@"c:\temp\24bpp.png");
                 
                 // But it is considered if converting to an indexed format.
                 // Alpha pixels will be blended with Color.Silver.
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed, palette, Color.Silver))
                     converted8Bpp.SaveAsGif(@"c:\temp\8bpp custom palette.gif");
             }]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="32 BPP shield icon with transparent background"/></term></item>
             <item><term><c>24bpp.png</c></term><term><img src="../Help/Images/ShieldRgb888Black.png" alt="24 BPP shield icon with black background"/></term></item>
             <item><term><c>8bpp custom palette.gif</c></term><term><img src="../Help/Images/ShieldRgb111Silver.gif" alt="8-color (RGB111) shield icon with silver background. Without dithering the background turned white."/></term></item>
             </list></para>
             <note type="tip">
             <list type="bullet">
             <item>To use a custom quantizer or to produce a dithered result use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload.</item>
             <item>To reduce the number of colors of an image in-place, without changing its <see cref="P:System.Drawing.Image.PixelFormat"/> use the <see cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)">Quantize</see>
             or <see cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Dither</see> extension methods.</item>
             </list>
             </note>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newPixelFormat"/> is out of the defined values.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="palette"/> contains too many colors for the indexed format specified by <paramref name="newPixelFormat"/>.</exception>
             <exception cref="T:System.PlatformNotSupportedException"><paramref name="newPixelFormat"/> is not supported on the current platform.</exception>
             <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Palette)"/>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">
             <summary>
             Converts the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
             <br/>See the <strong>Remarks</strong> section for details and an example, as well as for information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms.
             </summary>
             <param name="image">The original image to convert.</param>
             <param name="newPixelFormat">The desired new pixel format.</param>
             <param name="backColor">If <paramref name="newPixelFormat"/> does not have alpha or has only single-bit alpha, then specifies the color of the background.
             Source pixels with alpha, which will be opaque in the result will be blended with this color.
             The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
             <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
             <param name="alphaThreshold">If <paramref name="newPixelFormat"/> can represent only single-bit alpha or <paramref name="newPixelFormat"/> is an indexed format and the target palette contains a transparent color,
             then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
             then the result will not have transparent pixels. This parameter is optional.
             <br/>Default value: <c>128</c>.</param>
             <returns>A new <see cref="T:System.Drawing.Bitmap"/> instance with the desired pixel format.</returns>
             <remarks>
             <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/>
             or <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
             <para>If <paramref name="newPixelFormat"/> is an indexed format, then this overload will either use the palette of the source <paramref name="image"/> if applicable,
             or a system default palette. To apply a custom palette use the of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> overload.</para>
             <para>If <paramref name="newPixelFormat"/> can represent fewer colors than the source format, then a default
             quantization will occur during the conversion. To use a specific quantizer (and optionally a ditherer) use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload.
             To use a quantizer with a specific palette you can use the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> class.</para>
             <h1 class="heading">Restrictions of Possible Pixel Formats on Different Platforms</h1>
             <para>The support of <see cref="T:System.Drawing.Bitmap"/>s with different <see cref="T:System.Drawing.Imaging.PixelFormat"/>s may vary from platform to platform.
             Though the types in KGySoft Drawing Libraries support every <see cref="T:System.Drawing.Imaging.PixelFormat"/> the standard <c>System.Drawing</c> libraries has some restrictions.
             The following table summarizes the levels of support for Windows and Linux/Unix systems (applicable both for Mono and .NET Core if <a href="https://www.mono-project.com/docs/gui/libgdiplus/" target="_blank">libgdiplus</a> is installed).</para>
             <list type="table">
             <listheader><term>Pixel Format</term><term>Windows Support</term><term>Linux Support</term></listheader>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>Saving as BMP or TIFF (if black and white) preserves the pixel format but transparency will be lost.</item>
             </list></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>Saving as BMP, TIFF (if black and white) or PNG preserves the pixel format but transparency will be lost.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>Saving as BMP or TIFF preserves the pixel format but in case of the BMP format transparency will be lost.</item>
             </list></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>Saving as BMP, PNG or TIFF preserves the pixel format but in case of the BMP and PNG formats transparency will be lost.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>Saving as BMP, GIF or TIFF preserves the pixel format but in case of the BMP format transparency will be lost.</item>
             </list></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>Saving as BMP, GIF PNG or TIFF preserves the pixel format but exception with the TIFF format transparency will be lost.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.GetPixel(System.Int32,System.Int32)">Bitmap.GetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapData.GetPixel(System.Int32,System.Int32)">IReadableBitmapData.GetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>A bitmap with this pixel format cannot be rendered by the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see> methods 
             (instead, you can use the <see cref="O:KGySoft.Drawing.ImageExtensions.DrawInto">DrawInto</see> extension methods).</item>
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.</item>
             <item>To read and write the actual data without losing information use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">IWritableBitmapDataRow.WriteRaw</see> and
             <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">IReadableBitmapDataRow.ReadRaw</see> methods (see also the note below).</item>
             </list></term>
             <term>On Linux a <see cref="T:System.Drawing.Bitmap"/> cannot be instantiated with this pixel format.</term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/></term>
             <term><list type="bullet">
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.</item>
             </list></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>A bitmap with this pixel format cannot be rendered by the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see> methods 
             (instead, you can use the <see cref="O:KGySoft.Drawing.ImageExtensions.DrawInto">DrawInto</see> extension methods).</item>
             <item>The <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)">Bitmap.LockBits</see> method cannot be called with <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/> format (24 and 32 BPP formats are supported though).
             Therefore, <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadableBitmapData</see>, <see cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetWritableBitmapData</see> and <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see>
             methods will also obtain a 24 BPP <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> as well (the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat">IBitmapData.PixelFormat</see> property returns <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>).</item>
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/></term>
             <term><list type="bullet">
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.</item>
             </list></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">Bitmap.SetPixel</see> is not supported (instead, you can use <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapData.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">IWritableBitmapData.SetPixel</see>)</item>
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>A bitmap with this pixel format cannot be rendered by the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see> methods 
             (instead, you can use the <see cref="O:KGySoft.Drawing.ImageExtensions.DrawInto">DrawInto</see> extension methods).</item>
             <item>The <see cref="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)">Bitmap.LockBits</see> method cannot be called with <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/> format (24 and 32 BPP formats are supported though).
             Therefore, <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadableBitmapData</see>, <see cref="M:KGySoft.Drawing.BitmapExtensions.GetWritableBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetWritableBitmapData</see> and <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see>
             methods will also obtain a 24 BPP <see cref="T:KGySoft.Drawing.Imaging.IBitmapData"/> as well (the <see cref="P:KGySoft.Drawing.Imaging.IBitmapData.PixelFormat">IBitmapData.PixelFormat</see> property returns <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>).</item>
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/></term>
             <term><list type="bullet">
             <item><see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)">Graphics.FromImage</see> is not supported.</item>
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.</item>
             </list></term>
             <term>On Linux a <see cref="T:System.Drawing.Bitmap"/> cannot be instantiated with this pixel format.</term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as anything but GIF preserves the pixel format.</item>
             </list></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as anything but GIF preserves the pixel format.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as BMP preserves the pixel format but no loss of transparency occurs when saving as JPEG, PNG or TIFF either.</item>
             </list></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as BMP preserves the pixel format but no loss of transparency occurs when saving as JPEG, PNG or TIFF either.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as PNG or TIFF (as well as Icon) preserves the pixel format.</item>
             </list></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as PNG or TIFF (as well as Icon) preserves the pixel format.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as PNG or TIFF (as well as Icon) preserves possible alpha information but the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> when the image is reloaded.</item>
             </list></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>.</item>
             <item>Saving as PNG or TIFF by the <see cref="T:KGySoft.Drawing.ImageExtensions"/> members preserves possible alpha information correctly but the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> when the image is reloaded.
             Saving the image by <see cref="O:System.Drawing.Image.Save">Image.Save</see> members corrupts alpha information.</item>
             </list></term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>, though all processing, displaying and saving operations convert pixel information to 8 bit-per-channel colors.</item>
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved, except if the image was already
             a <see cref="T:System.Drawing.Bitmap"/> with TIFF raw format (though the color information might be quantized to a 13 bit-per-channel range also in this case).</item>
             <item>To read and write the actual data without losing information use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">IWritableBitmapDataRow.WriteRaw</see> and
             <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">IReadableBitmapDataRow.ReadRaw</see> methods (see also the note below).</item>
             </list></term>
             <term>On Linux a <see cref="T:System.Drawing.Bitmap"/> cannot be instantiated with this pixel format.</term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>, though all processing, displaying and saving operations convert pixel information to 8 bit-per-channel colors.</item>
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.
             To preserve (a possible quantized) alpha information save the image as PNG or TIFF.</item>
             <item>To read and write the actual data without losing information use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">IWritableBitmapDataRow.WriteRaw</see> and
             <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">IReadableBitmapDataRow.ReadRaw</see> methods (see also the note below).</item>
             </list></term>
             <term>On Linux a <see cref="T:System.Drawing.Bitmap"/> cannot be instantiated with this pixel format.</term></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/></term>
             <term><list type="bullet">
             <item>This format is fully supported also by <c>System.Drawing</c>, though all processing, displaying and saving operations convert pixel information to 8 bit-per-channel colors.</item>
             <item>The <c>SaveAs...</c> members of the <see cref="T:KGySoft.Drawing.ImageExtensions"/> class support saving into any popular format but pixel format will not be preserved.
             To preserve (a possible quantized) alpha information save the image as PNG or TIFF.</item>
             <item>To read and write the actual data without losing information use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">IWritableBitmapDataRow.WriteRaw</see> and
             <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">IReadableBitmapDataRow.ReadRaw</see> methods (see also the note below).</item>
             </list></term>
             <term>On Linux a <see cref="T:System.Drawing.Bitmap"/> cannot be instantiated with this pixel format.</term></item>
             </list>
             <note><list type="bullet">
             <item>On Windows <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/> and <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/> formats (hereinafter: wide formats)
             actually use 13 bit-per-channel colors internally (values between 0 and 8192, inclusively). The mapping between the 8 and 16 bit color channels is not linear: whereas the <see cref="T:System.Drawing.Color"/>
             (and also <see cref="T:KGySoft.Drawing.Imaging.Color32"/>) structures represent colors with gamma correction γ = 2.2, the wide formats have no gamma correction (γ = 1.0).</item>
             <item>If wide color formats are supported on the current operating system, then KGySoft Drawing Libraries auto detects the used range and gamma correction.
             For example, if the <a href="https://www.mono-project.com/docs/gui/libgdiplus/" target="_blank">libgdiplus</a> library will support them on Linux, or the .NET support will be implemented
             in <a href="https://reactos.org/" target="_blank">ReactOS</a> (which uses full 16-bit range with linear mapping between wide and narrow color channels), then <see cref="T:KGySoft.Drawing.Imaging.IWritableBitmapData"/> and
             <see cref="T:KGySoft.Drawing.Imaging.IReadableBitmapData"/> members will always use the correct transformations automatically.</item>
             <item>If you want to manipulate wide colors without losing information you can use the <see cref="M:KGySoft.Drawing.Imaging.IWritableBitmapDataRow.WriteRaw``1(System.Int32,``0)">IWritableBitmapDataRow.WriteRaw</see> and
             <see cref="M:KGySoft.Drawing.Imaging.IReadableBitmapDataRow.ReadRaw``1(System.Int32)">IReadableBitmapDataRow.ReadRaw</see> methods. As these methods provide access to the raw underlying data it is your responsibility to know
             what ranges and values are used for a specific <see cref="T:System.Drawing.Imaging.PixelFormat"/> on the current operating system.</item>
             <item>The KGySoft Drawing Libraries use the full 16-bit range of values for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> format and the transformation is linear between
             the 8 and 16 bit shades on every platform that supports this format.</item>
             </list></note>
             <note type="tip">To convert an image to any <see cref="T:System.Drawing.Imaging.PixelFormat"/> on any platform obtain an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> from a <see cref="T:System.Drawing.Bitmap"/> by
             the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> extension method and use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extension methods.</note>
             </remarks>
             <example>
             The following example demonstrates the possible results of this method:
             <code lang="C#"><![CDATA[
             using (Bitmap original = Icons.Shield.ExtractBitmap(new Size(256, 256)))
             {
                 // The original bitmap has 32 bpp color depth with transparency
                 original.SaveAsPng(@"c:\temp\original.png");
            
                 // 24 BPP format has no transparency. If backColor is not specified the background will be black.
                 using (Bitmap converted24BppBlack = original.ConvertPixelFormat(PixelFormat.Format24bppRgb))
                     converted24BppBlack.SaveAsPng(@"c:\temp\24 bpp black.png");
            
                 // Using Color.Cyan as backColor. Source pixels with alpha will be blended with this color.
                 using (Bitmap converted24BppCyan = original.ConvertPixelFormat(PixelFormat.Format24bppRgb, Color.Cyan))
                     converted24BppCyan.SaveAsPng(@"c:\temp\24 bpp cyan.png");
            
                 // Converting to 16 BPP grayscale. The cyan back color will be a light gray shade in the result.
                 // As a PNG will be saved as a 24 BPP image.
                 using (Bitmap converted16Bpp = original.ConvertPixelFormat(PixelFormat.Format16bppGrayScale, Color.Cyan))
                     converted16Bpp.SaveAsPng(@"c:\temp\16bpp grayscale.png");
             
                 // The default 8 BPP palette has the transparent color. The default values (backColor = Color.Black,
                 // alphaThreshold = 128) specify that source pixels with alpha < 128 will be transparent
                 // and alpha >= 1 will be blended with Color.Black.
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed))
                     converted8Bpp.SaveAsGif(@"c:\temp\default 8 bpp palette.gif");
             }]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="32 BPP shield icon with transparent background"/></term></item>
             <item><term><c>24 bpp black.png</c></term><term><img src="../Help/Images/ShieldRgb888Black.png" alt="24 BPP shield icon with black background"/></term></item>
             <item><term><c>24 bpp cyan.png</c></term><term><img src="../Help/Images/Shield24bppCyan.png" alt="24 BPP shield icon with cyan background"/></term></item>
             <item><term><c>16 bpp grayscale.png</c></term><term><img src="../Help/Images/ShieldGrayscaleCyan.png" alt="16 BPP grayscale shield icon with cyan background. The cyan color turned light gray."/></term></item>
             <item><term><c>default 8 bpp palette.gif</c></term><term><img src="../Help/Images/ShieldDefault8bppBlack.gif" alt="8 BPP shield icon with system default palette"/></term></item>
             </list></para>
             <note type="tip">
             <list type="bullet">
             <item>To use a custom quantizer or to produce a dithered result use the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload.</item>
             <item>To reduce the number of colors of an image in-place, without changing its <see cref="P:System.Drawing.Image.PixelFormat"/> use the <see cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)">Quantize</see>
             or <see cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Dither</see> extension methods.</item>
             </list>
             </note>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newPixelFormat"/> is out of the defined values.</exception>
             <exception cref="T:System.PlatformNotSupportedException"><paramref name="newPixelFormat"/> is not supported on the current platform.</exception>
             <seealso cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.Color32,System.Byte)"/>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
             <summary>
             Converts the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> with the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
             <br/>See the <strong>Remarks</strong> section for details.
             </summary>
             <param name="image">The original image to convert.</param>
             <param name="newPixelFormat">The desired new pixel format.</param>
             <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors if the result.
             If <see langword="null"/>&#160;and <paramref name="newPixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
             <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
             and <paramref name="newPixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
             <br/>Default value: <see langword="null"/>.</param>
             <returns>A new <see cref="T:System.Drawing.Bitmap"/> instance with the desired pixel format.</returns>
             <remarks>
             <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress. Use the <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/>
             or <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
             <para>An unmatching <paramref name="quantizer"/> and <paramref name="newPixelFormat"/> may cause undesired results.</para>
             <para>The <paramref name="ditherer"/> may have no effect if the <paramref name="quantizer"/> uses too many colors.</para>
             <para>To produce a result with up to 256 colors best optimized for the source <paramref name="image"/> you can use the <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> class.</para>
             <para>To quantize a <see cref="T:System.Drawing.Bitmap"/> in place, without changing the pixel format you can use the <see cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)">BitmapExtensions.Quantize</see> method.</para>
             <para>To dither a <see cref="T:System.Drawing.Bitmap"/> in place, without changing the pixel format you can use the <see cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">BitmapExtensions.Dither</see> method.</para>
             <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)"/> overload.</note>
             <note type="tip">To convert an image to any <see cref="T:System.Drawing.Imaging.PixelFormat"/> on any platform obtain an <see cref="T:KGySoft.Drawing.Imaging.IReadWriteBitmapData"/> from a <see cref="T:System.Drawing.Bitmap"/> by
             the <see cref="M:KGySoft.Drawing.BitmapExtensions.GetReadWriteBitmapData(System.Drawing.Bitmap,System.Drawing.Color,System.Byte)">GetReadWriteBitmapData</see> extension method and use the <see cref="O:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone">Clone</see> extension methods.</note>
             </remarks>
             <example>
             The following example demonstrates the possible results of this method:
             <code lang="C#"><![CDATA[
             using (Bitmap original = Icons.Shield.ExtractBitmap(new Size(256, 256)))
             {
                 // The original bitmap has 32 bpp color depth with transparency
                 original.SaveAsPng(@"c:\temp\original.png");
            
                 // Specifying a custom palette of 8 colors
                 Color[] palette =
                 {
                     Color.Black, Color.Red, Color.Lime, Color.Blue,
                     Color.Magenta, Color.Yellow, Color.Cyan, Color.White
                 };
            
                 // Using the custom palette without dithering
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                     PredefinedColorsQuantizer.FromCustomPalette(palette, Color.Silver)))
                 {
                     converted8Bpp.SaveAsGif(@"c:\temp\8bpp custom palette.gif");
                 }
            
                 // Using the custom palette with Floyd-Steinberg dithering
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                     PredefinedColorsQuantizer.FromCustomPalette(palette, Color.Silver), ErrorDiffusionDitherer.FloydSteinberg))
                 {
                     converted8Bpp.SaveAsGif(@"c:\temp\8bpp custom palette with dithering.gif");
                 }
            
                 // Using the system default palette without dithering
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                     PredefinedColorsQuantizer.SystemDefault8BppPalette()))
                 {
                     converted8Bpp.SaveAsGif(@"c:\temp\8 bpp default palette.gif");
                 }
            
                 // Using the system default palette with Bayer 8x8 dithering
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                     PredefinedColorsQuantizer.SystemDefault8BppPalette(), OrderedDitherer.Bayer8x8))
                 {
                     converted8Bpp.SaveAsGif(@"c:\temp\8 bpp default palette with dithering.gif");
                 }
            
                 // Using an optimized palette without dithering
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                     OptimizedPaletteQuantizer.MedianCut()))
                 {
                     converted8Bpp.SaveAsGif(@"c:\temp\8 bpp optimized palette.gif");
                 }
            
                 // Using an optimized palette with blue noise dithering
                 using (Bitmap converted8Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                     OptimizedPaletteQuantizer.MedianCut(), OrderedDitherer.BlueNoise))
                 {
                     converted8Bpp.SaveAsGif(@"c:\temp\8 bpp optimized palette with dithering.gif");
                 }
            
                 // Converting to black-and-white without dithering.
                 // Alpha pixels will be blended with Color.Silver, which will be white in the result.
                 using (Bitmap converted1Bpp = original.ConvertPixelFormat(PixelFormat.Format1bppIndexed,
                     PredefinedColorsQuantizer.BlackAndWhite(Color.Silver)))
                 {
                     converted1Bpp.SaveAsTiff(@"c:\temp\black and white.tiff");
                 }
            
                 // Converting to black-and-white with Floyd-Steinberg dithering
                 // Alpha pixels will be blended with Color.Silver, which also affects the result.
                 using (Bitmap converted1Bpp = original.ConvertPixelFormat(PixelFormat.Format8bppIndexed,
                     PredefinedColorsQuantizer.BlackAndWhite(Color.Silver), ErrorDiffusionDitherer.FloydSteinberg))
                 {
                     converted1Bpp.SaveAsTiff(@"c:\temp\black and white with dithering.tiff");
                 }
             }]]></code>
             <para>The example above produces the following results:
             <list type="table">
             <item><term><c>original.png</c></term><term><img src="../Help/Images/Shield256.png" alt="32 BPP shield icon with transparent background"/></term></item>
             <item><term><c>8bpp custom palette.gif</c></term><term><img src="../Help/Images/ShieldRgb111Silver.gif" alt="8-color (RGB111) shield icon with silver background. Without dithering the background turned white."/></term></item>
             <item><term><c>8bpp custom palette with dithering.gif</c></term><term><img src="../Help/Images/ShieldRgb111SilverDitheredFS.gif" alt="8-color (RGB111) shield icon with silver background and Floyd-Steinberg dithering"/></term></item>
             <item><term><c>8 bpp default palette.gif</c></term><term><img src="../Help/Images/ShieldDefault8bppBlack.gif" alt="8 BPP shield icon with system default palette, black background and alpha threshold = 128"/></term></item>
             <item><term><c>8 bpp default palette with dithering.gif</c></term><term><img src="../Help/Images/ShieldDefault8bppBlackDitheredB8.gif" alt="8 BPP shield icon with system default palette, black background, alpha threshold = 128 and Bayer 8x8 dithering"/></term></item>
             <item><term><c>8 bpp optimized palette.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256Black.gif" alt="8 BPP shield icon with optimized palette using the Median Cut algorithm without dithering"/></term></item>
             <item><term><c>8 bpp optimized palette with dithering.gif</c></term><term><img src="../Help/Images/ShieldMedianCut256BlackDitheredBN.gif" alt="8 BPP shield icon with optimized palette using the Median Cut algorithm with blue noise dithering"/></term></item>
             <item><term><c>black and white.tiff</c></term><term><img src="../Help/Images/ShieldBWSilver.gif" alt="1 BPP shield icon with black and white palette and silver background. Without dithering the background turned white."/></term></item>
             <item><term><c>black and white with dithering.tiff</c></term><term><img src="../Help/Images/ShieldBWSilverDitheredFS.gif" alt="1 BPP shield icon with black and white palette, silver background and Floyd-Steinberg dithering"/></term></item>
             </list></para>
             <note type="tip">To reduce the number of colors of an image in-place, without changing its <see cref="P:System.Drawing.Image.PixelFormat"/> use the <see cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)">Quantize</see>
             or <see cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">Dither</see> extension methods.</note>
             <para>For built-in <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> implementations see the <see cref="T:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer"/> and <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/> classes.</para>
             <para>For built-in <see cref="T:KGySoft.Drawing.Imaging.IDitherer"/> implementations see the <see cref="T:KGySoft.Drawing.Imaging.OrderedDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer"/>, <see cref="T:KGySoft.Drawing.Imaging.RandomNoiseDitherer"/> and <see cref="T:KGySoft.Drawing.Imaging.InterleavedGradientNoiseDitherer"/> classes.</para>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newPixelFormat"/> does not specify a valid format.</exception>
             <exception cref="T:System.ArgumentException">The <paramref name="quantizer"/> palette contains too many colors for the indexed format specified by <paramref name="newPixelFormat"/>.</exception>
             <exception cref="T:System.PlatformNotSupportedException"><paramref name="newPixelFormat"/> is not supported on the current platform.</exception>
             <seealso cref="T:KGySoft.Drawing.Imaging.IQuantizer"/>
             <seealso cref="T:KGySoft.Drawing.Imaging.IDitherer"/>
             <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Quantize(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer)"/>
             <seealso cref="M:KGySoft.Drawing.BitmapExtensions.Dither(System.Drawing.Bitmap,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
             <seealso cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.Clone(KGySoft.Drawing.Imaging.IReadableBitmapData,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The original image to convert.</param>
            <param name="newPixelFormat">The desired new pixel format.</param>
            <param name="palette">The desired target palette if <paramref name="newPixelFormat"/> is an indexed format. If <see langword="null"/>,
            then the source palette is taken from the source image if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="newPixelFormat"/>.</param>
            <param name="backColor">If <paramref name="newPixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="newPixelFormat"/> can represent only single-bit alpha or <paramref name="newPixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.ImageExtensions.EndConvertPixelFormat(System.IAsyncResult)">EndConvertPixelFormat</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> method for more details and image examples.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The original image to convert.</param>
            <param name="newPixelFormat">The desired new pixel format.</param>
            <param name="backColor">If <paramref name="newPixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="newPixelFormat"/> can represent only single-bit alpha or <paramref name="newPixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.ImageExtensions.EndConvertPixelFormat(System.IAsyncResult)">EndConvertPixelFormat</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)"/> method for more details and image examples.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">
            <summary>
            Begins to convert the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The original image to convert.</param>
            <param name="newPixelFormat">The desired new pixel format.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors if the result.
            If <see langword="null"/>&#160;and <paramref name="newPixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="newPixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous operation, which could still be pending.</returns>
            <remarks>
            <para>In .NET Framework 4.0 and above you can use also the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)"/> method.</para>
            <para>To get the result or the exception that occurred during the operation you have to call the <see cref="M:KGySoft.Drawing.ImageExtensions.EndConvertPixelFormat(System.IAsyncResult)">EndConvertPixelFormat</see> method.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details and image examples.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.EndConvertPixelFormat(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous operation started by the <see cref="O:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat">BeginConvertPixelFormat</see> methods to complete.
            In .NET Framework 4.0 and above you can use the <see cref="O:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync">ConvertPixelFormatAsync</see> methods instead.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance that is the result of the operation,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <c>asyncConfig</c> parameter was <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)">
            <summary>
            Converts the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The original image to convert.</param>
            <param name="newPixelFormat">The desired new pixel format.</param>
            <param name="palette">The desired target palette if <paramref name="newPixelFormat"/> is an indexed format. If <see langword="null"/>,
            then the source palette is taken from the source image if it also has a palette of no more entries than the target indexed format can have;
            otherwise, a default palette will be used based on <paramref name="newPixelFormat"/>.</param>
            <param name="backColor">If <paramref name="newPixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="newPixelFormat"/> can represent only single-bit alpha or <paramref name="newPixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the new <see cref="T:System.Drawing.Bitmap"/> instance with the desired pixel format,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>Alternatively, you can also use the <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/> method, which is available on every platform.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color[],System.Drawing.Color,System.Byte)"/> method for more details and image examples.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.TaskConfig)">
            <summary>
            Converts the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The original image to convert.</param>
            <param name="newPixelFormat">The desired new pixel format.</param>
            <param name="backColor">If <paramref name="newPixelFormat"/> does not support alpha or supports only single-bit alpha, then specifies the color of the background.
            Source pixels with alpha, which will be opaque in the result will be blended with this color.
            The <see cref="P:System.Drawing.Color.A">Color.A</see> property of the background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">If <paramref name="newPixelFormat"/> can represent only single-bit alpha or <paramref name="newPixelFormat"/> is an indexed format and the target palette contains a transparent color,
            then specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which the color is considered transparent. If 0,
            then the result will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the new <see cref="T:System.Drawing.Bitmap"/> instance with the desired pixel format,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>Alternatively, you can also use the <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte,KGySoft.Drawing.AsyncConfig)"/> method, which is available on every platform.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)"/> method for more details and image examples.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormatAsync(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">
            <summary>
            Converts the specified <paramref name="image"/> to a <see cref="T:System.Drawing.Bitmap"/> of the desired <see cref="T:System.Drawing.Imaging.PixelFormat"/> asynchronously.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The original image to convert.</param>
            <param name="newPixelFormat">The desired new pixel format.</param>
            <param name="quantizer">An optional <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to determine the colors if the result.
            If <see langword="null"/>&#160;and <paramref name="newPixelFormat"/> is an indexed format, then a default palette and quantization logic will be used.</param>
            <param name="ditherer">The ditherer to be used. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="newPixelFormat"/> represents an at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="asyncConfig">The configuration of the asynchronous operation such as parallelization, cancellation, reporting progress, etc. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. Its result is the new <see cref="T:System.Drawing.Bitmap"/> instance with the desired pixel format,
            or <see langword="null"/>, if the operation was canceled and <see cref="P:KGySoft.Drawing.AsyncConfigBase.ThrowIfCanceled"/> property of the <paramref name="asyncConfig"/> parameter was <see langword="false"/>.</returns>
            <remarks>
            <para>Alternatively, you can also use the <see cref="M:KGySoft.Drawing.ImageExtensions.BeginConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)"/> method, which is available on every platform.</para>
            <para>This method is not a blocking call even if the <see cref="P:KGySoft.Drawing.AsyncConfigBase.MaxDegreeOfParallelism"/> property of the <paramref name="asyncConfig"/> parameter is 1.</para>
            <note type="tip">See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> method for more details and image examples.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/>
            without scaling. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Point.Empty">Point.Empty</see>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            <para>This overload does not resize the image even if <paramref name="source"/> and <paramref name="target"/> have different DPI resolution.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/>
            without scaling. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            <para>This overload does not resize the image even if <paramref name="source"/> and <paramref name="target"/> have different DPI resolution.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/>
            without scaling. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            <para>This overload does not resize the image even if <paramref name="source"/> and <paramref name="target"/> have different DPI resolution.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Point,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/>
            without scaling. This method is similar to <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">Graphics.DrawImage</see>
            methods, except that this one always preserves the source size in pixels, works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            For scaling use the overloads with <c>targetRectangle</c> and <see cref="T:KGySoft.Drawing.ScalingMode"/> parameters.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetLocation">The target location. Target size will be always the same as the source size.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Nullable{System.Drawing.Rectangle},System.Nullable{System.Drawing.Point},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The image to be drawn is automatically clipped if its size or <paramref name="targetLocation"/> makes it impossible to completely fit in the <paramref name="target"/>.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            <para>This overload does not resize the image even if <paramref name="source"/> and <paramref name="target"/> have different DPI resolution.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/> with possible scaling.
            This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/> with possible scaling.
            This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/> with possible scaling.
            This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="source"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="targetRectangle"/> exceeds bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="source"/> and <paramref name="targetRectangle"/> have different sizes.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/> with possible scaling.
            This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/> with possible scaling.
            This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>.
            To use dithering a <paramref name="ditherer"/> must be explicitly specified.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.DrawInto(System.Drawing.Image,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode)">
            <summary>
            Draws the <paramref name="source"/>&#160;<see cref="T:System.Drawing.Image"/> into the <paramref name="target"/>&#160;<see cref="T:System.Drawing.Bitmap"/> with possible scaling.
            This method is similar to <see cref="O:System.Drawing.Graphics.DrawImage">Graphics.DrawImage</see>
            methods, except that this one works between any pair of source and target <see cref="T:System.Drawing.Imaging.PixelFormat"/>s and supports quantizing and dithering.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="source">The source <see cref="T:System.Drawing.Image"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="target">The target <see cref="T:System.Drawing.Bitmap"/> into which <paramref name="source"/> should be drawn.</param>
            <param name="sourceRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the portion of the <paramref name="source"/> to be drawn into the <paramref name="target"/>.</param>
            <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle"/> that specifies the location and size of the drawn <paramref name="source"/>.</param>
            <param name="quantizer">An <see cref="T:KGySoft.Drawing.Imaging.IQuantizer"/> instance to be used for the drawing. If not specified, then the drawing operation might automatically
            pick a quantizer based on <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">The ditherer to be used for the drawing. Might be ignored if <paramref name="quantizer"/> is not specified
            and <paramref name="target"/>&#160;<see cref="T:System.Drawing.Imaging.PixelFormat"/> format has at least 24 bits-per-pixel size. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="scalingMode">Specifies the scaling mode if the bitmap data to be drawn needs to be resized. This parameter is optional.
            <br/>Default value: <see cref="F:KGySoft.Drawing.ScalingMode.Auto"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.BeginDrawInto(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.AsyncConfig)">BitmapDataExtensions.BeginDrawInto</see>
            or <see cref="M:KGySoft.Drawing.Imaging.BitmapDataExtensions.DrawIntoAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,KGySoft.Drawing.Imaging.IReadWriteBitmapData,System.Drawing.Rectangle,System.Drawing.Rectangle,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.ScalingMode,KGySoft.Drawing.TaskConfig)">BitmapDataExtensions.DrawIntoAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The method has the best performance if <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> have the same size, or when <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>.</para>
            <para>The image to be drawn is automatically clipped if <paramref name="sourceRectangle"/> or <paramref name="targetRectangle"/> exceed bounds, or <paramref name="scalingMode"/> is <see cref="F:KGySoft.Drawing.ScalingMode.NoScaling"/>
            and <paramref name="sourceRectangle"/> and <paramref name="targetRectangle"/> are different.</para>
            <para>If <paramref name="target"/> can represent a narrower set of colors, then the result will be automatically quantized to the colors of the <paramref name="target"/>,
            even if there is no <paramref name="quantizer"/> specified. To use dithering a <paramref name="ditherer"/> must be explicitly specified though.</para>
            <para>If <paramref name="quantizer"/> is specified but it uses more/different colors than <paramref name="target"/> can represent,
            then the result will eventually quantized to <paramref name="target"/>, though the result may have a poorer quality than expected.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scalingMode"/> has an unsupported value.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.EqualsByContent(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Compares an image to another one by content and returns whether they are equal. Images of different
            size or pixel format are considered different.
            </summary>
            <param name="image1">First image instance.</param>
            <param name="image2">Second image instance.</param>
            <returns><see langword="true"/>&#160;if both images have the same content; otherwise, <see langword="false"/>.</returns>
            <remarks>If an image is not a <see cref="T:System.Drawing.Bitmap"/> instance, a temporary <see cref="T:System.Drawing.Bitmap"/> is created for the check.
            <note>This method compares images by raw content. If the images have padding in each stride (content row), padding content is considered as well.</note></remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ToIcon(System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates an <see cref="T:System.Drawing.Icon" /> from an <see cref="T:System.Drawing.Image" />.
            </summary>
            <param name="image">The image to be converted to an icon.</param>
            <param name="size">The required width and height of the icon.</param>
            <param name="keepAspectRatio">When source <paramref name="image"/> is not square sized, determines whether the image should keep aspect ratio.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance created from the <paramref name="image"/>.</returns>
            <remarks>The result icon will be always square sized and will contain only a single image.
            To create a possibly non-squared icon, use the <see cref="M:KGySoft.Drawing.ImageExtensions.ToIcon(System.Drawing.Image,System.Drawing.Color)"/> overload or the <see cref="M:KGySoft.Drawing.Icons.Combine(System.Drawing.Bitmap[])">Icons.Combine</see> method instead.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ToIcon(System.Drawing.Image,System.Int32,KGySoft.Drawing.ScalingMode,System.Boolean)">
            <summary>
            Creates an <see cref="T:System.Drawing.Icon" /> from an <see cref="T:System.Drawing.Image" />.
            </summary>
            <param name="image">The image to be converted to an icon.</param>
            <param name="size">The required width and height of the icon.</param>
            <param name="scalingMode">Specifies the scaling mode if size differs from the original size.</param>
            <param name="keepAspectRatio">When source <paramref name="image"/> is not square sized, determines whether the image should keep aspect ratio. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance created from the <paramref name="image"/>.</returns>
            <remarks>The result icon will be always square sized and will contain only a single image.
            To create a possibly non-squared icon, use the <see cref="M:KGySoft.Drawing.ImageExtensions.ToIcon(System.Drawing.Image,System.Drawing.Color)"/> overload or the <see cref="M:KGySoft.Drawing.Icons.Combine(System.Drawing.Bitmap[])">Icons.Combine</see> method instead.</remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.ToIcon(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Creates an <see cref="T:System.Drawing.Icon" /> from an <see cref="T:System.Drawing.Image" />.
            </summary>
            <param name="image">The image to be converted to an icon.</param>
            <param name="transparentColor">A color that represents transparent color for the icon to be created. Ignored if the <paramref name="image"/> is large and will be PNG compressed. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which keeps only already transparent pixels.</param>
            <returns>An <see cref="T:System.Drawing.Icon"/> instance created from the <paramref name="image"/> that has the same size as the specified <paramref name="image"/>.</returns>
            <remarks>
            <para>The result icon will have the same size as the specified <paramref name="image"/>.
            To create a squared icon, use the <see cref="M:KGySoft.Drawing.ImageExtensions.ToIcon(System.Drawing.Image,System.Int32,System.Boolean)"/> overload instead.</para>
            <para>If the raw format of <paramref name="image"/> is an icon that contains multiple images, then the result will also contain multiple resolutions.</para>
            <para>The result <see cref="T:System.Drawing.Icon"/> is compatible with Windows XP if the method is executed in a Windows XP environment.</para>
            <para>To disable PNG compression also for large images regardless of the current operating system call the <see cref="M:KGySoft.Drawing.Icons.Combine(System.Drawing.Bitmap[],System.Drawing.Color[],System.Boolean)"/> method instead.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsBmp(System.Drawing.Image,System.IO.Stream)">
             <summary>
             Saves the specified <paramref name="image"/> into a <paramref name="stream"/> using the built-in BMP encoder if available in the current operating system.
             Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <param name="image">The image to save. If contains multiple images, then only the current frame will be saved.</param>
             <param name="stream">The stream to save the image into.</param>
             <remarks>
             <para>The <paramref name="image"/> can only be saved if a built-in BMP encoder is available in the current operating system.</para>
             <para>The saved BMP image is never RLE compressed.</para>
             <para>The BMP format supports transparency only for the 64 BPP formats but the Windows BMP encoder stores alpha information also for the 32 BPP formats, which can be restored (see also the example below).</para>
             <para>Images with different <see cref="T:System.Drawing.Imaging.PixelFormat"/>s are handled as follows (on Windows, unless specified otherwise):
             <list type="definition">
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/></term><description>The pixel format is preserved, though palette entries with alpha are turned opaque.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/></term><description>The pixel format is preserved, though palette entries with alpha are turned opaque.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/></term><description>The pixel format is preserved, though palette entries with alpha are turned opaque.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>
             using a grayscale palette, because otherwise GDI+ would throw an exception.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>
             because the built-in encoder would save a 32 BPP image otherwise, which is just a waste of space.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>
             because the built-in encoder would save a 32 BPP image otherwise, which is just a waste of space.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.
             Though reloading such an image will not have transparency but it can be restored (see also the example below).</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/></term><description>When reloading the saved image the pixel format is preserved.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/></term><description>When reloading the saved image the pixel format is preserved.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></term><description>When the saved image is reloaded by the built-in decoder the pixel format will be <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/> and the image will have no transparency.
             Actually alpha information is preserved and can be restored (see the example below).</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/></term><description>When the saved image is reloaded by the built-in decoder, the pixel format will be <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/> and the image will have no transparency.
             Actually alpha information preserved and can be restored (see the example below).</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/></term><description>When reloading the saved image the pixel format is preserved. Note that not every application supports or handles BMP format with 64 BPP correctly.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/>.</description></item>
             </list>
             </para>
             </remarks>
             <example>The following example demonstrates how to restore transparency from 32 BPP bitmaps saved by the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsBmp(System.Drawing.Image,System.IO.Stream)">SaveAsBmp</see> method:
             <code lang="C#"><![CDATA[
             // this is a 32 BPP ARGB bitmap with transparency:
             Bitmap toSave = Icons.Information.ExtractBitmap(new Size(256, 256));
             Bitmap reloaded;
            
             // Saving and reloading the transparent image as BMP:
             using (var stream = new MemoryStream())
             {
                 bmp.SaveAsBmp(stream);
                 stream.Position = 0;
            
                 // realoaded Bitmap has now Format32bppRgb PixelFormat without transparency
                 reloaded = new Bitmap(stream);
             }
            
             // Restoring transparency by using fast bitmap data accessors (not needed for 64 BPP images):
             Bitmap restored = new Bitmap(reloaded.Width, reloaded.Height, PixelFormat.Format32bppArgb);
             using (IReadableBitmapData dataSrc = reloaded.GetReadableBitmapData())
             using (IWritableBitmapData dataDst = restored.GetWritableBitmapData())
             {
                 IReadableBitmapDataRow rowSrc = dataSrc.FirstRow;
                 IWritableBitmapDataRow rowDst = dataDst.FirstRow;
                 do
                 {
                     for (int x = 0; x < dataSrc.Width; x++)
                     {
                         // Note 1: If we used the indexer instead, then the source color would never be transparent.
                         // Note 2: We can use any type of the same size so int/uint types would also do the trick.
                         rowDst.WriteRaw(x, rowSrc.ReadRaw<Color32>(x));
                     }
                 } while (rowSrc.MoveNextRow() && rowDst.MoveNextRow());
             }]]></code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.InvalidOperationException">No built-in encoder was found or the saving fails in the current operating system.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsBmp(System.Drawing.Image,System.String)">
            <summary>
            Saves the specified <paramref name="image"/> to the specified file using the built-in BMP encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsBmp(System.Drawing.Image,System.IO.Stream)"/> overload for details and an example.
            </summary>
            <param name="image">The image to save. If contains multiple images, then only the current frame will be saved.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="image"/>. The directory of the specified path is created if it does not exist.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsJpeg(System.Drawing.Image,System.IO.Stream,System.Int32)">
             <summary>
             Saves the specified <paramref name="image"/> using the built-in JPEG encoder if available in the current operating system.
             Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
             <br/>See the <strong>Remarks</strong> section for details and an example.
             </summary>
             <param name="image">The image to save. If contains multiple images, then only the current frame will be saved.</param>
             <param name="stream">The stream to save the image into.</param>
             <param name="quality">An integer between 0 and 100 that determines the quality of the saved image. Higher value means
             better quality as well as bigger size. This parameter is optional.
             <br/>Default value: <c>90</c>.</param>
             <remarks>
             <para>The <paramref name="image"/> can only be saved if a built-in JPEG encoder is available in the current operating system.</para>
             <para>The saved JPEG image is will have always 24 BPP format.</para>
             <para>The JPEG format uses a lossy compression (even using the best quality) and does not support transparency for any <see cref="T:System.Drawing.Imaging.PixelFormat"/>.</para>
             <para>Transparent pixels will be black in the saved image. To use another background color use the <see cref="M:KGySoft.Drawing.BitmapExtensions.MakeOpaque(System.Drawing.Bitmap,System.Drawing.Color,KGySoft.Drawing.Imaging.IDitherer)">MakeOpaque</see>
             or <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> methods before saving (see also the example below).</para>
             <para>Images with different <see cref="T:System.Drawing.Imaging.PixelFormat"/>s are handled as follows (on Windows, unless specified otherwise):
             <list type="definition">
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>. Transparency will be lost.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>. Transparency will be lost.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>. Transparency will be lost.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>
             because otherwise GDI+ would throw an exception.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>.
             On Linux, before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>; otherwise, saving would fail.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>.
             On Linux, before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>; otherwise, saving would fail.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>;
             otherwise, the built-in encoder may save transparent pixels with nonzero color information incorrectly. Transparency will be lost.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/></term><description>When reloading the saved image the pixel format is preserved.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>;
             otherwise, the built-in encoder may save pixels with alpha incorrectly. Transparency will be lost.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>. Transparency will be lost.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>;
             otherwise, the built-in encoder may save pixels with alpha incorrectly. Transparency will be lost.</description></item>
             <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>;
             otherwise, the built-in encoder may save pixels with alpha incorrectly. Transparency will be lost.</description></item>
             </list>
             </para>
             </remarks>
             <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.InvalidOperationException">No built-in encoder was found or the saving fails in the current operating system.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="quality"/> must be between 0 and 100.</exception>
             <example>The following example demonstrates how to save an image with custom background color using the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsJpeg(System.Drawing.Image,System.IO.Stream,System.Int32)">SaveAsJpeg</see> method:
             <code lang="C#"><![CDATA[
             // this is a 32 BPP ARGB bitmap with transparency:
             using Bitmap origBmp = Icons.Information.ExtractBitmap(new Size(256, 256));
            
             // Turning the background white before saving (it would turn black otherwise):
             using Bitmap toSave = origBmp.ConvertPixelFormat(PixelFormat.Format24bppRgb, Color.White);
             // Or: origBmp.MakeOpaque(Color.White); // changes the original image instead of returning a new one
            
             // Saving the image with the white background:
             toSave.SaveAsJpeg(File.Create(@"C:\myimage.jpg"))]]></code>
             </example>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsJpeg(System.Drawing.Image,System.String,System.Int32)">
            <summary>
            Saves the specified <paramref name="image"/> to the specified file using the built-in JPEG encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsJpeg(System.Drawing.Image,System.IO.Stream,System.Int32)"/> overload for details and an example.
            </summary>
            <param name="image">The image to save. If contains multiple images, then only the current frame will be saved.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="image"/>. The directory of the specified path is created if it does not exist.</param>
            <param name="quality">An integer between 0 and 100 that determines the quality of the saved image. Higher value means
            better quality as well as bigger size. This parameter is optional.
            <br/>Default value: <c>90</c>.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsPng(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Saves the specified <paramref name="image"/> using the built-in PNG encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The image to save. If contains multiple images, then only the current frame will be saved.</param>
            <param name="stream">The stream to save the image into.</param>
            <remarks>
            <para>The <paramref name="image"/> can only be saved if a built-in PNG encoder is available in the current operating system.</para>
            <para>The saved PNG image will have 32 BPP format if the source image can have transparency; otherwise, it will have 24 BPP format.</para>
            <para>On Windows PNG is never saved with indexed format.</para>
            <para>Images with different <see cref="T:System.Drawing.Imaging.PixelFormat"/>s are handled as follows (on Windows, unless specified otherwise):
            <list type="definition">
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.
            On Linux, when reloading the saved image the pixel format is preserved, though transparency will be lost.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.
            On Linux, when reloading the saved image the pixel format is preserved, though transparency will be lost.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.
            On Linux, when reloading the saved image the pixel format is preserved, though transparency will be lost.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>
            because otherwise GDI+ would throw an exception.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>
            because the built-in encoder would save a 32 BPP image otherwise, which is just a waste of space.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>
            because the built-in encoder would save a 32 BPP image otherwise, which is just a waste of space.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/></term><description>When reloading the saved image the pixel format is preserved.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></term><description>When reloading the saved image the pixel format is preserved.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.
            On Linux, before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>; otherwise, the alpha channel in the saved image would be corrupted.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>
            because the built-in encoder would save a 32 BPP image with incorrect colors otherwise.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>
            because the built-in encoder would save the image incorrectly otherwise.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>
            because the built-in encoder would save the image incorrectly otherwise.</description></item>
            </list>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">No built-in encoder was found or the saving fails in the current operating system.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsPng(System.Drawing.Image,System.String)">
            <summary>
            Saves the specified <paramref name="image"/> to the specified file using the built-in PNG encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsPng(System.Drawing.Image,System.IO.Stream)"/> overload for details.
            </summary>
            <param name="image">The image to save. If contains multiple images, then only the current frame will be saved.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="image"/>. The directory of the specified path is created if it does not exist.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsGif(System.Drawing.Image,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Saves the specified <paramref name="image"/> using the built-in GIF encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The image to save. If image contains multiple images other than animated GIF frames, then only the current image will be saved.</param>
            <param name="stream">The stream to save the image into.</param>
            <param name="quantizer">If <paramref name="image"/> is a non-indexed one, then specifies the quantizer to be used to determine the colors of the saved image. If <see langword="null"/>,
            then the target colors will be optimized for the actual colors in the <paramref name="image"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">If a quantization has to be performed can specifies the ditherer to be used. If <see langword="null"/>, then no dithering will be performed. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.AsyncConfig)">GifEncoder.BeginEncodeImage</see> or <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer,KGySoft.Drawing.TaskConfig)">GifEncoder.EncodeImageAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>The <paramref name="image"/> can be saved even without a registered GIF encoder in the current operating system. To save the GIF image, the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class is used internally.</para>
            <para>If <paramref name="image"/> is an animated GIF, then the whole animation will be saved (can depend on the operating system).</para>
            <para>The GIF format supports single bit transparency only.</para>
            <para>If <paramref name="quantizer"/> is <see langword="null"/>&#160;and <paramref name="image"/> has a non-indexed pixel format, then a quantizer
            is automatically selected for optimizing the palette. The auto selected quantizer is obtained by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Grayscale(System.Drawing.Color)">PredefinedColorsQuantizer.Grayscale</see> method
            for the <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/> pixel format, and by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">OptimizedPaletteQuantizer.Wu</see> method for any other pixel formats.</para>
            <para>If <paramref name="ditherer"/> is <see langword="null"/>, then no ditherer will be auto-selected for the quantization.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">No built-in encoder was found or the saving fails in the current operating system.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsGif(System.Drawing.Image,System.String,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Saves the specified <paramref name="image"/> to the specified file using the built-in GIF encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsGif(System.Drawing.Image,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload for details.
            </summary>
            <param name="image">The image to save. If image contains multiple images other than animated GIF frames, then only the current image will be saved.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="image"/>. The directory of the specified path is created if it does not exist.</param>
            <param name="quantizer">If <paramref name="image"/> is a non-indexed one, then specifies the quantizer to be used to determine the colors of the saved image. If <see langword="null"/>,
            then the target colors will be optimized for the actual colors in the <paramref name="image"/>. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">If a quantization has to be performed can specifies the ditherer to be used. If <see langword="null"/>, then no dithering will be performed. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsGif(System.Drawing.Image,System.IO.Stream,System.Boolean)">
            <summary>
            Saves the specified <paramref name="image"/> as a GIF image.
            </summary>
            <param name="image">The image to save. If image contains multiple images other than animated GIF frames, then only the current image will be saved.</param>
            <param name="stream">The stream to save the image into.</param>
            <param name="allowDithering"><see langword="true"/>&#160; to allow dithering high color images using a fix palette; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <remarks>
            <para>This method is kept for compatibility reasons only and calls the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsGif(System.Drawing.Image,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload with the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.SystemDefault8BppPalette(System.Drawing.Color,System.Byte)">SystemDefault8BppPalette</see> quantizer.</para>
            <para>This method no longer relies on the dithering logic of the built-in GIF encoder. Instead, the ditherer is obtained by the <see cref="P:KGySoft.Drawing.Imaging.ErrorDiffusionDitherer.FloydSteinberg">ErrorDiffusionDitherer.FloydSteinberg</see> method if <paramref name="allowDithering"/> is <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsGif(System.Drawing.Image,System.IO.Stream,System.Drawing.Color[])">
            <summary>
            Saves the specified <paramref name="image"/> as a GIF image.
            </summary>
            <param name="image">The image to save. If image contains multiple images other than animated GIF frames, then only the current image will be saved.</param>
            <param name="stream">The stream to save the image into.</param>
            <param name="palette">The desired custom palette to use. If <see langword="null"/>, and a palette cannot be taken from the source image, then a default palette will be used.</param>
            <remarks>
            <para>This method is kept for compatibility reasons only and calls the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsGif(System.Drawing.Image,System.IO.Stream,KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload with a quantizer obtained by the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.FromCustomPalette(System.Drawing.Color[],System.Drawing.Color,System.Byte)">PredefinedColorsQuantizer.FromCustomPalette</see> method.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream,System.Collections.Generic.IEnumerable{System.TimeSpan},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Saves the provided <paramref name="frames"/> as a looping GIF animation into the specified <see cref="T:System.IO.Stream"/>.
            When <see cref="T:System.Drawing.Image"/> instances in <paramref name="frames"/> contain already multiple frames, only the current frame is taken.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="frames">The frames to save into the GIF data stream.</param>
            <param name="stream">The stream into the GIF data is to be saved.</param>
            <param name="delays">The collection of the delays to be used for the animation. If <see langword="null"/>&#160;or empty,
            then a default 100 ms delay will be used for all frames.
            If contains less elements than <paramref name="frames"/>, then the last value will be re-used for the remaining frames.</param>
            <param name="quantizer">An optional quantizer to be used for the frames. If <see langword="null"/>, then
            for frames with a non-indexed pixel format a quantizer returned by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">OptimizedPaletteQuantizer.Wu</see> method will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">An optional ditherer to be used when quantizing the frames. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.AsyncConfig)">GifEncoder.BeginEncodeAnimation</see> or <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimationAsync(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream,KGySoft.Drawing.TaskConfig)">GifEncoder.EncodeAnimationAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to adjust parallelization, set up cancellation and for reporting progress.</note>
            <para>When <paramref name="frames"/> contain multi-frame instances, this method takes only the current frame. You can extract
            images by the <see cref="M:KGySoft.Drawing.BitmapExtensions.ExtractBitmaps(System.Drawing.Bitmap)">ExtractBitmaps</see> extension method.</para>
            <para>The enumerator of <paramref name="frames"/> is evaluated in a lazy manner. You can even dispose the previous image once the next one is queried.</para>
            <para>Though this method does not support reporting progress directly, you can pass an iterator to the <paramref name="frames"/> parameter that can track
            how many images have already been processed.</para>
            <para>The resolution of the animation is determined by the first frame. If subsequent frames have different sizes, then they will be centered.</para>
            <para>If <paramref name="quantizer"/> supports an optimized palette for each frames (like <see cref="T:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer"/>), then some
            frames of the animation might have even more than 256 colors (depending on the differences between frames).</para>
            <note type="tip">To customize looping mode, frame size handling, delta frames strategy, etc., then use directly the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> class
            and its <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeAnimation(KGySoft.Drawing.Imaging.AnimatedGifConfiguration,System.IO.Stream)">EncodeAnimation</see> method. And for low level encoding you can instantiate the <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/>
            class and add the frames manually.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.String,System.Collections.Generic.IEnumerable{System.TimeSpan},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Saves the provided <paramref name="frames"/> as a looping GIF animation into the specified file.
            When <see cref="T:System.Drawing.Image"/> instances in <paramref name="frames"/> contain already multiple frames, only the current frame is taken.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream,System.Collections.Generic.IEnumerable{System.TimeSpan},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload for details.
            </summary>
            <param name="frames">The frames to save into the GIF data stream.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="frames"/>. The directory of the specified path is created if it does not exist.</param>
            <param name="delays">The collection of the delays to be used for the animation. If <see langword="null"/>&#160;or empty,
            then a default 100 ms delay will be used for all frames.
            If contains less elements than <paramref name="frames"/>, then the last value will be re-used for the remaining frames.</param>
            <param name="quantizer">An optional quantizer to be used for the frames. If <see langword="null"/>, then
            for frames with a non-indexed pixel format a quantizer returned by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">OptimizedPaletteQuantizer.Wu</see> method will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">An optional ditherer to be used when quantizing the frames. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream,System.Nullable{System.TimeSpan},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Saves the provided <paramref name="frames"/> as a looping GIF animation into the specified <see cref="T:System.IO.Stream"/>.
            When <see cref="T:System.Drawing.Image"/> instances in <paramref name="frames"/> contain already multiple frames, only the current frame is taken.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream,System.Collections.Generic.IEnumerable{System.TimeSpan},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> for details.
            </summary>
            <param name="frames">The frames to save into the GIF data stream.</param>
            <param name="stream">The stream into the GIF data is to be saved.</param>
            <param name="delay">An optional <see cref="T:System.TimeSpan"/> to specify the delay for all frames. If <see langword="null"/>,
            then a default 100 ms delay will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An optional quantizer to be used for the frames. If <see langword="null"/>, then
            for frames with a non-indexed pixel format a quantizer returned by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">OptimizedPaletteQuantizer.Wu</see> method will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">An optional ditherer to be used when quantizing the frames. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.String,System.Nullable{System.TimeSpan},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)">
            <summary>
            Saves the provided <paramref name="frames"/> as a looping GIF animation into the specified file.
            When <see cref="T:System.Drawing.Image"/> instances in <paramref name="frames"/> contain already multiple frames, only the current frame is taken.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsAnimatedGif(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream,System.Collections.Generic.IEnumerable{System.TimeSpan},KGySoft.Drawing.Imaging.IQuantizer,KGySoft.Drawing.Imaging.IDitherer)"/> overload for details.
            </summary>
            <param name="frames">The frames to save into the GIF data stream.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="frames"/>. The directory of the specified path is created if it does not exist.</param>
            <param name="delay">An optional <see cref="T:System.TimeSpan"/> to specify the delay for all frames. If <see langword="null"/>,
            then a default 100 ms delay will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="quantizer">An optional quantizer to be used for the frames. If <see langword="null"/>, then
            for frames with a non-indexed pixel format a quantizer returned by the <see cref="M:KGySoft.Drawing.Imaging.OptimizedPaletteQuantizer.Wu(System.Int32,System.Drawing.Color,System.Byte)">OptimizedPaletteQuantizer.Wu</see> method will be used. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
            <param name="ditherer">An optional ditherer to be used when quantizing the frames. This parameter is optional.
            <br/>Default value: <see langword="null"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsHighColorGif(System.Drawing.Image,System.IO.Stream,System.Boolean,System.Drawing.Color,System.Byte)">
            <summary>
            Encodes the specified <paramref name="image"/> as a multi-layered, single frame GIF image and writes it into the specified <paramref name="stream"/>, preserving its original color depth.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to save. If contains multiple images or frames, then only the current image or frame will be saved.</param>
            <param name="stream">The stream to save the image into.</param>
            <param name="allowFullScan"><see langword="true"/>&#160;to allow scanning the whole image for each layers to be able to re-use the local palette of the current layer.
            <br/><see langword="false"/>&#160;to expand the initial layer area to the local pixels only. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="backColor">Colors with alpha (transparency), whose <see cref="P:System.Drawing.Color.A">Color.A</see> property
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color during the encoding.
            The alpha value (<see cref="P:System.Drawing.Color.A">Color.A</see> property) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a pixel is considered transparent.
            If 0, then the final composite image will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <remarks>
            <note>This method adjusts the degree of parallelization automatically, blocks the caller, and does not support cancellation or reporting progress.
            Use the <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.BeginEncodeHighColorImage(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.AsyncConfig)">GifEncoder.BeginEncodeHighColorImage</see> or <see cref="M:KGySoft.Drawing.Imaging.GifEncoder.EncodeHighColorImageAsync(KGySoft.Drawing.Imaging.IReadableBitmapData,System.IO.Stream,System.Boolean,KGySoft.Drawing.Imaging.Color32,System.Byte,KGySoft.Drawing.TaskConfig)">GifEncoder.EncodeHighColorImageAsync</see>
            (in .NET Framework 4.0 and above) methods for asynchronous call and to set up cancellation or for reporting progress.</note>
            <note type="caution">This method produces a GIF image that may have compatibility issues. Though the <see cref="T:System.Drawing.Image"/> and <see cref="T:System.Drawing.Bitmap"/> types (at least in Windows)
            support them as expected as well as applications built on GDI+ (such as Windows Paint), many decoders may treat the result as an animation (including browsers).</note>
            <para>If <paramref name="allowFullScan"/> is <see langword="true"/>, then both the processing time and memory usage is higher.
            It helps to minimize the number of layers of the final image; however, the final image size will not be necessarily smaller, especially for true color images.</para>
            <para>If <paramref name="allowFullScan"/> is <see langword="false"/>, then each layer is attempted to be as compact as possible. It allows a very fast processing with lower memory usage.
            Though it usually produces more layers, the final size will not be necessarily larger, especially for true color images.</para>
            <note type="tip">You can prequantize true color images using a 16-bit quantizer (with or without dithering) to produce fairly compact, still high color GIF images.
            For such images the <paramref name="allowFullScan"/> parameter with <see langword="true"/>&#160;value typically produces more compact results.
            You can consider using the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Argb1555(System.Drawing.Color,System.Byte)">Argb1555</see> quantizer for images with transparency,
            or the <see cref="M:KGySoft.Drawing.Imaging.PredefinedColorsQuantizer.Rgb565(System.Drawing.Color)">Rgb565</see> quantizer for non-transparent images.</note>
            <para>To create a multi-layered image completely manually you can create a <see cref="T:KGySoft.Drawing.Imaging.GifEncoder"/> instance that provides a lower level access.</para>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsHighColorGif(System.Drawing.Image,System.String,System.Boolean,System.Drawing.Color,System.Byte)">
            <summary>
            Encodes the specified <paramref name="image"/> as a multi-layered, single frame GIF image and writes it into the specified file, preserving its original color depth.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsHighColorGif(System.Drawing.Image,System.IO.Stream,System.Boolean,System.Drawing.Color,System.Byte)"/> overload for details.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to save. If contains multiple images or frames, then only the current image or frame will be saved.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="image"/>. The directory of the specified path is created if it does not exist.</param>
            <param name="allowFullScan"><see langword="true"/>&#160;to allow scanning the whole image for each layers to be able to re-use the local palette of the current layer.
            <br/><see langword="false"/>&#160;to expand the initial layer area to the local pixels only. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <param name="backColor">Colors with alpha (transparency), whose <see cref="P:System.Drawing.Color.A">Color.A</see> property
            is equal to or greater than <paramref name="alphaThreshold"/> will be blended with this color during the encoding.
            The alpha value (<see cref="P:System.Drawing.Color.A">Color.A</see> property) of the specified background color is ignored. This parameter is optional.
            <br/>Default value: <see cref="F:System.Drawing.Color.Empty"/>, which has the same RGB values as <see cref="P:System.Drawing.Color.Black"/>.</param>
            <param name="alphaThreshold">Specifies a threshold value for the <see cref="P:System.Drawing.Color.A">Color.A</see> property, under which a pixel is considered transparent.
            If 0, then the final composite image will not have transparent pixels. This parameter is optional.
            <br/>Default value: <c>128</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="fileName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsTiff(System.Drawing.Image,System.IO.Stream,System.Boolean)">
            <summary>
            Saves the specified <paramref name="image"/> using the built-in TIFF encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The image to save. If contains multiple images, then the frames to be saved can be specified by the <paramref name="currentFrameOnly"/> parameter.</param>
            <param name="stream">The stream to save the image into.</param>
            <param name="currentFrameOnly"><see langword="true"/>&#160;to save only the current frame of the specified <paramref name="image"/>;
            <see langword="false"/>&#160;to save all frames. The frames can represent pages, animation and resolution dimensions but in any case they will be saved as pages. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
            <remarks>
            <para>The <paramref name="image"/> can only be saved if a built-in TIFF encoder is available in the current operating system.</para>
            <para>If <paramref name="currentFrameOnly"/> is <see langword="false"/>&#160;and <paramref name="image"/> is an icon, then images of the same resolution but lower color depth might be skipped.</para>
            <para>Images with different <see cref="T:System.Drawing.Imaging.PixelFormat"/>s are handled as follows (on Windows, unless specified otherwise):
            <list type="definition">
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/></term><description>If palette is black and white (in this order), then pixel format will be preserved.
            Otherwise, if the palette has no alpha entries, then before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/> so the built-in encoder will preserve palette.
            If the palette contains alpha entries, then the pixel format of the reloaded image may turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed"/></term><description>If the palette has no alpha entries the pixel format is preserved when reloading the saved image.
            Otherwise, the pixel format of the reloaded image may turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/></term><description>If the palette has no alpha entries the pixel format is preserved when reloading the saved image.
            Otherwise, the pixel format of the reloaded image may turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale"/></term><description>Before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>
            using a grayscale palette, because otherwise GDI+ would throw an exception.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb555"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>.
            On Linux, before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>; otherwise, the saved image would be corrupted.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppRgb565"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>.
            On Linux, before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>; otherwise, the saved image would be corrupted.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/></term><description>When reloading the saved image the pixel format is preserved.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></term><description>When reloading the saved image the pixel format is preserved.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/></term><description>On Windows, when reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.
            On Linux, before saving the image pixel format will be converted to <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>; otherwise, the alpha channel in the saved image would be corrupted.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb"/></term><description>If the original <paramref name="image"/> is already a 48 BPP TIFF image, then the pixel format is preserved (however,
            channels might be quantized using a 13 BPP resolution); otherwise, the image will be saved with <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/> pixel format.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppArgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</description></item>
            <item><term><see cref="F:System.Drawing.Imaging.PixelFormat.Format64bppPArgb"/></term><description>When reloading the saved image the pixel format will turn <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.</description></item>
            </list>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">No built-in encoder was found or the saving fails in the current operating system.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsTiff(System.Drawing.Image,System.String,System.Boolean)">
            <summary>
            Saves the specified <paramref name="image"/> to the specified file using the built-in TIFF encoder if available in the current operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/>.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsTiff(System.Drawing.Image,System.IO.Stream,System.Boolean)"/> overload for details.
            </summary>
            <param name="image">The image to save. If contains multiple images, then the frames to be saved can be specified by the <paramref name="currentFrameOnly"/> parameter.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="image"/>. The directory of the specified path is created if it does not exist.</param>
            <param name="currentFrameOnly"><see langword="true"/>&#160;to save only the current frame of the specified <paramref name="image"/>;
            <see langword="false"/>&#160;to save all frames. The frames can represent pages, animation and resolution dimensions but in any case they will be saved as pages. This parameter is optional.
            <br/>Default value: <see langword="true"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsMultipageTiff(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream)">
            <summary>
            Saves the provided <paramref name="images"/> as a multi-page TIFF into the specified <see cref="T:System.IO.Stream"/>.
            When <see cref="T:System.Drawing.Image"/> instances in <paramref name="images"/> contain already multiple pages, only the current page is taken.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="images">The images to save into the TIFF data stream.</param>
            <param name="stream">The stream into the TIFF data is to be saved.</param>
            <remarks>
            <para>When <paramref name="images"/> contain multi-page instances, this method takes only the current page. You can extract
            images by the <see cref="M:KGySoft.Drawing.BitmapExtensions.ExtractBitmaps(System.Drawing.Bitmap)">ExtractBitmaps</see> extension method.</para>
            <note>On non-Windows platform this method may throw a <see cref="T:System.NotSupportedException"/> if <paramref name="images"/> has multiple elements.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsMultipageTiff(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.String)">
            <summary>
            Saves the provided <paramref name="images"/> as a multi-page TIFF into the specified <see cref="T:System.IO.Stream"/>.
            When <see cref="T:System.Drawing.Image"/> instances in <paramref name="images"/> contain already multiple pages, only the current page is taken.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsMultipageTiff(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream)"/> overload for details.
            </summary>
            <param name="images">The images to save into the TIFF data stream.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="images"/>. The directory of the specified path is created if it does not exist.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsIcon(System.Drawing.Image,System.IO.Stream,System.Boolean)">
            <summary>
            Saves the specified <paramref name="image"/> as an Icon without relying on a built-in encoder in the operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/> and does not save a PNG stream when no built-in Icon encoder can be found in the operating system.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="image">The image to save. If contains multiple images other than multi-resolution icon bitmaps, then only the current frame will be saved.</param>
            <param name="stream">The stream to save the image into.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force saving an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <remarks>
            <para>The <paramref name="image"/> can be saved even without a registered Icon encoder in the current operating system.</para>
            <para>If the saved image is reloaded by the <see cref="M:System.Drawing.Bitmap.#ctor(System.IO.Stream)"/> constructor, then it will have always <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format.
            The indexed and 24 BPP pixel formats are preserved though if the saved stream is reloaded by the <see cref="M:System.Drawing.Icon.#ctor(System.IO.Stream)"/> constructor.</para>
            <para>On non-Windows platforms reloading the large icons can be problematic.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsIcon(System.Drawing.Image,System.String,System.Boolean)">
            <summary>
            Saves the specified <paramref name="image"/> as an Icon without relying on a built-in encoder in the operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/> and does not save a PNG stream when no built-in Icon encoder can be found in the operating system.
            <br/>See the <strong>Remarks</strong> section of the <see cref="M:KGySoft.Drawing.ImageExtensions.SaveAsIcon(System.Drawing.Image,System.IO.Stream,System.Boolean)"/> overload for details.
            </summary>
            <param name="image">The image to save. If contains multiple images other than multi-resolution icon bitmaps, then only the current frame will be saved.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="image"/>. The directory of the specified path is created if it does not exist.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force saving an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.SaveAsIcon(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream,System.Boolean)">
            <summary>
            Saves the specified <paramref name="images"/> as an Icon without relying on a built-in encoder in the operating system.
            Unlike the <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)"/> method, this one supports every <see cref="T:System.Drawing.Imaging.PixelFormat"/> and does not save a PNG stream when no built-in Icon encoder can be found in the operating system.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="images">The images to save as a single icon.</param>
            <param name="stream">The stream to save the images into.</param>
            <param name="forceUncompressedResult"><see langword="true"/>&#160;to force saving an uncompressed icon;
            <see langword="false"/>&#160;to allow PNG compression, which is supported by Windows Vista and above. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <remarks>
            <para>The icon can be saved even without a registered Icon encoder in the current operating system.</para>
            <para>If the saved image is reloaded by the <see cref="M:System.Drawing.Bitmap.#ctor(System.IO.Stream)"/> constructor, then it will have always <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> pixel format.
            The indexed and 24 BPP pixel formats are preserved though if the saved stream is reloaded by the <see cref="M:System.Drawing.Icon.#ctor(System.IO.Stream)"/> constructor.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="images"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="images"/> contains a <see langword="null"/>&#160;element.</exception>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.GetBitsPerPixel(System.Drawing.Image)">
            <summary>
            Gets the bits per pixel (BPP) value of the image.
            </summary>
            <param name="image">The image to obtain the bits-per-pixel value from.</param>
            <returns>The bits per pixel (BPP) value of the image.</returns>
        </member>
        <member name="M:KGySoft.Drawing.ImageExtensions.InitPalette(System.Drawing.Imaging.PixelFormat,System.Drawing.Bitmap,System.Drawing.Bitmap,System.Drawing.Color[])">
            <summary>
            Initializes target bitmap palette.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.MetafileExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Drawing.Imaging.Metafile"/> type.
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.key">
            <summary>
            Magic number (always 9AC6CDD7h)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.handle">
            <summary>
            Metafile HANDLE number (always 0)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.left">
            <summary>
            Left coordinate in metafile units
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.top">
            <summary>
            Top coordinate in metafile units
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.right">
            <summary>
            Right coordinate in metafile units
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.bottom">
            <summary>
            Bottom coordinate in metafile units
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.inch">
            <summary>
            Number of metafile units per inch
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.reserved">
            <summary>
            Reserved (always 0)
            </summary>
        </member>
        <member name="F:KGySoft.Drawing.MetafileExtensions.WmfHeader.checksum">
            <summary>
            Checksum value for previous 10 WORDs
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.ToBitmap(System.Drawing.Imaging.Metafile,System.Drawing.Size,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Drawing.Bitmap"/> of a <see cref="T:System.Drawing.Imaging.Metafile"/> instance specified in the <paramref name="metafile"/> parameter.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to convert.</param>
            <param name="requestedSize">The requested size of the result <see cref="T:System.Drawing.Bitmap"/>. This overload does not maintain aspect ratio.</param>
            <param name="antiAliased"><see langword="true"/>&#160;to create an anti-aliased result; otherwise, <see langword="false"/>. This parameter is optional.
            <br/>Default value: <see langword="false"/>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance of the requested size.</returns>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.ToBitmap(System.Drawing.Imaging.Metafile,System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Drawing.Bitmap"/> of a <see cref="T:System.Drawing.Imaging.Metafile"/> instance specified in the <paramref name="metafile"/> parameter.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> to convert.</param>
            <param name="requestedSize">The requested size of the result <see cref="T:System.Drawing.Bitmap"/>.</param>
            <param name="antiAliased"><see langword="true"/>&#160;to create an anti-aliased result; otherwise, <see langword="false"/>.</param>
            <param name="keepAspectRatio"><see langword="true"/>&#160;to keep aspect ratio of the source <paramref name="metafile"/>; otherwise, <see langword="false"/>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> instance of the requested size.</returns>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.Save(System.Drawing.Imaging.Metafile,System.IO.Stream)">
            <summary>
            Saves a <see cref="T:System.Drawing.Imaging.Metafile"/> instance into a <see cref="T:System.IO.Stream"/>.
            Actual format is selected by the raw format of the metafile.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> instance to save.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> into the metafile should be saved.</param>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
            <remarks>
            <note>This method is supported on Windows only.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.Save(System.Drawing.Imaging.Metafile,System.IO.Stream,System.Boolean)">
            <summary>
            Saves a <see cref="T:System.Drawing.Imaging.Metafile"/> instance into a <see cref="T:System.IO.Stream"/> using the required format.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> instance to save.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> into the metafile should be saved.</param>
            <param name="forceWmfFormat">When <see langword="true"/>, forces to use the Windows Metafile Format (WMF), even if
            the <paramref name="metafile"/> itself is encoded by Enhanced Metafile Format (EMF). When <see langword="false"/>, uses the appropriate format automatically.</param>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
            <remarks>
            <note>This method is supported on Windows only.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.SaveAsEmf(System.Drawing.Imaging.Metafile,System.IO.Stream)">
            <summary>
            Saves the specified <paramref name="metafile"/> as an EMF (Enhanced Metafile) using Windows API.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> instance to save. It must have <see cref="P:System.Drawing.Imaging.ImageFormat.Emf"/> raw format.</param>
            <param name="stream">The stream to save the image into.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metafile"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Image.RawFormat"/> of the specified <paramref name="metafile"/> is not the <see cref="P:System.Drawing.Imaging.ImageFormat.Emf"/> format.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
            <remarks>
            <note>This method is supported on Windows only.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.SaveAsEmf(System.Drawing.Imaging.Metafile,System.String)">
            <summary>
            Saves the specified <paramref name="metafile"/> to the specified file as an EMF (Enhanced Metafile) using Windows API.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> instance to save. It must have <see cref="P:System.Drawing.Imaging.ImageFormat.Emf"/> raw format.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="metafile"/>. The directory of the specified path is created if it does not exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metafile"/> or <paramref name="fileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Image.RawFormat"/> of the specified <paramref name="metafile"/> is not the <see cref="P:System.Drawing.Imaging.ImageFormat.Emf"/> format.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
            <remarks>
            <note>This method is supported on Windows only.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.SaveAsWmf(System.Drawing.Imaging.Metafile,System.IO.Stream)">
            <summary>
            Saves the specified <paramref name="metafile"/> as a WMF (Windows Metafile) using Windows API.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> instance to save.</param>
            <param name="stream">The stream to save the image into.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metafile"/> or <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
            <remarks>
            <note>This method is supported on Windows only.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.MetafileExtensions.SaveAsWmf(System.Drawing.Imaging.Metafile,System.String)">
            <summary>
            Saves the specified <paramref name="metafile"/> to the specified file as a WMF (Windows Metafile) using Windows API.
            </summary>
            <param name="metafile">The <see cref="T:System.Drawing.Imaging.Metafile"/> instance to save.</param>
            <param name="fileName">The name of the file to which to save the <paramref name="metafile"/>. The directory of the specified path is created if it does not exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metafile"/> or <paramref name="fileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is supported on Windows only.</exception>
            <remarks>
            <note>This method is supported on Windows only.</note>
            </remarks>
        </member>
        <member name="T:KGySoft.Drawing.PixelFormatExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Drawing.Imaging.PixelFormat"/> type.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.PixelFormatExtensions.ToBitsPerPixel(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Gets the bits per pixel (BPP) value of a <see cref="T:System.Drawing.Imaging.PixelFormat"/> value.
            </summary>
            <param name="pixelFormat">The pixel format to convert.</param>
            <returns>The bits per pixel (BPP) value of a <see cref="T:System.Drawing.Imaging.PixelFormat"/> value.</returns>
            <remarks>
            <note>This method does not check whether the specified <paramref name="pixelFormat"/> represents a valid value.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.PixelFormatExtensions.IsValidFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Gets whether this <see cref="T:System.Drawing.Imaging.PixelFormat"/> instance represents a valid format.
            The valid format values are the ones, whose name starts with <c>Format</c>.
            </summary>
            <param name="pixelFormat">The pixel format to be checked.</param>
            <returns><see langword="true"/>, if this <see cref="T:System.Drawing.Imaging.PixelFormat"/> instance represents a valid format; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.PixelFormatExtensions.IsSupportedNatively(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Gets whether the specified <paramref name="pixelFormat"/> is supported natively on the current operating system.
            <br/>See the <strong>Remarks</strong> section for details.
            </summary>
            <param name="pixelFormat">The pixel format to check.</param>
            <returns><see langword="true"/>, if the specified <paramref name="pixelFormat"/> is supported on the current operating system; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>If <paramref name="pixelFormat"/> does not represent a valid format (the <see cref="M:KGySoft.Drawing.PixelFormatExtensions.IsValidFormat(System.Drawing.Imaging.PixelFormat)">IsValidFormat</see> method returns <see langword="false"/>), then
            this method returns <see langword="false"/>.</para>
            <para>This method returns <see langword="true"/>, if a <see cref="T:System.Drawing.Bitmap"/> can be created with the specified <paramref name="pixelFormat"/>.
            Even in such case there might be some limitations on the current operating system when using some <see cref="T:System.Drawing.Imaging.PixelFormat"/>s.</para>
            <note>For information about the possible usable <see cref="T:System.Drawing.Imaging.PixelFormat"/>s on different platforms see the <strong>Remarks</strong>
            section of the <see cref="M:KGySoft.Drawing.ImageExtensions.ConvertPixelFormat(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,System.Byte)">ConvertPixelFormat</see> extension method.</note>
            </remarks>
        </member>
        <member name="M:KGySoft.Drawing.PixelFormatExtensions.IsIndexed(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Gets whether this <see cref="T:System.Drawing.Imaging.PixelFormat"/> instance represents an indexed format.
            </summary>
            <param name="pixelFormat">The pixel format to be checked.</param>
            <returns><see langword="true"/>, if this <see cref="T:System.Drawing.Imaging.PixelFormat"/> instance represents an indexed format; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <note>This method does not check whether the specified <paramref name="pixelFormat"/> represents a valid value.</note>
            </remarks>
        </member>
        <member name="T:KGySoft.Drawing.IAsyncContext">
            <summary>
            Represents the context of a possibly asynchronous drawing operation.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IAsyncContext.MaxDegreeOfParallelism">
            <summary>
            Gets the maximum degree of parallelism. If zero or less, then it is adjusted automatically.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IAsyncContext.IsCancellationRequested">
            <summary>
            Gets whether the cancellation of the current operation has been requested.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IAsyncContext.CanBeCanceled">
            <summary>
            Gets whether this operation can be canceled.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.IAsyncContext.Progress">
            <summary>
            Gets an <see cref="T:KGySoft.Drawing.IDrawingProgress"/> instance that can be used to report progress, or <see langword="null"/>&#160;if
            no progress reporter belongs to the current operation.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.IAsyncContext.ThrowIfCancellationRequested">
            <summary>
            Throws an <see cref="T:System.OperationCanceledException"/> if <see cref="P:KGySoft.Drawing.IAsyncContext.IsCancellationRequested"/> returns <see langword="true"/>.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.IDrawingProgress">
            <summary>
            Represents a provider for progress updates for drawing operations.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.IDrawingProgress.Report(KGySoft.Drawing.DrawingProgress)">
            <summary>
            Reports a progress update to any arbitrary state.
            For parallel operations it is recommended to use the <see cref="M:KGySoft.Drawing.IDrawingProgress.Increment">Increment</see> method
            after starting a new progress because this method cannot guarantee that <see cref="P:KGySoft.Drawing.DrawingProgress.CurrentValue"/> will be a strictly
            increasing value when called from <see cref="T:System.Threading.Tasks.Parallel"/> members, for example.
            </summary>
            <param name="progress">The value of the updated progress.</param>
        </member>
        <member name="M:KGySoft.Drawing.IDrawingProgress.New(KGySoft.Drawing.DrawingOperation,System.Int32,System.Int32)">
            <summary>
            Indicates that a new progress session is started that consists of <paramref name="maximumValue"/>.
            </summary>
            <param name="operationType">Type of the new operation.</param>
            <param name="maximumValue">Specifies the possible maximum steps of the new operation (the <see cref="M:KGySoft.Drawing.IDrawingProgress.Increment">Increment</see> method is expected to be called later on
            as many times as the value of this parameter). 0 means an operation with no separate steps. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
            <param name="currentValue">Specifies the initial current value for the new progress. Should be between 0 and <paramref name="maximumValue"/>. This parameter is optional.
            <br/>Default value: <c>0</c>.</param>
        </member>
        <member name="M:KGySoft.Drawing.IDrawingProgress.Increment">
            <summary>
            Indicates a progress update of a single step. Expected to be called after the <see cref="M:KGySoft.Drawing.IDrawingProgress.New(KGySoft.Drawing.DrawingOperation,System.Int32,System.Int32)">New</see> or <see cref="M:KGySoft.Drawing.IDrawingProgress.Report(KGySoft.Drawing.DrawingProgress)">Report</see> methods with nonzero maximum steps
            but should not be sensitive for concurrency racing conditions.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.IDrawingProgress.SetProgressValue(System.Int32)">
            <summary>
            Indicates that the current progress is at a specific position.
            </summary>
            <param name="value">The current progress value. Should not exceed the maximum value of the last <see cref="M:KGySoft.Drawing.IDrawingProgress.New(KGySoft.Drawing.DrawingOperation,System.Int32,System.Int32)">New</see> or <see cref="M:KGySoft.Drawing.IDrawingProgress.Report(KGySoft.Drawing.DrawingProgress)">Report</see> calls
            but should not be sensitive for concurrency racing conditions.
            </param>
        </member>
        <member name="M:KGySoft.Drawing.IDrawingProgress.Complete">
            <summary>
            Indicates that a progress value of the last <see cref="M:KGySoft.Drawing.IDrawingProgress.New(KGySoft.Drawing.DrawingOperation,System.Int32,System.Int32)">New</see> or <see cref="M:KGySoft.Drawing.IDrawingProgress.Report(KGySoft.Drawing.DrawingProgress)">Report</see> method should be set to the maximum value.
            It is not needed to be called at the end of each sessions.
            </summary>
        </member>
        <member name="T:KGySoft.Drawing.DrawingProgress">
            <summary>
            Represents the progress of a drawing operation.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.DrawingProgress.OperationType">
            <summary>
            Gets the type of the drawing operation.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.DrawingProgress.MaximumValue">
            <summary>
            Gets the maximum steps of this operation.
            </summary>
        </member>
        <member name="P:KGySoft.Drawing.DrawingProgress.CurrentValue">
            <summary>
            Gets the current step of this operation. Its value is between zero and <see cref="P:KGySoft.Drawing.DrawingProgress.MaximumValue"/>, inclusive bounds.
            </summary>
        </member>
        <member name="M:KGySoft.Drawing.DrawingProgress.op_Equality(KGySoft.Drawing.DrawingProgress,KGySoft.Drawing.DrawingProgress)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.DrawingProgress"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.DrawingProgress"/> instance that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.DrawingProgress"/> instance that is to the right of the equality operator.</param>
            <returns><see langword="true"/>&#160;if the two <see cref="T:KGySoft.Drawing.DrawingProgress"/> structures are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.DrawingProgress.op_Inequality(KGySoft.Drawing.DrawingProgress,KGySoft.Drawing.DrawingProgress)">
            <summary>
            Gets whether two <see cref="T:KGySoft.Drawing.DrawingProgress"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:KGySoft.Drawing.DrawingProgress"/> instance that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:KGySoft.Drawing.DrawingProgress"/> instance that is to the right of the inequality operator.</param>
            <returns><see langword="true"/>&#160;if the two <see cref="T:KGySoft.Drawing.DrawingProgress"/> structures are different; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.DrawingProgress.#ctor(KGySoft.Drawing.DrawingOperation,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:KGySoft.Drawing.DrawingProgress"/> struct.
            </summary>
            <param name="operationType">Specifies the type of the drawing operation.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="currentValue">The current value.</param>
        </member>
        <member name="M:KGySoft.Drawing.DrawingProgress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><see langword="true"/>&#160;if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:KGySoft.Drawing.DrawingProgress.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:KGySoft.Drawing.DrawingProgress.Equals(KGySoft.Drawing.DrawingProgress)">
            <summary>
            Indicates whether the this <see cref="T:KGySoft.Drawing.DrawingProgress"/> is equal to another one.
            </summary>
            <param name="other">A <see cref="T:KGySoft.Drawing.DrawingProgress"/> instance to compare with this one.</param>
            <returns><see langword="true"/>&#160;if the current object is equal to the <paramref name="other"/>&#160;<see cref="T:KGySoft.Drawing.DrawingProgress"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:KGySoft.Drawing.NamespaceDoc">
            <summary>
            The <c>KGySoft.Drawing</c> namespace contains extension methods and types built around the types of the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing" target="_blank">System.Drawing</a> namespace.
            Among others, provides advanced support for the <see cref="T:System.Drawing.Icon"/> type such as extracting, combining and converting multi-resolution icons, including hi-resolution ones,
            supports saving several <see cref="T:System.Drawing.Image"/> formats, including formats without built-in encoders (eg. icons and <see cref="T:System.Drawing.Imaging.Metafile"/>s), provides methods for pixel format conversion, quantizing, dithering, etc.
            </summary>
        </member>
        <member name="T:KGySoft.Res">
            <summary>
            Contains the string resources of the project.
            </summary>
        </member>
        <member name="P:KGySoft.Res.RequiresWindows">
            <summary>This operation is supported on Windows only.</summary>
        </member>
        <member name="P:KGySoft.Res.OperationCanceled">
            <summary>The operation was canceled.</summary>
        </member>
        <member name="P:KGySoft.Res.Gdi32InvalidHandle">
            <summary>Invalid GDI object handle.</summary>
        </member>
        <member name="P:KGySoft.Res.Gdi32GetEmfContentFailed">
            <summary>Could not retrieve Enhanced Metafile content.</summary>
        </member>
        <member name="P:KGySoft.Res.Gdi32GetWmfContentFailed">
            <summary>Could not retrieve Windows Metafile content.</summary>
        </member>
        <member name="P:KGySoft.Res.Gdi32InvalidEmfHandle">
            <summary>Invalid Enhanced Metafile handle.</summary>
        </member>
        <member name="P:KGySoft.Res.Gdi32InvalidWmfHandle">
            <summary>Invalid Windows Metafile handle.</summary>
        </member>
        <member name="P:KGySoft.Res.GraphicsExtensionsToBitmapMetafileNotSupported">
            <summary>A Graphics from Metafile is not supported. Once the Graphics is disposed you can use the MetafileExtensions.ToBitmap methods to convert the Metafile to a Bitmap.</summary>
        </member>
        <member name="P:KGySoft.Res.IconExtensionsImagesColorsDifferentLength">
            <summary>Length of images and transparentColors must be the same.</summary>
        </member>
        <member name="P:KGySoft.Res.ImageExtensionsMultipageTiffSaveNotSupported">
            <summary>Saving multi-page TIFF is not supported on the current platform.</summary>
        </member>
        <member name="P:KGySoft.Res.MetafileExtensionsCannotBeSavedAsEmf">
            <summary>The specified metafile can only be saved as WMF.</summary>
        </member>
        <member name="P:KGySoft.Res.RawIconTooManyImages">
            <summary>There are too many images in the icon collection.</summary>
        </member>
        <member name="P:KGySoft.Res.RawIconBadIconFormat">
            <summary>Bad icon format.</summary>
        </member>
        <member name="P:KGySoft.Res.RawIconCannotBeInstantiatedAsIcon">
            <summary>On this platform this icon cannot be instantiated with the current size or compression.</summary>
        </member>
        <member name="P:KGySoft.Res.RawIconCannotBeInstantiatedAsBitmap">
            <summary>On this platform this icon cannot be instantiated as a bitmap with the current size or compression.</summary>
        </member>
        <member name="P:KGySoft.Res.User32InvalidHandle">
            <summary>Invalid handle.</summary>
        </member>
        <member name="P:KGySoft.Res.User32CreateIconIndirectFailed">
            <summary>Could not create icon or cursor.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingInvalidOperationIndexedOnly">
            <summary>This method can be used only on bitmaps with indexed pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingQuantizerInitializeNull">
            <summary>The IQuantizer.Initialize method returned a null value.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingDithererInitializeNull">
            <summary>The IDitherer.Initialize method returned a null value.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingNotBitmapDataStream">
            <summary>Not a valid bitmap data stream.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingInvalidBitmapDataSize">
            <summary>The bitmap data has an invalid size.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingNonIndexedPixelFormatExpected">
            <summary>This method expects a non-indexed pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingIndexedPixelFormatExpected">
            <summary>This method expects an indexed pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingWidthTooLarge">
            <summary>The specified width is too large for the given buffer width and pixel format.</summary>
        </member>
        <member name="P:KGySoft.Res.ImagingIndexedPixelFormatTooLarge">
            <summary>An indexed pixel format should not be larger than 16 bits per pixel.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderCannotChangeProperty">
            <summary>This property cannot be set after adding the first image.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderPaletteTooLarge">
            <summary>The palette must not have more than 256 colors.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderCommentTooLong">
            <summary>GIF comments cannot be longer than 255 characters.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderCommentNotAscii">
            <summary>GIF comments can consist of ASCII characters only.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderAnimationContainsNoFrames">
            <summary>Encoder options did not return any frames.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderNullFrame">
            <summary>Encoder options returned a null frame. You must initialize GifEncodingOptions with an enumeration that does not have a null element.</summary>
        </member>
        <member name="P:KGySoft.Res.GifEncoderUnexpectedFrameSize">
            <summary>A frame had an unexpected size. Set the GifEncodingOptions.SizeHandling property to allow different input sizes.</summary>
        </member>
        <member name="M:KGySoft.Res.EnsureInitialized">
            <summary>
            Just an empty method to be able to trigger the static constructor without running any code other than field initializations.
            </summary>
        </member>
        <member name="M:KGySoft.Res.InternalError(System.String)">
            <summary>Internal Error: {0}</summary>
            <remarks>Use this method to avoid CA1303 for using string literals in internal errors that never supposed to occur.</remarks>
        </member>
        <member name="M:KGySoft.Res.PixelFormatInvalid(System.Drawing.Imaging.PixelFormat)">
            <summary>Pixel format '{0}' does not represent an actual format.</summary>
        </member>
        <member name="M:KGySoft.Res.InvalidAsyncResult(System.String)">
            <summary>Either the IAsyncResult object did not come from the corresponding '{0}' method, or the End method was called multiple times with the same IAsyncResult.</summary>
        </member>
        <member name="M:KGySoft.Res.ImageExtensionsNoEncoder(System.Drawing.Imaging.ImageFormat)">
            <summary>No encoder was found for the '{0}' format.</summary>
        </member>
        <member name="M:KGySoft.Res.ImageExtensionsEncoderSaveFail(System.Drawing.Imaging.ImageFormat)">
            <summary>Could not save the image by the '{0}' encoder.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingPixelFormatNotSupported(System.Drawing.Imaging.PixelFormat)">
            <summary>Pixel format '{0}' is not supported by native Bitmaps on the current platform.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingPaletteTooLarge(System.Int32,System.Int32)">
            <summary>Palette must not have more than {0} colors for a pixel format of '{1}' bits per pixel.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingStrideTooSmall(System.Int32)">
            <summary>For the given pixel format and width stride must not be less than {0}.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingStrideInvalid(System.Type,System.Int32)">
            <summary>For element type '{0}' stride must be a multiple of {1}.</summary>
        </member>
        <member name="M:KGySoft.Res.ImagingBufferLengthTooSmall(System.Int32)">
            <summary>The specified buffer should have at least {0} elements for the specified size, stride and pixel format.</summary>
        </member>
    </members>
</doc>
